
ILI93XX_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e30  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000084c  20000000  00402e30  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004b0  2000084c  0040367c  0001084c  2**2
                  ALLOC
  3 .stack        00003004  20000cfc  00403b2c  0001084c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0001084c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010876  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000cb16  00000000  00000000  000108d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ff0  00000000  00000000  0001d3e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005e7d  00000000  00000000  0001f3d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000a60  00000000  00000000  00025254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a18  00000000  00000000  00025cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000145af  00000000  00000000  000266cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bd98  00000000  00000000  0003ac7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00058d20  00000000  00000000  00046a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e00  00000000  00000000  0009f734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003d00 	.word	0x20003d00
  400004:	00401189 	.word	0x00401189
  400008:	00401185 	.word	0x00401185
  40000c:	00401185 	.word	0x00401185
  400010:	00401185 	.word	0x00401185
  400014:	00401185 	.word	0x00401185
  400018:	00401185 	.word	0x00401185
	...
  40002c:	00401185 	.word	0x00401185
  400030:	00401185 	.word	0x00401185
  400034:	00000000 	.word	0x00000000
  400038:	00401185 	.word	0x00401185
  40003c:	00401185 	.word	0x00401185
  400040:	00401185 	.word	0x00401185
  400044:	00401185 	.word	0x00401185
  400048:	00401185 	.word	0x00401185
  40004c:	00401185 	.word	0x00401185
  400050:	00401185 	.word	0x00401185
  400054:	00401185 	.word	0x00401185
  400058:	00401185 	.word	0x00401185
  40005c:	00401185 	.word	0x00401185
  400060:	00401185 	.word	0x00401185
  400064:	00401185 	.word	0x00401185
  400068:	00000000 	.word	0x00000000
  40006c:	00400f81 	.word	0x00400f81
  400070:	00400f95 	.word	0x00400f95
  400074:	00400fa9 	.word	0x00400fa9
  400078:	00401185 	.word	0x00401185
  40007c:	00401185 	.word	0x00401185
	...
  400088:	00401185 	.word	0x00401185
  40008c:	00401185 	.word	0x00401185
  400090:	00401185 	.word	0x00401185
  400094:	00401185 	.word	0x00401185
  400098:	00401185 	.word	0x00401185
  40009c:	00401185 	.word	0x00401185
  4000a0:	00401185 	.word	0x00401185
  4000a4:	00401185 	.word	0x00401185
  4000a8:	00401185 	.word	0x00401185
  4000ac:	00401185 	.word	0x00401185
  4000b0:	00401185 	.word	0x00401185
  4000b4:	00401185 	.word	0x00401185
  4000b8:	00401185 	.word	0x00401185
  4000bc:	00401185 	.word	0x00401185
  4000c0:	00401185 	.word	0x00401185
  4000c4:	00401185 	.word	0x00401185
  4000c8:	00401185 	.word	0x00401185

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000084c 	.word	0x2000084c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402e30 	.word	0x00402e30

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00402e30 	.word	0x00402e30
  40011c:	20000850 	.word	0x20000850
  400120:	00402e30 	.word	0x00402e30
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	0040134d 	.word	0x0040134d
  40016c:	00401025 	.word	0x00401025
  400170:	00401079 	.word	0x00401079
  400174:	00401089 	.word	0x00401089
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00401099 	.word	0x00401099
  400184:	00400fbd 	.word	0x00400fbd
  400188:	00401239 	.word	0x00401239

0040018c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40018c:	b9a8      	cbnz	r0, 4001ba <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40018e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400192:	460c      	mov	r4, r1
  400194:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400196:	2a00      	cmp	r2, #0
  400198:	dd0a      	ble.n	4001b0 <_read+0x24>
  40019a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40019c:	4e08      	ldr	r6, [pc, #32]	; (4001c0 <_read+0x34>)
  40019e:	4d09      	ldr	r5, [pc, #36]	; (4001c4 <_read+0x38>)
  4001a0:	6830      	ldr	r0, [r6, #0]
  4001a2:	4621      	mov	r1, r4
  4001a4:	682b      	ldr	r3, [r5, #0]
  4001a6:	4798      	blx	r3
		ptr++;
  4001a8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001aa:	42bc      	cmp	r4, r7
  4001ac:	d1f8      	bne.n	4001a0 <_read+0x14>
  4001ae:	e001      	b.n	4001b4 <_read+0x28>
  4001b0:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  4001b4:	4640      	mov	r0, r8
  4001b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001ba:	f04f 30ff 	mov.w	r0, #4294967295
  4001be:	4770      	bx	lr
  4001c0:	20000ce0 	.word	0x20000ce0
  4001c4:	20000cd8 	.word	0x20000cd8

004001c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001c8:	3801      	subs	r0, #1
  4001ca:	2802      	cmp	r0, #2
  4001cc:	d818      	bhi.n	400200 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001d2:	460e      	mov	r6, r1
  4001d4:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001d6:	b182      	cbz	r2, 4001fa <_write+0x32>
  4001d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400214 <_write+0x4c>
  4001de:	4f0c      	ldr	r7, [pc, #48]	; (400210 <_write+0x48>)
  4001e0:	f8d8 0000 	ldr.w	r0, [r8]
  4001e4:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001e8:	683b      	ldr	r3, [r7, #0]
  4001ea:	4798      	blx	r3
  4001ec:	2800      	cmp	r0, #0
  4001ee:	db0a      	blt.n	400206 <_write+0x3e>
  4001f0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f2:	3c01      	subs	r4, #1
  4001f4:	d1f4      	bne.n	4001e0 <_write+0x18>
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4001fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  400200:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  400204:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400206:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40020e:	bf00      	nop
  400210:	20000cdc 	.word	0x20000cdc
  400214:	20000ce0 	.word	0x20000ce0

00400218 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400218:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40021a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40021e:	4b24      	ldr	r3, [pc, #144]	; (4002b0 <board_init+0x98>)
  400220:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400222:	200b      	movs	r0, #11
  400224:	4c23      	ldr	r4, [pc, #140]	; (4002b4 <board_init+0x9c>)
  400226:	47a0      	blx	r4
  400228:	200c      	movs	r0, #12
  40022a:	47a0      	blx	r4
  40022c:	200d      	movs	r0, #13
  40022e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400230:	2013      	movs	r0, #19
  400232:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400236:	4c20      	ldr	r4, [pc, #128]	; (4002b8 <board_init+0xa0>)
  400238:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40023a:	2014      	movs	r0, #20
  40023c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400240:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400242:	2023      	movs	r0, #35	; 0x23
  400244:	491d      	ldr	r1, [pc, #116]	; (4002bc <board_init+0xa4>)
  400246:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  400248:	204c      	movs	r0, #76	; 0x4c
  40024a:	491d      	ldr	r1, [pc, #116]	; (4002c0 <board_init+0xa8>)
  40024c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40024e:	481d      	ldr	r0, [pc, #116]	; (4002c4 <board_init+0xac>)
  400250:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400258:	4b1b      	ldr	r3, [pc, #108]	; (4002c8 <board_init+0xb0>)
  40025a:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  40025c:	4d1b      	ldr	r5, [pc, #108]	; (4002cc <board_init+0xb4>)
  40025e:	2040      	movs	r0, #64	; 0x40
  400260:	4629      	mov	r1, r5
  400262:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400264:	2041      	movs	r0, #65	; 0x41
  400266:	4629      	mov	r1, r5
  400268:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  40026a:	2042      	movs	r0, #66	; 0x42
  40026c:	4629      	mov	r1, r5
  40026e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  400270:	2043      	movs	r0, #67	; 0x43
  400272:	4629      	mov	r1, r5
  400274:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400276:	2044      	movs	r0, #68	; 0x44
  400278:	4629      	mov	r1, r5
  40027a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  40027c:	2045      	movs	r0, #69	; 0x45
  40027e:	4629      	mov	r1, r5
  400280:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400282:	2046      	movs	r0, #70	; 0x46
  400284:	4629      	mov	r1, r5
  400286:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  400288:	2047      	movs	r0, #71	; 0x47
  40028a:	4629      	mov	r1, r5
  40028c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  40028e:	204b      	movs	r0, #75	; 0x4b
  400290:	4629      	mov	r1, r5
  400292:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400294:	2048      	movs	r0, #72	; 0x48
  400296:	4629      	mov	r1, r5
  400298:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  40029a:	204f      	movs	r0, #79	; 0x4f
  40029c:	4629      	mov	r1, r5
  40029e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  4002a0:	2053      	movs	r0, #83	; 0x53
  4002a2:	4629      	mov	r1, r5
  4002a4:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  4002a6:	204d      	movs	r0, #77	; 0x4d
  4002a8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4002ac:	47a0      	blx	r4
  4002ae:	bd38      	pop	{r3, r4, r5, pc}
  4002b0:	400e1450 	.word	0x400e1450
  4002b4:	004010a9 	.word	0x004010a9
  4002b8:	00400d19 	.word	0x00400d19
  4002bc:	28000079 	.word	0x28000079
  4002c0:	28000059 	.word	0x28000059
  4002c4:	400e0e00 	.word	0x400e0e00
  4002c8:	00400e3d 	.word	0x00400e3d
  4002cc:	08000001 	.word	0x08000001

004002d0 <aat31xx_set_backlight>:
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  4002d0:	b470      	push	{r4, r5, r6}
  4002d2:	b083      	sub	sp, #12
	volatile uint32_t ul_delay;
	uint32_t i;

#ifdef CONF_BOARD_AAT3155
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
  4002d4:	f1c0 0011 	rsb	r0, r0, #17
#ifdef CONF_BOARD_AAT3193
	ul_level = AAT31XX_MAX_BACKLIGHT_LEVEL - ul_level + 1;
#endif

	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
  4002d8:	2810      	cmp	r0, #16
  4002da:	bf28      	it	cs
  4002dc:	2010      	movcs	r0, #16
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;
  4002de:	2800      	cmp	r0, #0
  4002e0:	bf08      	it	eq
  4002e2:	2001      	moveq	r0, #1
 * \param ul_level backlight level.
 *
 * \note pin BOARD_AAT31XX_SET_GPIO must be configured before calling aat31xx_set_backlight.
 */
void aat31xx_set_backlight(uint32_t ul_level)
{
  4002e4:	2100      	movs	r1, #0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4002e6:	4e10      	ldr	r6, [pc, #64]	; (400328 <aat31xx_set_backlight+0x58>)
  4002e8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);
		ul_delay = DELAY_PULSE;
  4002ec:	2418      	movs	r4, #24
  4002ee:	6375      	str	r5, [r6, #52]	; 0x34
  4002f0:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  4002f2:	9b01      	ldr	r3, [sp, #4]
  4002f4:	1e5a      	subs	r2, r3, #1
  4002f6:	9201      	str	r2, [sp, #4]
  4002f8:	2b00      	cmp	r3, #0
  4002fa:	d1fa      	bne.n	4002f2 <aat31xx_set_backlight+0x22>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4002fc:	6335      	str	r5, [r6, #48]	; 0x30
		}

		ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_HIGH);

		ul_delay = DELAY_PULSE;
  4002fe:	9401      	str	r4, [sp, #4]
		while (ul_delay--) {
  400300:	9b01      	ldr	r3, [sp, #4]
  400302:	1e5a      	subs	r2, r3, #1
  400304:	9201      	str	r2, [sp, #4]
  400306:	2b00      	cmp	r3, #0
  400308:	d1fa      	bne.n	400300 <aat31xx_set_backlight+0x30>
	/* Ensure valid level */
	ul_level = (ul_level > AAT31XX_MAX_BACKLIGHT_LEVEL) ? AAT31XX_MAX_BACKLIGHT_LEVEL : ul_level;
	ul_level = (ul_level < AAT31XX_MIN_BACKLIGHT_LEVEL) ? AAT31XX_MIN_BACKLIGHT_LEVEL : ul_level;

	/* Set new backlight level */
	for (i = 0; i < ul_level; i++) {
  40030a:	3101      	adds	r1, #1
  40030c:	4281      	cmp	r1, r0
  40030e:	d3ee      	bcc.n	4002ee <aat31xx_set_backlight+0x1e>
		ul_delay = DELAY_PULSE;
		while (ul_delay--) {
		}
	}

	ul_delay = DELAY_ENABLE;
  400310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  400314:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  400316:	9b01      	ldr	r3, [sp, #4]
  400318:	1e5a      	subs	r2, r3, #1
  40031a:	9201      	str	r2, [sp, #4]
  40031c:	2b00      	cmp	r3, #0
  40031e:	d1fa      	bne.n	400316 <aat31xx_set_backlight+0x46>
	}
}
  400320:	b003      	add	sp, #12
  400322:	bc70      	pop	{r4, r5, r6}
  400324:	4770      	bx	lr
  400326:	bf00      	nop
  400328:	400e1200 	.word	0x400e1200

0040032c <aat31xx_disable_backlight>:

/**
 * \brief Switch off backlight.
 */
void aat31xx_disable_backlight(void)
{
  40032c:	b082      	sub	sp, #8
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40032e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400332:	4b06      	ldr	r3, [pc, #24]	; (40034c <aat31xx_disable_backlight+0x20>)
  400334:	635a      	str	r2, [r3, #52]	; 0x34
	volatile uint32_t ul_delay;

	ioport_set_pin_level(BOARD_AAT31XX_SET_GPIO, IOPORT_PIN_LEVEL_LOW);

	ul_delay = DELAY_DISABLE;
  400336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40033a:	9301      	str	r3, [sp, #4]
	while (ul_delay--) {
  40033c:	9b01      	ldr	r3, [sp, #4]
  40033e:	1e5a      	subs	r2, r3, #1
  400340:	9201      	str	r2, [sp, #4]
  400342:	2b00      	cmp	r3, #0
  400344:	d1fa      	bne.n	40033c <aat31xx_disable_backlight+0x10>
	}
}
  400346:	b002      	add	sp, #8
  400348:	4770      	bx	lr
  40034a:	bf00      	nop
  40034c:	400e1200 	.word	0x400e1200

00400350 <ili93xx_write_ram_prepare>:
/**
 * \brief Prepare to write GRAM data for ili93xx.
 */
static void ili93xx_write_ram_prepare(void)
{
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400350:	4b0a      	ldr	r3, [pc, #40]	; (40037c <ili93xx_write_ram_prepare+0x2c>)
  400352:	781b      	ldrb	r3, [r3, #0]
  400354:	2b01      	cmp	r3, #1
  400356:	d106      	bne.n	400366 <ili93xx_write_ram_prepare+0x16>
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  400358:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40035c:	2200      	movs	r2, #0
  40035e:	701a      	strb	r2, [r3, #0]
  400360:	2222      	movs	r2, #34	; 0x22
  400362:	701a      	strb	r2, [r3, #0]
  400364:	4770      	bx	lr
		/** Write Data to GRAM (R22h) */
		LCD_IR(0);
		LCD_IR(ILI9325_GRAM_DATA_REG);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  400366:	2b02      	cmp	r3, #2
  400368:	d107      	bne.n	40037a <ili93xx_write_ram_prepare+0x2a>
  40036a:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40036e:	222c      	movs	r2, #44	; 0x2c
  400370:	701a      	strb	r2, [r3, #0]
  400372:	2200      	movs	r2, #0
  400374:	701a      	strb	r2, [r3, #0]
  400376:	223c      	movs	r2, #60	; 0x3c
  400378:	701a      	strb	r2, [r3, #0]
  40037a:	4770      	bx	lr
  40037c:	20000c28 	.word	0x20000c28

00400380 <ili93xx_write_ram>:
 *
 * \param ul_color 24-bits RGB color.
 */
static void ili93xx_write_ram(ili93xx_color_t ul_color)
{
	LCD_WD((ul_color >> 16) & 0xFF);
  400380:	f3c0 4207 	ubfx	r2, r0, #16, #8
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  400384:	4b03      	ldr	r3, [pc, #12]	; (400394 <ili93xx_write_ram+0x14>)
  400386:	701a      	strb	r2, [r3, #0]
	LCD_WD((ul_color >> 8) & 0xFF);
  400388:	f3c0 2207 	ubfx	r2, r0, #8, #8
  40038c:	701a      	strb	r2, [r3, #0]
	LCD_WD(ul_color & 0xFF);
  40038e:	b2c0      	uxtb	r0, r0
  400390:	7018      	strb	r0, [r3, #0]
  400392:	4770      	bx	lr
  400394:	61000002 	.word	0x61000002

00400398 <ili93xx_write_ram_buffer>:
 * \param p_ul_buf data buffer.
 * \param ul_size size in pixels.
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
  400398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40039c:	4607      	mov	r7, r0
  40039e:	4688      	mov	r8, r1
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  4003a0:	f031 0907 	bics.w	r9, r1, #7
  4003a4:	d018      	beq.n	4003d8 <ili93xx_write_ram_buffer+0x40>
  4003a6:	4604      	mov	r4, r0
  4003a8:	2600      	movs	r6, #0
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  4003aa:	4d12      	ldr	r5, [pc, #72]	; (4003f4 <ili93xx_write_ram_buffer+0x5c>)
  4003ac:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
  4003b0:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 1]);
  4003b2:	6860      	ldr	r0, [r4, #4]
  4003b4:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 2]);
  4003b6:	68a0      	ldr	r0, [r4, #8]
  4003b8:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 3]);
  4003ba:	68e0      	ldr	r0, [r4, #12]
  4003bc:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
  4003be:	6920      	ldr	r0, [r4, #16]
  4003c0:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
  4003c2:	6960      	ldr	r0, [r4, #20]
  4003c4:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
  4003c6:	69a0      	ldr	r0, [r4, #24]
  4003c8:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
  4003ca:	69e0      	ldr	r0, [r4, #28]
  4003cc:	47a8      	blx	r5
 */
static void ili93xx_write_ram_buffer(const ili93xx_color_t *p_ul_buf,
		uint32_t ul_size)
{
	uint32_t ul_addr;
	for (ul_addr = 0; ul_addr < (ul_size - ul_size % 8); ul_addr += 8) {
  4003ce:	3608      	adds	r6, #8
  4003d0:	3420      	adds	r4, #32
  4003d2:	454e      	cmp	r6, r9
  4003d4:	d3ea      	bcc.n	4003ac <ili93xx_write_ram_buffer+0x14>
  4003d6:	e000      	b.n	4003da <ili93xx_write_ram_buffer+0x42>
  4003d8:	2600      	movs	r6, #0
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
  4003da:	45b0      	cmp	r8, r6
  4003dc:	d908      	bls.n	4003f0 <ili93xx_write_ram_buffer+0x58>
  4003de:	eb07 0486 	add.w	r4, r7, r6, lsl #2
		ili93xx_write_ram(p_ul_buf[ul_addr]);
  4003e2:	4d04      	ldr	r5, [pc, #16]	; (4003f4 <ili93xx_write_ram_buffer+0x5c>)
  4003e4:	f854 0b04 	ldr.w	r0, [r4], #4
  4003e8:	47a8      	blx	r5
		ili93xx_write_ram(p_ul_buf[ul_addr + 4]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 5]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 6]);
		ili93xx_write_ram(p_ul_buf[ul_addr + 7]);
	}
	for (; ul_addr < ul_size; ul_addr++) {
  4003ea:	3601      	adds	r6, #1
  4003ec:	45b0      	cmp	r8, r6
  4003ee:	d8f9      	bhi.n	4003e4 <ili93xx_write_ram_buffer+0x4c>
  4003f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4003f4:	00400381 	.word	0x00400381

004003f8 <ili93xx_write_register_word>:
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  4003f8:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4003fc:	2200      	movs	r2, #0
  4003fe:	701a      	strb	r2, [r3, #0]
  400400:	7018      	strb	r0, [r3, #0]
 */
static void ili93xx_write_register_word(uint8_t uc_reg, uint16_t us_data)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	LCD_WD((us_data >> 8) & 0xFF);
  400402:	0a0a      	lsrs	r2, r1, #8
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  400404:	3302      	adds	r3, #2
  400406:	701a      	strb	r2, [r3, #0]
	LCD_WD(us_data & 0xFF);
  400408:	b2c9      	uxtb	r1, r1
  40040a:	7019      	strb	r1, [r3, #0]
  40040c:	4770      	bx	lr
  40040e:	bf00      	nop

00400410 <ili93xx_write_register>:
 * \param uc_reg register address.
 * \param us_data data to be written.
 */
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
  400410:	b410      	push	{r4}
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  400412:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  400416:	2400      	movs	r4, #0
  400418:	701c      	strb	r4, [r3, #0]
  40041a:	7018      	strb	r0, [r3, #0]
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  40041c:	b14a      	cbz	r2, 400432 <ili93xx_write_register+0x22>
  40041e:	1e4b      	subs	r3, r1, #1
  400420:	1e50      	subs	r0, r2, #1
  400422:	fa51 f180 	uxtab	r1, r1, r0
}

static inline void LCD_WD(uint8_t lcd_data)
{
	*((volatile uint8_t *)((BOARD_ILI93XX_ADDR) | (BOARD_ILI93XX_RS))) =
  400426:	4804      	ldr	r0, [pc, #16]	; (400438 <ili93xx_write_register+0x28>)
		LCD_WD(p_data[i]);
  400428:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  40042c:	7002      	strb	r2, [r0, #0]
static void ili93xx_write_register(uint8_t uc_reg, uint8_t *p_data,
		uint8_t uc_datacnt)
{
	LCD_IR(0);
	LCD_IR(uc_reg);
	for (uint8_t i = 0; i < uc_datacnt; i++) {
  40042e:	428b      	cmp	r3, r1
  400430:	d1fa      	bne.n	400428 <ili93xx_write_register+0x18>
		LCD_WD(p_data[i]);
	}
}
  400432:	f85d 4b04 	ldr.w	r4, [sp], #4
  400436:	4770      	bx	lr
  400438:	61000002 	.word	0x61000002

0040043c <ili93xx_delay>:

/**
 * \brief Delay function.
 */
static void ili93xx_delay(uint32_t ul_ms)
{
  40043c:	b082      	sub	sp, #8
	volatile uint32_t i;

	for (i = 0; i < ul_ms; i++) {
  40043e:	2300      	movs	r3, #0
  400440:	9301      	str	r3, [sp, #4]
  400442:	9b01      	ldr	r3, [sp, #4]
  400444:	4298      	cmp	r0, r3
  400446:	d911      	bls.n	40046c <ili93xx_delay+0x30>
		for (i = 0; i < 100000; i++) {
  400448:	2100      	movs	r1, #0
  40044a:	4a09      	ldr	r2, [pc, #36]	; (400470 <ili93xx_delay+0x34>)
  40044c:	9101      	str	r1, [sp, #4]
  40044e:	9b01      	ldr	r3, [sp, #4]
  400450:	4293      	cmp	r3, r2
  400452:	d805      	bhi.n	400460 <ili93xx_delay+0x24>
  400454:	9b01      	ldr	r3, [sp, #4]
  400456:	3301      	adds	r3, #1
  400458:	9301      	str	r3, [sp, #4]
  40045a:	9b01      	ldr	r3, [sp, #4]
  40045c:	4293      	cmp	r3, r2
  40045e:	d9f9      	bls.n	400454 <ili93xx_delay+0x18>
 */
static void ili93xx_delay(uint32_t ul_ms)
{
	volatile uint32_t i;

	for (i = 0; i < ul_ms; i++) {
  400460:	9b01      	ldr	r3, [sp, #4]
  400462:	3301      	adds	r3, #1
  400464:	9301      	str	r3, [sp, #4]
  400466:	9b01      	ldr	r3, [sp, #4]
  400468:	4283      	cmp	r3, r0
  40046a:	d3ef      	bcc.n	40044c <ili93xx_delay+0x10>
		for (i = 0; i < 100000; i++) {
		}
	}
}
  40046c:	b002      	add	sp, #8
  40046e:	4770      	bx	lr
  400470:	0001869f 	.word	0x0001869f

00400474 <ili93xx_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili93xx_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400474:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= g_ul_lcd_x_length) {
  400476:	4c15      	ldr	r4, [pc, #84]	; (4004cc <ili93xx_check_box_coordinates+0x58>)
  400478:	6824      	ldr	r4, [r4, #0]
  40047a:	6805      	ldr	r5, [r0, #0]
  40047c:	42a5      	cmp	r5, r4
		*p_ul_x1 = g_ul_lcd_x_length - 1;
  40047e:	bf24      	itt	cs
  400480:	f104 35ff 	addcs.w	r5, r4, #4294967295
  400484:	6005      	strcs	r5, [r0, #0]
	}

	if (*p_ul_x2 >= g_ul_lcd_x_length) {
  400486:	6815      	ldr	r5, [r2, #0]
  400488:	42ac      	cmp	r4, r5
		*p_ul_x2 = g_ul_lcd_x_length - 1;
  40048a:	bf9c      	itt	ls
  40048c:	f104 34ff 	addls.w	r4, r4, #4294967295
  400490:	6014      	strls	r4, [r2, #0]
	}

	if (*p_ul_y1 >= g_ul_lcd_y_length) {
  400492:	4c0f      	ldr	r4, [pc, #60]	; (4004d0 <ili93xx_check_box_coordinates+0x5c>)
  400494:	6824      	ldr	r4, [r4, #0]
  400496:	680d      	ldr	r5, [r1, #0]
  400498:	42a5      	cmp	r5, r4
		*p_ul_y1 = g_ul_lcd_y_length - 1;
  40049a:	bf24      	itt	cs
  40049c:	f104 35ff 	addcs.w	r5, r4, #4294967295
  4004a0:	600d      	strcs	r5, [r1, #0]
	}

	if (*p_ul_y2 >= g_ul_lcd_y_length) {
  4004a2:	681d      	ldr	r5, [r3, #0]
  4004a4:	42ac      	cmp	r4, r5
		*p_ul_y2 = g_ul_lcd_y_length - 1;
  4004a6:	bf9c      	itt	ls
  4004a8:	f104 34ff 	addls.w	r4, r4, #4294967295
  4004ac:	601c      	strls	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  4004ae:	6804      	ldr	r4, [r0, #0]
  4004b0:	6815      	ldr	r5, [r2, #0]
  4004b2:	42ac      	cmp	r4, r5
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  4004b4:	bf84      	itt	hi
  4004b6:	6005      	strhi	r5, [r0, #0]
		*p_ul_x2 = dw;
  4004b8:	6014      	strhi	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  4004ba:	680a      	ldr	r2, [r1, #0]
  4004bc:	6818      	ldr	r0, [r3, #0]
  4004be:	4282      	cmp	r2, r0
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  4004c0:	bf84      	itt	hi
  4004c2:	6008      	strhi	r0, [r1, #0]
		*p_ul_y2 = dw;
  4004c4:	601a      	strhi	r2, [r3, #0]
	}
}
  4004c6:	bc30      	pop	{r4, r5}
  4004c8:	4770      	bx	lr
  4004ca:	bf00      	nop
  4004cc:	20000000 	.word	0x20000000
  4004d0:	20000004 	.word	0x20000004

004004d4 <ili93xx_device_type_identify>:
 *        ILI9341 device ID locates in Read ID4 (RD3h) register.
 *
 * \return 0 if secceed in identifying device; otherwise fails.
 */
uint8_t ili93xx_device_type_identify(void)
{
  4004d4:	b082      	sub	sp, #8
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  4004d6:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  4004da:	2200      	movs	r2, #0
  4004dc:	701a      	strb	r2, [r3, #0]
  4004de:	22d3      	movs	r2, #211	; 0xd3
  4004e0:	701a      	strb	r2, [r3, #0]
																lcd_data;
}

static inline uint8_t LCD_RD(void)
{
	return *((volatile uint8_t *)((BOARD_ILI93XX_ADDR) |(BOARD_ILI93XX_RS)));
  4004e2:	3302      	adds	r3, #2
  4004e4:	781a      	ldrb	r2, [r3, #0]
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
		p_data[i] = LCD_RD();
  4004e6:	f88d 2000 	strb.w	r2, [sp]
  4004ea:	781a      	ldrb	r2, [r3, #0]
  4004ec:	f88d 2001 	strb.w	r2, [sp, #1]
  4004f0:	781a      	ldrb	r2, [r3, #0]
  4004f2:	f88d 2002 	strb.w	r2, [sp, #2]
  4004f6:	781b      	ldrb	r3, [r3, #0]
  4004f8:	b2db      	uxtb	r3, r3
  4004fa:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t paratable[6];
	uint16_t chipid;

	/** Read ID4 (RD4h) register to get device code for ILI9341*/
	ili93xx_read_register(ILI9341_CMD_READ_ID4, paratable, 4);
	chipid = ((uint16_t)paratable[2] << 8) + paratable[3];
  4004fe:	b2d2      	uxtb	r2, r2
  400500:	eb03 2302 	add.w	r3, r3, r2, lsl #8

	if (chipid == ILI9341_DEVICE_CODE) {
  400504:	b29b      	uxth	r3, r3
  400506:	f249 3241 	movw	r2, #37697	; 0x9341
  40050a:	4293      	cmp	r3, r2
  40050c:	d104      	bne.n	400518 <ili93xx_device_type_identify+0x44>
		g_uc_device_type = DEVICE_TYPE_ILI9341;
  40050e:	2202      	movs	r2, #2
  400510:	4b0e      	ldr	r3, [pc, #56]	; (40054c <ili93xx_device_type_identify+0x78>)
  400512:	701a      	strb	r2, [r3, #0]
		return 0;
  400514:	2000      	movs	r0, #0
  400516:	e017      	b.n	400548 <ili93xx_device_type_identify+0x74>
/** Define EBI access for ILI93xx 8-bit System Interface.*/
#if defined(BOARD_ILI93XX_ADDR) && defined (BOARD_ILI93XX_RS)
static inline void LCD_IR(uint8_t lcd_index)
{
	/** ILI93XX index register address */
	*((volatile uint8_t *)(BOARD_ILI93XX_ADDR)) = lcd_index;
  400518:	f04f 43c2 	mov.w	r3, #1627389952	; 0x61000000
  40051c:	2200      	movs	r2, #0
  40051e:	701a      	strb	r2, [r3, #0]
  400520:	701a      	strb	r2, [r3, #0]
																lcd_data;
}

static inline uint8_t LCD_RD(void)
{
	return *((volatile uint8_t *)((BOARD_ILI93XX_ADDR) |(BOARD_ILI93XX_RS)));
  400522:	3302      	adds	r3, #2
  400524:	781a      	ldrb	r2, [r3, #0]
{
	LCD_IR(0);
	LCD_IR(uc_reg);

	for (uint8_t i = 0; i < uc_datacnt; i++) {
		p_data[i] = LCD_RD();
  400526:	f88d 2000 	strb.w	r2, [sp]
  40052a:	781b      	ldrb	r3, [r3, #0]
		return 0;
	}

	/** Driver Code Read (R00h) for ILI9325*/
	ili93xx_read_register(ILI9325_DEVICE_CODE_REG, paratable, 2);
	chipid = ((uint16_t)paratable[0] << 8) + paratable[1];
  40052c:	b2d2      	uxtb	r2, r2
  40052e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	if (chipid == ILI9325_DEVICE_CODE) {
  400532:	b29b      	uxth	r3, r3
  400534:	f249 3225 	movw	r2, #37669	; 0x9325
  400538:	4293      	cmp	r3, r2
  40053a:	d104      	bne.n	400546 <ili93xx_device_type_identify+0x72>
		g_uc_device_type = DEVICE_TYPE_ILI9325;
  40053c:	2201      	movs	r2, #1
  40053e:	4b03      	ldr	r3, [pc, #12]	; (40054c <ili93xx_device_type_identify+0x78>)
  400540:	701a      	strb	r2, [r3, #0]
		return 0;
  400542:	2000      	movs	r0, #0
  400544:	e000      	b.n	400548 <ili93xx_device_type_identify+0x74>
	}

	return 1;
  400546:	2001      	movs	r0, #1
}
  400548:	b002      	add	sp, #8
  40054a:	4770      	bx	lr
  40054c:	20000c28 	.word	0x20000c28

00400550 <ili93xx_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili93xx_display_on(void)
{
  400550:	b508      	push	{r3, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400552:	4b09      	ldr	r3, [pc, #36]	; (400578 <ili93xx_display_on+0x28>)
  400554:	781b      	ldrb	r3, [r3, #0]
  400556:	2b01      	cmp	r3, #1
  400558:	d105      	bne.n	400566 <ili93xx_display_on+0x16>
		ili93xx_write_register_word(ILI9325_DISP_CTRL1,
  40055a:	2007      	movs	r0, #7
  40055c:	f240 1133 	movw	r1, #307	; 0x133
  400560:	4b06      	ldr	r3, [pc, #24]	; (40057c <ili93xx_display_on+0x2c>)
  400562:	4798      	blx	r3
  400564:	bd08      	pop	{r3, pc}
				ILI9325_DISP_CTRL1_BASEE |
				ILI9325_DISP_CTRL1_GON |
				ILI9325_DISP_CTRL1_DTE |
				ILI9325_DISP_CTRL1_D(0x03));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  400566:	2b02      	cmp	r3, #2
  400568:	d104      	bne.n	400574 <ili93xx_display_on+0x24>
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, NULL, 0);
  40056a:	2029      	movs	r0, #41	; 0x29
  40056c:	2100      	movs	r1, #0
  40056e:	460a      	mov	r2, r1
  400570:	4b03      	ldr	r3, [pc, #12]	; (400580 <ili93xx_display_on+0x30>)
  400572:	4798      	blx	r3
  400574:	bd08      	pop	{r3, pc}
  400576:	bf00      	nop
  400578:	20000c28 	.word	0x20000c28
  40057c:	004003f9 	.word	0x004003f9
  400580:	00400411 	.word	0x00400411

00400584 <ili93xx_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
  400584:	4a04      	ldr	r2, [pc, #16]	; (400598 <ili93xx_set_foreground_color+0x14>)
  400586:	1f13      	subs	r3, r2, #4
  400588:	f502 726f 	add.w	r2, r2, #956	; 0x3bc
	uint32_t i;

	/** Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
		g_ul_pixel_cache[i] = ul_color;
  40058c:	f843 0f04 	str.w	r0, [r3, #4]!
void ili93xx_set_foreground_color(ili93xx_color_t ul_color)
{
	uint32_t i;

	/** Fill the cache with selected color */
	for (i = 0; i < LCD_DATA_CACHE_SIZE; ++i) {
  400590:	4293      	cmp	r3, r2
  400592:	d1fb      	bne.n	40058c <ili93xx_set_foreground_color+0x8>
		g_ul_pixel_cache[i] = ul_color;
	}
}
  400594:	4770      	bx	lr
  400596:	bf00      	nop
  400598:	20000868 	.word	0x20000868

0040059c <ili93xx_set_window>:
 * \param ul_width The width of the window.
 * \param ul_height The height of the window.
 */
void ili93xx_set_window(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height)
{
  40059c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005a0:	b082      	sub	sp, #8
  4005a2:	460c      	mov	r4, r1
  4005a4:	4617      	mov	r7, r2
  4005a6:	461e      	mov	r6, r3
	Assert(ul_x <= (g_ul_lcd_x_length - 1));
	Assert(ul_y <= (g_ul_lcd_y_length - 1));
	Assert(ul_width <= (g_ul_lcd_x_length - ul_x));
	Assert(ul_height <= (g_ul_lcd_y_length - ul_y));
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  4005a8:	4b22      	ldr	r3, [pc, #136]	; (400634 <ili93xx_set_window+0x98>)
  4005aa:	781b      	ldrb	r3, [r3, #0]
  4005ac:	2b01      	cmp	r3, #1
  4005ae:	d114      	bne.n	4005da <ili93xx_set_window+0x3e>
		/** Set Horizontal Address Start Position */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_START,
  4005b0:	b285      	uxth	r5, r0
  4005b2:	2050      	movs	r0, #80	; 0x50
  4005b4:	4629      	mov	r1, r5
  4005b6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 40063c <ili93xx_set_window+0xa0>
  4005ba:	47c0      	blx	r8
  4005bc:	1e79      	subs	r1, r7, #1
				(uint16_t)ul_x);

		/** Set Horizontal Address End Position */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_ADDR_END,
  4005be:	4429      	add	r1, r5
  4005c0:	2051      	movs	r0, #81	; 0x51
  4005c2:	b289      	uxth	r1, r1
  4005c4:	47c0      	blx	r8
				(uint16_t)(ul_x + ul_width - 1));

		/** Set Vertical Address Start Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_START,
  4005c6:	b2a4      	uxth	r4, r4
  4005c8:	2052      	movs	r0, #82	; 0x52
  4005ca:	4621      	mov	r1, r4
  4005cc:	47c0      	blx	r8
  4005ce:	1e71      	subs	r1, r6, #1
				(uint16_t)ul_y);

		/** Set Vertical Address End Position */
		ili93xx_write_register_word(ILI9325_VERTICAL_ADDR_END,
  4005d0:	4421      	add	r1, r4
  4005d2:	2053      	movs	r0, #83	; 0x53
  4005d4:	b289      	uxth	r1, r1
  4005d6:	47c0      	blx	r8
  4005d8:	e028      	b.n	40062c <ili93xx_set_window+0x90>
				(uint16_t)(ul_y + ul_height - 1));
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  4005da:	2b02      	cmp	r3, #2
  4005dc:	d126      	bne.n	40062c <ili93xx_set_window+0x90>
		uint8_t paratable[4];

		/** Set Column Address Position */
		paratable[0] = (ul_x >> 8) & 0xFF;
  4005de:	0a03      	lsrs	r3, r0, #8
  4005e0:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_x & 0xFF;
  4005e4:	b2c3      	uxtb	r3, r0
  4005e6:	f88d 3005 	strb.w	r3, [sp, #5]
  4005ea:	3a01      	subs	r2, #1
		paratable[2] = ((ul_x + ul_width - 1) >> 8) & 0xFF;
  4005ec:	4410      	add	r0, r2
  4005ee:	0a00      	lsrs	r0, r0, #8
  4005f0:	f88d 0006 	strb.w	r0, [sp, #6]
  4005f4:	4617      	mov	r7, r2
		paratable[3] = (ul_x + ul_width - 1) & 0xFF;
  4005f6:	441f      	add	r7, r3
  4005f8:	f88d 7007 	strb.w	r7, [sp, #7]
		ili93xx_write_register(ILI9341_CMD_COLUMN_ADDRESS_SET,
  4005fc:	202a      	movs	r0, #42	; 0x2a
  4005fe:	a901      	add	r1, sp, #4
  400600:	2204      	movs	r2, #4
  400602:	4d0d      	ldr	r5, [pc, #52]	; (400638 <ili93xx_set_window+0x9c>)
  400604:	47a8      	blx	r5
				paratable, 4);

		/** Set Page Address Position */
		paratable[0] = (ul_y >> 8) & 0xFF;
  400606:	0a23      	lsrs	r3, r4, #8
  400608:	f88d 3004 	strb.w	r3, [sp, #4]
		paratable[1] = ul_y & 0xFF;
  40060c:	b2e3      	uxtb	r3, r4
  40060e:	f88d 3005 	strb.w	r3, [sp, #5]
  400612:	1e72      	subs	r2, r6, #1
		paratable[2] = ((ul_y + ul_height - 1) >> 8) & 0xFF;
  400614:	4414      	add	r4, r2
  400616:	0a24      	lsrs	r4, r4, #8
  400618:	f88d 4006 	strb.w	r4, [sp, #6]
  40061c:	4616      	mov	r6, r2
		paratable[3] = (ul_y + ul_height - 1) & 0xFF;
  40061e:	441e      	add	r6, r3
  400620:	f88d 6007 	strb.w	r6, [sp, #7]
		ili93xx_write_register(ILI9341_CMD_PAGE_ADDRESS_SET,
  400624:	202b      	movs	r0, #43	; 0x2b
  400626:	a901      	add	r1, sp, #4
  400628:	2204      	movs	r2, #4
  40062a:	47a8      	blx	r5
				       paratable, 4);
	}
}
  40062c:	b002      	add	sp, #8
  40062e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400632:	bf00      	nop
  400634:	20000c28 	.word	0x20000c28
  400638:	00400411 	.word	0x00400411
  40063c:	004003f9 	.word	0x004003f9

00400640 <ili93xx_set_cursor_position>:
 *
 * \param us_x X coordinate of upper-left corner on LCD.
 * \param us_y Y coordinate of upper-left corner on LCD.
 */
void ili93xx_set_cursor_position(uint16_t us_x, uint16_t us_y)
{
  400640:	b538      	push	{r3, r4, r5, lr}
	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400642:	4b06      	ldr	r3, [pc, #24]	; (40065c <ili93xx_set_cursor_position+0x1c>)
  400644:	781b      	ldrb	r3, [r3, #0]
  400646:	2b01      	cmp	r3, #1
  400648:	d107      	bne.n	40065a <ili93xx_set_cursor_position+0x1a>
  40064a:	460c      	mov	r4, r1
  40064c:	4601      	mov	r1, r0
		/** GRAM Horizontal/Vertical Address Set (R20h, R21h) */
		ili93xx_write_register_word(ILI9325_HORIZONTAL_GRAM_ADDR_SET, us_x);
  40064e:	2020      	movs	r0, #32
  400650:	4d03      	ldr	r5, [pc, #12]	; (400660 <ili93xx_set_cursor_position+0x20>)
  400652:	47a8      	blx	r5
		ili93xx_write_register_word(ILI9325_VERTICAL_GRAM_ADDR_SET, us_y);
  400654:	2021      	movs	r0, #33	; 0x21
  400656:	4621      	mov	r1, r4
  400658:	47a8      	blx	r5
  40065a:	bd38      	pop	{r3, r4, r5, pc}
  40065c:	20000c28 	.word	0x20000c28
  400660:	004003f9 	.word	0x004003f9

00400664 <ili93xx_init>:
 * \param p_opt pointer to ILI93xx option structure.
 *
 * \return 0 if initialization succeeds, otherwise fails.
 */
uint32_t ili93xx_init(struct ili93xx_opt_t *p_opt)
{
  400664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400668:	b083      	sub	sp, #12
  40066a:	4606      	mov	r6, r0
	uint8_t paratable[6];

	/** Identify the LCD driver device*/
	if (ili93xx_device_type_identify() != 0) {
  40066c:	4bac      	ldr	r3, [pc, #688]	; (400920 <ili93xx_init+0x2bc>)
  40066e:	4798      	blx	r3
  400670:	2800      	cmp	r0, #0
  400672:	f040 814f 	bne.w	400914 <ili93xx_init+0x2b0>
		return 1;
	}

	g_ul_lcd_x_length = ILI93XX_LCD_WIDTH;
  400676:	22f0      	movs	r2, #240	; 0xf0
  400678:	4baa      	ldr	r3, [pc, #680]	; (400924 <ili93xx_init+0x2c0>)
  40067a:	601a      	str	r2, [r3, #0]
	g_ul_lcd_y_length = ILI93XX_LCD_HEIGHT;
  40067c:	f44f 72a0 	mov.w	r2, #320	; 0x140
  400680:	4ba9      	ldr	r3, [pc, #676]	; (400928 <ili93xx_init+0x2c4>)
  400682:	601a      	str	r2, [r3, #0]

	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  400684:	4ba9      	ldr	r3, [pc, #676]	; (40092c <ili93xx_init+0x2c8>)
  400686:	781b      	ldrb	r3, [r3, #0]
  400688:	2b01      	cmp	r3, #1
  40068a:	f040 80b1 	bne.w	4007f0 <ili93xx_init+0x18c>
		/** Turn off LCD */
		ili93xx_write_register_word(ILI9325_DISP_CTRL1, ILI9325_DISP_CTRL1_GON |
  40068e:	2007      	movs	r0, #7
  400690:	2133      	movs	r1, #51	; 0x33
  400692:	4ca7      	ldr	r4, [pc, #668]	; (400930 <ili93xx_init+0x2cc>)
  400694:	47a0      	blx	r4
				ILI9325_DISP_CTRL1_DTE | ILI9325_DISP_CTRL1_D(0x03));

		/** Start initial sequence */
		/** Disable sleep and standby mode*/
		ili93xx_write_register_word(ILI9325_POWER_CTRL1, 0x0000);
  400696:	2010      	movs	r0, #16
  400698:	2100      	movs	r1, #0
  40069a:	47a0      	blx	r4
		/** Start internal OSC */
		ili93xx_write_register_word(ILI9325_START_OSC_CTRL,
  40069c:	2000      	movs	r0, #0
  40069e:	2101      	movs	r1, #1
  4006a0:	47a0      	blx	r4
				ILI9325_START_OSC_CTRL_EN);
		/** Set SS bit and direction output from S720 to S1 */
		ili93xx_write_register_word(ILI9325_DRIVER_OUTPUT_CTRL1,
  4006a2:	2001      	movs	r0, #1
  4006a4:	f44f 7180 	mov.w	r1, #256	; 0x100
  4006a8:	47a0      	blx	r4
				ILI9325_DRIVER_OUTPUT_CTRL1_SS);
		/** Set 1 line inversion */
		ili93xx_write_register_word(ILI9325_LCD_DRIVING_CTRL,
  4006aa:	2002      	movs	r0, #2
  4006ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
  4006b0:	47a0      	blx	r4
				ILI9325_LCD_DRIVING_CTRL_BIT10 | ILI9325_LCD_DRIVING_CTRL_EOR
				| ILI9325_LCD_DRIVING_CTRL_BC0);
		/** Disable resizing feature */
		ili93xx_write_register_word(ILI9325_RESIZE_CTRL, 0x0000);
  4006b2:	2004      	movs	r0, #4
  4006b4:	2100      	movs	r1, #0
  4006b6:	47a0      	blx	r4
		/** Set the back porch and front porch */
		ili93xx_write_register_word(ILI9325_DISP_CTRL2,
  4006b8:	2008      	movs	r0, #8
  4006ba:	f240 2107 	movw	r1, #519	; 0x207
  4006be:	47a0      	blx	r4
				ILI9325_DISP_CTRL2_BP(
				0x07) | ILI9325_DISP_CTRL2_FP(0x02));
		/** Set non-display area refresh cycle ISC[3:0] */
		ili93xx_write_register_word(ILI9325_DISP_CTRL3, 0x0000);
  4006c0:	2009      	movs	r0, #9
  4006c2:	2100      	movs	r1, #0
  4006c4:	47a0      	blx	r4
		/** Disable FMARK function */
		ili93xx_write_register_word(ILI9325_DISP_CTRL4, 0x0000);
  4006c6:	200a      	movs	r0, #10
  4006c8:	2100      	movs	r1, #0
  4006ca:	47a0      	blx	r4
		/** 18-bit RGB interface and writing display data by system
		 *interface */
		ili93xx_write_register_word(ILI9325_RGB_DISP_INTERFACE_CTRL1,
  4006cc:	200c      	movs	r0, #12
  4006ce:	2100      	movs	r1, #0
  4006d0:	47a0      	blx	r4
				0x0000);
		/** Set the output position of frame cycle */
		ili93xx_write_register_word(ILI9325_FRAME_MAKER_POS, 0x0000);
  4006d2:	200d      	movs	r0, #13
  4006d4:	2100      	movs	r1, #0
  4006d6:	47a0      	blx	r4
		/** RGB interface polarity */
		ili93xx_write_register_word(ILI9325_RGB_DISP_INTERFACE_CTRL2,
  4006d8:	200f      	movs	r0, #15
  4006da:	2100      	movs	r1, #0
  4006dc:	47a0      	blx	r4
				0x0000);

		/** Power on sequence */
		/** Disable sleep and standby mode */
		ili93xx_write_register_word(ILI9325_POWER_CTRL1, 0x0000);
  4006de:	2010      	movs	r0, #16
  4006e0:	2100      	movs	r1, #0
  4006e2:	47a0      	blx	r4

		/**
		 * Selects the operating frequency of the step-up circuit 1,2
		 * and Sets the ratio factor of Vci.
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL2, 0x0000);
  4006e4:	2011      	movs	r0, #17
  4006e6:	2100      	movs	r1, #0
  4006e8:	47a0      	blx	r4
		/** Set VREG1OUT voltage */
		ili93xx_write_register_word(ILI9325_POWER_CTRL3, 0x0000);
  4006ea:	2012      	movs	r0, #18
  4006ec:	2100      	movs	r1, #0
  4006ee:	47a0      	blx	r4
		/** Set VCOM amplitude */
		ili93xx_write_register_word(ILI9325_POWER_CTRL4, 0x0000);
  4006f0:	2013      	movs	r0, #19
  4006f2:	2100      	movs	r1, #0
  4006f4:	47a0      	blx	r4
		ili93xx_delay(200);
  4006f6:	20c8      	movs	r0, #200	; 0xc8
  4006f8:	4d8e      	ldr	r5, [pc, #568]	; (400934 <ili93xx_init+0x2d0>)
  4006fa:	47a8      	blx	r5

		/**
		 * Adjusts the constant current and Sets the factor used
		 * in the step-up circuits.
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL1,
  4006fc:	2010      	movs	r0, #16
  4006fe:	f241 2190 	movw	r1, #4752	; 0x1290
  400702:	47a0      	blx	r4

		/**
		 * Select the operating frequency of the step-up circuit 1,2 and
		 * Sets the ratio factor of Vci
		 */
		ili93xx_write_register_word(ILI9325_POWER_CTRL2,
  400704:	2011      	movs	r0, #17
  400706:	f240 2127 	movw	r1, #551	; 0x227
  40070a:	47a0      	blx	r4
				ILI9325_POWER_CTRL2_DC1(0x02) |
				ILI9325_POWER_CTRL2_DC0(0x02) | ILI9325_POWER_CTRL2_VC(0x07));
		ili93xx_delay(50);
  40070c:	2032      	movs	r0, #50	; 0x32
  40070e:	47a8      	blx	r5
		/** Internal reference voltage= Vci */
		ili93xx_write_register_word(ILI9325_POWER_CTRL3,
  400710:	2012      	movs	r0, #18
  400712:	211b      	movs	r1, #27
  400714:	47a0      	blx	r4
				ILI9325_POWER_CTRL3_PON | ILI9325_POWER_CTRL3_VRH(0x0B));
		ili93xx_delay(50);
  400716:	2032      	movs	r0, #50	; 0x32
  400718:	47a8      	blx	r5
		/** Set VDV[4:0] for VCOM amplitude */
		ili93xx_write_register_word(ILI9325_POWER_CTRL4,
  40071a:	2013      	movs	r0, #19
  40071c:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  400720:	47a0      	blx	r4
				ILI9325_POWER_CTRL4_VDV(0x11));
		/** Set VCM[5:0] for VCOMH */
		ili93xx_write_register_word(ILI9325_POWER_CTRL7,
  400722:	2029      	movs	r0, #41	; 0x29
  400724:	2119      	movs	r1, #25
  400726:	47a0      	blx	r4
				ILI9325_POWER_CTRL7_VCM(0x19));
		/** Set Frame Rate */
		ili93xx_write_register_word(ILI9325_FRAME_RATE_AND_COLOR_CTRL,
  400728:	202b      	movs	r0, #43	; 0x2b
  40072a:	210d      	movs	r1, #13
  40072c:	47a0      	blx	r4
				ILI9325_FRAME_RATE_AND_COLOR_CTRL_FRS(0x0D));
		ili93xx_delay(50);
  40072e:	2032      	movs	r0, #50	; 0x32
  400730:	47a8      	blx	r5

		/** Adjust the Gamma Curve */
		ili93xx_write_register_word(ILI9325_GAMMA_CTL1, 0x0000);
  400732:	2030      	movs	r0, #48	; 0x30
  400734:	2100      	movs	r1, #0
  400736:	47a0      	blx	r4
		ili93xx_write_register_word(ILI9325_GAMMA_CTL2,
  400738:	2031      	movs	r0, #49	; 0x31
  40073a:	f44f 7101 	mov.w	r1, #516	; 0x204
  40073e:	47a0      	blx	r4
				ILI9325_GAMMA_CTL2_KP3(0x02) |
				ILI9325_GAMMA_CTL2_KP2(0x04));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL3,
  400740:	2032      	movs	r0, #50	; 0x32
  400742:	f44f 7100 	mov.w	r1, #512	; 0x200
  400746:	47a0      	blx	r4
				ILI9325_GAMMA_CTL3_KP5(0x02) |
				ILI9325_GAMMA_CTL3_KP4(0x00));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL4,
  400748:	2035      	movs	r0, #53	; 0x35
  40074a:	2107      	movs	r1, #7
  40074c:	47a0      	blx	r4
				ILI9325_GAMMA_CTL4_RP1(0x00) |
				ILI9325_GAMMA_CTL4_RP0(0x07));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL5,
  40074e:	2036      	movs	r0, #54	; 0x36
  400750:	f241 4104 	movw	r1, #5124	; 0x1404
  400754:	47a0      	blx	r4
				ILI9325_GAMMA_CTL5_VRP1(0x14) |
				ILI9325_GAMMA_CTL5_VRP0(0x04));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL6,
  400756:	2037      	movs	r0, #55	; 0x37
  400758:	f240 7105 	movw	r1, #1797	; 0x705
  40075c:	47a0      	blx	r4
				ILI9325_GAMMA_CTL6_KN1(0x07) |
				ILI9325_GAMMA_CTL6_KN0(0x05));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL7,
  40075e:	2038      	movs	r0, #56	; 0x38
  400760:	f240 3105 	movw	r1, #773	; 0x305
  400764:	47a0      	blx	r4
				ILI9325_GAMMA_CTL7_KN3(0x03) |
				ILI9325_GAMMA_CTL7_KN2(0x05));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL8,
  400766:	2039      	movs	r0, #57	; 0x39
  400768:	f240 7107 	movw	r1, #1799	; 0x707
  40076c:	47a0      	blx	r4
				ILI9325_GAMMA_CTL8_KN5(0x07) |
				ILI9325_GAMMA_CTL8_KN4(0x07));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL9,
  40076e:	203c      	movs	r0, #60	; 0x3c
  400770:	f240 7101 	movw	r1, #1793	; 0x701
  400774:	47a0      	blx	r4
				ILI9325_GAMMA_CTL9_RN1(0x07) |
				ILI9325_GAMMA_CTL9_RN0(0x01));
		ili93xx_write_register_word(ILI9325_GAMMA_CTL10,
  400776:	203d      	movs	r0, #61	; 0x3d
  400778:	210e      	movs	r1, #14
  40077a:	47a0      	blx	r4
		 * DFM Set the mode of transferring data to the internal RAM
		 * when TRI = 1.
		 * I/D[1:0] = 11 Horizontal : increment Vertical : increment,
		 * AM=0:Horizontal
		 */
		ili93xx_write_register_word(ILI9325_ENTRY_MODE,
  40077c:	2003      	movs	r0, #3
  40077e:	f24d 0110 	movw	r1, #53264	; 0xd010
  400782:	47a0      	blx	r4
				ILI9325_ENTRY_MODE_ID(0x01) | ILI9325_ENTRY_MODE_BGR);
		/**
		 * Sets the number of lines to drive the LCD at an interval of 8
		 * lines. The scan direction is from G320 to G1
		 */
		ili93xx_write_register_word(ILI9325_DRIVER_OUTPUT_CTRL2,
  400784:	2060      	movs	r0, #96	; 0x60
  400786:	f44f 4127 	mov.w	r1, #42752	; 0xa700
  40078a:	47a0      	blx	r4
				ILI9325_DRIVER_OUTPUT_CTRL2_GS |
				ILI9325_DRIVER_OUTPUT_CTRL2_NL(0x27));

		/** Vertical Scrolling */
		/** Disable scrolling and enable the grayscale inversion */
		ili93xx_write_register_word(ILI9325_BASE_IMG_DISP_CTRL,
  40078c:	2061      	movs	r0, #97	; 0x61
  40078e:	2101      	movs	r1, #1
  400790:	47a0      	blx	r4
				ILI9325_BASE_IMG_DISP_CTRL_REV);
		ili93xx_write_register_word(ILI9325_VERTICAL_SCROLL_CTRL,
  400792:	206a      	movs	r0, #106	; 0x6a
  400794:	2100      	movs	r1, #0
  400796:	47a0      	blx	r4
				0x0000);

		/** Disable Partial Display */
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG1_DISP_POS,
  400798:	2080      	movs	r0, #128	; 0x80
  40079a:	2100      	movs	r1, #0
  40079c:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(
  40079e:	2081      	movs	r0, #129	; 0x81
  4007a0:	2100      	movs	r1, #0
  4007a2:	47a0      	blx	r4
				ILI9325_PARTIAL_IMG1_AREA_START_LINE,
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG1_AREA_END_LINE,
  4007a4:	2082      	movs	r0, #130	; 0x82
  4007a6:	2100      	movs	r1, #0
  4007a8:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG2_DISP_POS,
  4007aa:	2083      	movs	r0, #131	; 0x83
  4007ac:	2100      	movs	r1, #0
  4007ae:	47a0      	blx	r4
				0x0000);
		ili93xx_write_register_word(
  4007b0:	2084      	movs	r0, #132	; 0x84
  4007b2:	2100      	movs	r1, #0
  4007b4:	47a0      	blx	r4
				ILI9325_PARTIAL_IMG2_AREA_START_LINE,
				0x0000);
		ili93xx_write_register_word(ILI9325_PARTIAL_IMG2_AREA_END_LINE,
  4007b6:	2085      	movs	r0, #133	; 0x85
  4007b8:	2100      	movs	r1, #0
  4007ba:	47a0      	blx	r4
				0x0000);

		/** Panel Control */
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL1,
  4007bc:	2090      	movs	r0, #144	; 0x90
  4007be:	2110      	movs	r1, #16
  4007c0:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL1_RTNI(0x10));
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL2,
  4007c2:	2092      	movs	r0, #146	; 0x92
  4007c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4007c8:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL2_NOWI(0x06));
		ili93xx_write_register_word(ILI9325_PANEL_INTERFACE_CTRL4,
  4007ca:	2095      	movs	r0, #149	; 0x95
  4007cc:	f44f 7188 	mov.w	r1, #272	; 0x110
  4007d0:	47a0      	blx	r4
				ILI9325_PANEL_INTERFACE_CTRL4_DIVE(0x01) |
				ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  4007d2:	2000      	movs	r0, #0
  4007d4:	4601      	mov	r1, r0
  4007d6:	6832      	ldr	r2, [r6, #0]
  4007d8:	6873      	ldr	r3, [r6, #4]
  4007da:	4c57      	ldr	r4, [pc, #348]	; (400938 <ili93xx_init+0x2d4>)
  4007dc:	47a0      	blx	r4
		ili93xx_set_foreground_color(p_opt->foreground_color);
  4007de:	68b0      	ldr	r0, [r6, #8]
  4007e0:	4b56      	ldr	r3, [pc, #344]	; (40093c <ili93xx_init+0x2d8>)
  4007e2:	4798      	blx	r3
		ili93xx_set_cursor_position(0, 0);
  4007e4:	2000      	movs	r0, #0
  4007e6:	4601      	mov	r1, r0
  4007e8:	4b55      	ldr	r3, [pc, #340]	; (400940 <ili93xx_init+0x2dc>)
  4007ea:	4798      	blx	r3
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
	}

	return 0;
  4007ec:	2000      	movs	r0, #0
  4007ee:	e094      	b.n	40091a <ili93xx_init+0x2b6>
				ILI9325_PANEL_INTERFACE_CTRL4_RTNE(0x10));

		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
		ili93xx_set_foreground_color(p_opt->foreground_color);
		ili93xx_set_cursor_position(0, 0);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  4007f0:	2b02      	cmp	r3, #2
  4007f2:	f040 8091 	bne.w	400918 <ili93xx_init+0x2b4>
		/** init for ILI9341 **/
		/** power control A configuration*/
		paratable[0] = 0x39;
  4007f6:	2339      	movs	r3, #57	; 0x39
  4007f8:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x2C;
  4007fc:	232c      	movs	r3, #44	; 0x2c
  4007fe:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0x00;
  400802:	2400      	movs	r4, #0
  400804:	f88d 4002 	strb.w	r4, [sp, #2]
		paratable[3] = 0x34;
  400808:	2334      	movs	r3, #52	; 0x34
  40080a:	f88d 3003 	strb.w	r3, [sp, #3]
		paratable[4] = 0x02;
  40080e:	2702      	movs	r7, #2
  400810:	f88d 7004 	strb.w	r7, [sp, #4]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_A, paratable, 5);
  400814:	20cb      	movs	r0, #203	; 0xcb
  400816:	4669      	mov	r1, sp
  400818:	2205      	movs	r2, #5
  40081a:	4d4a      	ldr	r5, [pc, #296]	; (400944 <ili93xx_init+0x2e0>)
  40081c:	47a8      	blx	r5

		/** power control B configuration */
		paratable[0] = 0;
  40081e:	f88d 4000 	strb.w	r4, [sp]
		paratable[1] = 0xAA;
  400822:	23aa      	movs	r3, #170	; 0xaa
  400824:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0xB0;
  400828:	23b0      	movs	r3, #176	; 0xb0
  40082a:	f88d 3002 	strb.w	r3, [sp, #2]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_B, paratable, 3);
  40082e:	20cf      	movs	r0, #207	; 0xcf
  400830:	4669      	mov	r1, sp
  400832:	2203      	movs	r2, #3
  400834:	47a8      	blx	r5

		/** Pump Ratio Control configuration */
		paratable[0] = 0x30;
  400836:	2330      	movs	r3, #48	; 0x30
  400838:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_PUMP_RATIO_CONTROL,
  40083c:	20f7      	movs	r0, #247	; 0xf7
  40083e:	4669      	mov	r1, sp
  400840:	2201      	movs	r2, #1
  400842:	47a8      	blx	r5
				paratable, 1);

		/** Power Control 1 configuration*/
		paratable[0] = 0x25;
  400844:	2325      	movs	r3, #37	; 0x25
  400846:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_1, paratable, 1);
  40084a:	20c0      	movs	r0, #192	; 0xc0
  40084c:	4669      	mov	r1, sp
  40084e:	2201      	movs	r2, #1
  400850:	47a8      	blx	r5

		/** Power Control 2 configuration*/
		paratable[0] = 0x11;
  400852:	f04f 0911 	mov.w	r9, #17
  400856:	f88d 9000 	strb.w	r9, [sp]
		ili93xx_write_register(ILI9341_CMD_POWER_CONTROL_2, paratable, 1);
  40085a:	20c1      	movs	r0, #193	; 0xc1
  40085c:	4669      	mov	r1, sp
  40085e:	2201      	movs	r2, #1
  400860:	47a8      	blx	r5

		/** VOM Control 1 configuration*/
		paratable[0] = 0x5C;
  400862:	235c      	movs	r3, #92	; 0x5c
  400864:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x4C;
  400868:	234c      	movs	r3, #76	; 0x4c
  40086a:	f88d 3001 	strb.w	r3, [sp, #1]
		ili93xx_write_register(ILI9341_CMD_VCOM_CONTROL_1, paratable, 2);
  40086e:	20c5      	movs	r0, #197	; 0xc5
  400870:	4669      	mov	r1, sp
  400872:	463a      	mov	r2, r7
  400874:	47a8      	blx	r5

		/** VOM control 2 configuration*/
		paratable[0] = 0x94;
  400876:	2394      	movs	r3, #148	; 0x94
  400878:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_VCOM_CONTROL_2, paratable, 1);
  40087c:	20c7      	movs	r0, #199	; 0xc7
  40087e:	4669      	mov	r1, sp
  400880:	2201      	movs	r2, #1
  400882:	47a8      	blx	r5

		/** Driver Timing Control A configuration*/
		paratable[0] = 0x85;
  400884:	2385      	movs	r3, #133	; 0x85
  400886:	f88d 3000 	strb.w	r3, [sp]
		paratable[1] = 0x01;
  40088a:	f04f 0801 	mov.w	r8, #1
  40088e:	f88d 8001 	strb.w	r8, [sp, #1]
		paratable[2] = 0x78;
  400892:	2378      	movs	r3, #120	; 0x78
  400894:	f88d 3002 	strb.w	r3, [sp, #2]
		ili93xx_write_register(ILI9341_CMD_DRIVER_TIMING_CTL_A, paratable, 3);
  400898:	20e8      	movs	r0, #232	; 0xe8
  40089a:	4669      	mov	r1, sp
  40089c:	2203      	movs	r2, #3
  40089e:	47a8      	blx	r5

		/** Driver Timing Control B configuration*/
		paratable[0] = 0x00;
  4008a0:	f88d 4000 	strb.w	r4, [sp]
		paratable[1] = 0x00;
  4008a4:	f88d 4001 	strb.w	r4, [sp, #1]
		ili93xx_write_register(ILI9341_CMD_DRIVER_TIMING_CTL_B, paratable, 2);
  4008a8:	20ea      	movs	r0, #234	; 0xea
  4008aa:	4669      	mov	r1, sp
  4008ac:	463a      	mov	r2, r7
  4008ae:	47a8      	blx	r5

		/** Memory Access Control configuration*/
		paratable[0] = ILI9341_CMD_MEMORY_ACCESS_CONTROL_MX |
  4008b0:	2348      	movs	r3, #72	; 0x48
  4008b2:	f88d 3000 	strb.w	r3, [sp]
				ILI9341_CMD_MEMORY_ACCESS_CONTROL_BGR;
		ili93xx_write_register(ILI9341_CMD_MEMORY_ACCESS_CONTROL,
  4008b6:	2036      	movs	r0, #54	; 0x36
  4008b8:	4669      	mov	r1, sp
  4008ba:	4642      	mov	r2, r8
  4008bc:	47a8      	blx	r5
				paratable, 1);

		/** Colmod Pixel Format Set configuation*/
		paratable[0] = 0x06;
  4008be:	2306      	movs	r3, #6
  4008c0:	f88d 3000 	strb.w	r3, [sp]
		ili93xx_write_register(ILI9341_CMD_PIXEL_FORMAT_SET, paratable, 1);
  4008c4:	203a      	movs	r0, #58	; 0x3a
  4008c6:	4669      	mov	r1, sp
  4008c8:	4642      	mov	r2, r8
  4008ca:	47a8      	blx	r5

		/** Display Function Control */
		paratable[0] = 0x02;
  4008cc:	f88d 7000 	strb.w	r7, [sp]
		paratable[1] = 0x82;
  4008d0:	2382      	movs	r3, #130	; 0x82
  4008d2:	f88d 3001 	strb.w	r3, [sp, #1]
		paratable[2] = 0x27;
  4008d6:	2327      	movs	r3, #39	; 0x27
  4008d8:	f88d 3002 	strb.w	r3, [sp, #2]
		paratable[3] = 0x00;
  4008dc:	f88d 4003 	strb.w	r4, [sp, #3]
		ili93xx_write_register(ILI9341_CMD_DISPLAY_FUNCTION_CTL, paratable, 4);
  4008e0:	20b6      	movs	r0, #182	; 0xb6
  4008e2:	4669      	mov	r1, sp
  4008e4:	2204      	movs	r2, #4
  4008e6:	47a8      	blx	r5
		
		/** set window area*/
		ili93xx_set_window(0, 0, p_opt->ul_width, p_opt->ul_height);
  4008e8:	4620      	mov	r0, r4
  4008ea:	4621      	mov	r1, r4
  4008ec:	6832      	ldr	r2, [r6, #0]
  4008ee:	6873      	ldr	r3, [r6, #4]
  4008f0:	4f11      	ldr	r7, [pc, #68]	; (400938 <ili93xx_init+0x2d4>)
  4008f2:	47b8      	blx	r7
		ili93xx_set_foreground_color(p_opt->foreground_color);
  4008f4:	68b0      	ldr	r0, [r6, #8]
  4008f6:	4b11      	ldr	r3, [pc, #68]	; (40093c <ili93xx_init+0x2d8>)
  4008f8:	4798      	blx	r3
		/** Leave sleep mode*/
		ili93xx_write_register(ILI9341_CMD_SLEEP_OUT, paratable, 0);
  4008fa:	4648      	mov	r0, r9
  4008fc:	4669      	mov	r1, sp
  4008fe:	4622      	mov	r2, r4
  400900:	47a8      	blx	r5
		ili93xx_delay(10);
  400902:	200a      	movs	r0, #10
  400904:	4b0b      	ldr	r3, [pc, #44]	; (400934 <ili93xx_init+0x2d0>)
  400906:	4798      	blx	r3
		/** Display on*/
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, paratable, 0);
  400908:	2029      	movs	r0, #41	; 0x29
  40090a:	4669      	mov	r1, sp
  40090c:	4622      	mov	r2, r4
  40090e:	47a8      	blx	r5
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
	}

	return 0;
  400910:	4620      	mov	r0, r4
  400912:	e002      	b.n	40091a <ili93xx_init+0x2b6>
{
	uint8_t paratable[6];

	/** Identify the LCD driver device*/
	if (ili93xx_device_type_identify() != 0) {
		return 1;
  400914:	2001      	movs	r0, #1
  400916:	e000      	b.n	40091a <ili93xx_init+0x2b6>
		ili93xx_delay(10);
		/** Display on*/
		ili93xx_write_register(ILI9341_CMD_DISPLAY_ON, paratable, 0);
	} else {
		/** exit with return value 1 if device type is not supported.*/
		return 1;
  400918:	2001      	movs	r0, #1
	}

	return 0;
}
  40091a:	b003      	add	sp, #12
  40091c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400920:	004004d5 	.word	0x004004d5
  400924:	20000000 	.word	0x20000000
  400928:	20000004 	.word	0x20000004
  40092c:	20000c28 	.word	0x20000c28
  400930:	004003f9 	.word	0x004003f9
  400934:	0040043d 	.word	0x0040043d
  400938:	0040059d 	.word	0x0040059d
  40093c:	00400585 	.word	0x00400585
  400940:	00400641 	.word	0x00400641
  400944:	00400411 	.word	0x00400411

00400948 <ili93xx_draw_pixel>:
 * \param ul_y Y coordinate of pixel.
 *
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
  400948:	b510      	push	{r4, lr}
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
  40094a:	4b16      	ldr	r3, [pc, #88]	; (4009a4 <ili93xx_draw_pixel+0x5c>)
  40094c:	681b      	ldr	r3, [r3, #0]
  40094e:	4283      	cmp	r3, r0
  400950:	d921      	bls.n	400996 <ili93xx_draw_pixel+0x4e>
  400952:	4b15      	ldr	r3, [pc, #84]	; (4009a8 <ili93xx_draw_pixel+0x60>)
  400954:	681b      	ldr	r3, [r3, #0]
  400956:	428b      	cmp	r3, r1
  400958:	d91f      	bls.n	40099a <ili93xx_draw_pixel+0x52>
		return 1;
	}

	if (g_uc_device_type == DEVICE_TYPE_ILI9325) {
  40095a:	4b14      	ldr	r3, [pc, #80]	; (4009ac <ili93xx_draw_pixel+0x64>)
  40095c:	781b      	ldrb	r3, [r3, #0]
  40095e:	2b01      	cmp	r3, #1
  400960:	d10b      	bne.n	40097a <ili93xx_draw_pixel+0x32>
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
  400962:	b280      	uxth	r0, r0
  400964:	b289      	uxth	r1, r1
  400966:	4b12      	ldr	r3, [pc, #72]	; (4009b0 <ili93xx_draw_pixel+0x68>)
  400968:	4798      	blx	r3
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
  40096a:	4b12      	ldr	r3, [pc, #72]	; (4009b4 <ili93xx_draw_pixel+0x6c>)
  40096c:	4798      	blx	r3
		ili93xx_write_ram(*g_ul_pixel_cache);
  40096e:	4b12      	ldr	r3, [pc, #72]	; (4009b8 <ili93xx_draw_pixel+0x70>)
  400970:	6818      	ldr	r0, [r3, #0]
  400972:	4b12      	ldr	r3, [pc, #72]	; (4009bc <ili93xx_draw_pixel+0x74>)
  400974:	4798      	blx	r3
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
  400976:	2000      	movs	r0, #0
  400978:	bd10      	pop	{r4, pc}
		/** Set cursor */
		ili93xx_set_cursor_position(ul_x, ul_y);
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	} else if (g_uc_device_type == DEVICE_TYPE_ILI9341) {
  40097a:	2b02      	cmp	r3, #2
  40097c:	d10f      	bne.n	40099e <ili93xx_draw_pixel+0x56>
		ili93xx_set_window(ul_x, ul_y, 0, 0);
  40097e:	2200      	movs	r2, #0
  400980:	4613      	mov	r3, r2
  400982:	4c0f      	ldr	r4, [pc, #60]	; (4009c0 <ili93xx_draw_pixel+0x78>)
  400984:	47a0      	blx	r4
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
  400986:	4b0b      	ldr	r3, [pc, #44]	; (4009b4 <ili93xx_draw_pixel+0x6c>)
  400988:	4798      	blx	r3
		ili93xx_write_ram(*g_ul_pixel_cache);
  40098a:	4b0b      	ldr	r3, [pc, #44]	; (4009b8 <ili93xx_draw_pixel+0x70>)
  40098c:	6818      	ldr	r0, [r3, #0]
  40098e:	4b0b      	ldr	r3, [pc, #44]	; (4009bc <ili93xx_draw_pixel+0x74>)
  400990:	4798      	blx	r3
	}

	return 0;
  400992:	2000      	movs	r0, #0
  400994:	bd10      	pop	{r4, pc}
 * \return 0 if succeeds, otherwise fails.
 */
uint32_t ili93xx_draw_pixel(uint32_t ul_x, uint32_t ul_y)
{
	if ((ul_x >= g_ul_lcd_x_length) || (ul_y >= g_ul_lcd_y_length)) {
		return 1;
  400996:	2001      	movs	r0, #1
  400998:	bd10      	pop	{r4, pc}
  40099a:	2001      	movs	r0, #1
  40099c:	bd10      	pop	{r4, pc}
		/** Prepare to write in GRAM */
		ili93xx_write_ram_prepare();
		ili93xx_write_ram(*g_ul_pixel_cache);
	}

	return 0;
  40099e:	2000      	movs	r0, #0
}
  4009a0:	bd10      	pop	{r4, pc}
  4009a2:	bf00      	nop
  4009a4:	20000000 	.word	0x20000000
  4009a8:	20000004 	.word	0x20000004
  4009ac:	20000c28 	.word	0x20000c28
  4009b0:	00400641 	.word	0x00400641
  4009b4:	00400351 	.word	0x00400351
  4009b8:	20000868 	.word	0x20000868
  4009bc:	00400381 	.word	0x00400381
  4009c0:	0040059d 	.word	0x0040059d

004009c4 <ili93xx_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili93xx_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  4009c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4009c8:	b084      	sub	sp, #16
  4009ca:	9003      	str	r0, [sp, #12]
  4009cc:	9102      	str	r1, [sp, #8]
  4009ce:	9201      	str	r2, [sp, #4]
  4009d0:	9300      	str	r3, [sp, #0]
	uint32_t size, blocks;

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  4009d2:	a803      	add	r0, sp, #12
  4009d4:	a902      	add	r1, sp, #8
  4009d6:	aa01      	add	r2, sp, #4
  4009d8:	466b      	mov	r3, sp
  4009da:	4c22      	ldr	r4, [pc, #136]	; (400a64 <ili93xx_draw_filled_rectangle+0xa0>)
  4009dc:	47a0      	blx	r4

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
  4009de:	9d03      	ldr	r5, [sp, #12]
			(ul_y2 - ul_y1) + 1);
  4009e0:	9c02      	ldr	r4, [sp, #8]
  4009e2:	9901      	ldr	r1, [sp, #4]
  4009e4:	1c4a      	adds	r2, r1, #1
  4009e6:	9900      	ldr	r1, [sp, #0]
  4009e8:	1c4b      	adds	r3, r1, #1

	/** Swap coordinates if necessary */
	ili93xx_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);

	/** Determine the refresh window area */
	ili93xx_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1,
  4009ea:	4628      	mov	r0, r5
  4009ec:	4621      	mov	r1, r4
  4009ee:	1b52      	subs	r2, r2, r5
  4009f0:	1b1b      	subs	r3, r3, r4
  4009f2:	4c1d      	ldr	r4, [pc, #116]	; (400a68 <ili93xx_draw_filled_rectangle+0xa4>)
  4009f4:	47a0      	blx	r4
			(ul_y2 - ul_y1) + 1);

	/** Set cursor */
	ili93xx_set_cursor_position(ul_x1, ul_y1);
  4009f6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  4009fa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  4009fe:	4b1b      	ldr	r3, [pc, #108]	; (400a6c <ili93xx_draw_filled_rectangle+0xa8>)
  400a00:	4798      	blx	r3

	/** Prepare to write in Graphic RAM */
	ili93xx_write_ram_prepare();
  400a02:	4b1b      	ldr	r3, [pc, #108]	; (400a70 <ili93xx_draw_filled_rectangle+0xac>)
  400a04:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  400a06:	9a02      	ldr	r2, [sp, #8]
  400a08:	9b00      	ldr	r3, [sp, #0]
  400a0a:	1a9a      	subs	r2, r3, r2
  400a0c:	9b01      	ldr	r3, [sp, #4]
  400a0e:	f103 0801 	add.w	r8, r3, #1
  400a12:	9b03      	ldr	r3, [sp, #12]
  400a14:	ebc3 0808 	rsb	r8, r3, r8
  400a18:	fb02 8808 	mla	r8, r2, r8, r8

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  400a1c:	4c15      	ldr	r4, [pc, #84]	; (400a74 <ili93xx_draw_filled_rectangle+0xb0>)
  400a1e:	fba4 3408 	umull	r3, r4, r4, r8
	while (blocks--) {
  400a22:	09e4      	lsrs	r4, r4, #7
  400a24:	d007      	beq.n	400a36 <ili93xx_draw_filled_rectangle+0x72>
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
  400a26:	4f14      	ldr	r7, [pc, #80]	; (400a78 <ili93xx_draw_filled_rectangle+0xb4>)
  400a28:	26f0      	movs	r6, #240	; 0xf0
  400a2a:	4d14      	ldr	r5, [pc, #80]	; (400a7c <ili93xx_draw_filled_rectangle+0xb8>)
  400a2c:	4638      	mov	r0, r7
  400a2e:	4631      	mov	r1, r6
  400a30:	47a8      	blx	r5

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);

	/** Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
	while (blocks--) {
  400a32:	3c01      	subs	r4, #1
  400a34:	d1fa      	bne.n	400a2c <ili93xx_draw_filled_rectangle+0x68>
		ili93xx_write_ram_buffer(g_ul_pixel_cache,
								LCD_DATA_CACHE_SIZE);
	}

	/** Send remaining pixels */
	ili93xx_write_ram_buffer(g_ul_pixel_cache,
  400a36:	490f      	ldr	r1, [pc, #60]	; (400a74 <ili93xx_draw_filled_rectangle+0xb0>)
  400a38:	fba1 3108 	umull	r3, r1, r1, r8
  400a3c:	09c9      	lsrs	r1, r1, #7
  400a3e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
  400a42:	480d      	ldr	r0, [pc, #52]	; (400a78 <ili93xx_draw_filled_rectangle+0xb4>)
  400a44:	eba8 1101 	sub.w	r1, r8, r1, lsl #4
  400a48:	4b0c      	ldr	r3, [pc, #48]	; (400a7c <ili93xx_draw_filled_rectangle+0xb8>)
  400a4a:	4798      	blx	r3
					size % LCD_DATA_CACHE_SIZE);

	/** Reset the refresh window area */
	ili93xx_set_window(0, 0, g_ul_lcd_x_length, g_ul_lcd_y_length);
  400a4c:	2000      	movs	r0, #0
  400a4e:	4601      	mov	r1, r0
  400a50:	4b0b      	ldr	r3, [pc, #44]	; (400a80 <ili93xx_draw_filled_rectangle+0xbc>)
  400a52:	681a      	ldr	r2, [r3, #0]
  400a54:	4b0b      	ldr	r3, [pc, #44]	; (400a84 <ili93xx_draw_filled_rectangle+0xc0>)
  400a56:	681b      	ldr	r3, [r3, #0]
  400a58:	4c03      	ldr	r4, [pc, #12]	; (400a68 <ili93xx_draw_filled_rectangle+0xa4>)
  400a5a:	47a0      	blx	r4
}
  400a5c:	b004      	add	sp, #16
  400a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a62:	bf00      	nop
  400a64:	00400475 	.word	0x00400475
  400a68:	0040059d 	.word	0x0040059d
  400a6c:	00400641 	.word	0x00400641
  400a70:	00400351 	.word	0x00400351
  400a74:	88888889 	.word	0x88888889
  400a78:	20000868 	.word	0x20000868
  400a7c:	00400399 	.word	0x00400399
  400a80:	20000000 	.word	0x20000000
  400a84:	20000004 	.word	0x20000004

00400a88 <ili93xx_draw_line>:
 * \param ul_x2 X coordinate of line end.
 * \param ul_y2 Y coordinate of line end.
 */
void ili93xx_draw_line(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  400a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a8c:	b083      	sub	sp, #12
  400a8e:	4606      	mov	r6, r0
  400a90:	4688      	mov	r8, r1
	if ((ul_y1 == ul_y2) || (ul_x1 == ul_x2)) {
  400a92:	4299      	cmp	r1, r3
  400a94:	d001      	beq.n	400a9a <ili93xx_draw_line+0x12>
  400a96:	4290      	cmp	r0, r2
  400a98:	d104      	bne.n	400aa4 <ili93xx_draw_line+0x1c>
		ili93xx_draw_filled_rectangle(ul_x1, ul_y1, ul_x2, ul_y2);
  400a9a:	4630      	mov	r0, r6
  400a9c:	4641      	mov	r1, r8
  400a9e:	4c2b      	ldr	r4, [pc, #172]	; (400b4c <ili93xx_draw_line+0xc4>)
  400aa0:	47a0      	blx	r4
  400aa2:	e050      	b.n	400b46 <ili93xx_draw_line+0xbe>
	int dx, dy;
	int i;
	int xinc, yinc, cumul;
	int x, y;

	x = ul_x1;
  400aa4:	4681      	mov	r9, r0
	y = ul_y1;
  400aa6:	460f      	mov	r7, r1
	dx = ul_x2 - ul_x1;
  400aa8:	1a12      	subs	r2, r2, r0
	dy = ul_y2 - ul_y1;
  400aaa:	1a5b      	subs	r3, r3, r1
	xinc = (dx > 0) ? 1 : -1;
  400aac:	2a00      	cmp	r2, #0
  400aae:	bfcc      	ite	gt
  400ab0:	2101      	movgt	r1, #1
  400ab2:	f04f 31ff 	movle.w	r1, #4294967295
  400ab6:	9100      	str	r1, [sp, #0]
	yinc = (dy > 0) ? 1 : -1;
  400ab8:	2b00      	cmp	r3, #0
  400aba:	bfcc      	ite	gt
  400abc:	2101      	movgt	r1, #1
  400abe:	f04f 31ff 	movle.w	r1, #4294967295
  400ac2:	9101      	str	r1, [sp, #4]
	dx = abs(ul_x2 - ul_x1);
  400ac4:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
  400ac8:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
	dy = abs(ul_y2 - ul_y1);
  400acc:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
  400ad0:	eba4 74e3 	sub.w	r4, r4, r3, asr #31

	ili93xx_draw_pixel(x, y);
  400ad4:	4641      	mov	r1, r8
  400ad6:	4b1e      	ldr	r3, [pc, #120]	; (400b50 <ili93xx_draw_line+0xc8>)
  400ad8:	4798      	blx	r3

	if (dx > dy) {
  400ada:	42a5      	cmp	r5, r4
  400adc:	dd1a      	ble.n	400b14 <ili93xx_draw_line+0x8c>
		cumul = dx >> 1;
  400ade:	ea4f 0865 	mov.w	r8, r5, asr #1

		for (i = 1; i <= dx; i++) {
  400ae2:	2d00      	cmp	r5, #0
  400ae4:	dd2f      	ble.n	400b46 <ili93xx_draw_line+0xbe>
  400ae6:	9b00      	ldr	r3, [sp, #0]
  400ae8:	4699      	mov	r9, r3
  400aea:	441e      	add	r6, r3
  400aec:	f04f 0a01 	mov.w	sl, #1
			if (cumul >= dx) {
				cumul -= dx;
				y += yinc;
			}

			ili93xx_draw_pixel(x, y);
  400af0:	f8df b05c 	ldr.w	fp, [pc, #92]	; 400b50 <ili93xx_draw_line+0xc8>
	if (dx > dy) {
		cumul = dx >> 1;

		for (i = 1; i <= dx; i++) {
			x += xinc;
			cumul += dy;
  400af4:	44a0      	add	r8, r4

			if (cumul >= dx) {
  400af6:	4545      	cmp	r5, r8
  400af8:	dc03      	bgt.n	400b02 <ili93xx_draw_line+0x7a>
				cumul -= dx;
  400afa:	ebc5 0808 	rsb	r8, r5, r8
				y += yinc;
  400afe:	9b01      	ldr	r3, [sp, #4]
  400b00:	441f      	add	r7, r3
			}

			ili93xx_draw_pixel(x, y);
  400b02:	4630      	mov	r0, r6
  400b04:	4639      	mov	r1, r7
  400b06:	47d8      	blx	fp
	ili93xx_draw_pixel(x, y);

	if (dx > dy) {
		cumul = dx >> 1;

		for (i = 1; i <= dx; i++) {
  400b08:	f10a 0a01 	add.w	sl, sl, #1
  400b0c:	444e      	add	r6, r9
  400b0e:	4555      	cmp	r5, sl
  400b10:	daf0      	bge.n	400af4 <ili93xx_draw_line+0x6c>
  400b12:	e018      	b.n	400b46 <ili93xx_draw_line+0xbe>
			}

			ili93xx_draw_pixel(x, y);
		}
	} else {
		cumul = dy >> 1;
  400b14:	1067      	asrs	r7, r4, #1

		for (i = 1; i <= dy; i++) {
  400b16:	2c00      	cmp	r4, #0
  400b18:	dd15      	ble.n	400b46 <ili93xx_draw_line+0xbe>
  400b1a:	9b01      	ldr	r3, [sp, #4]
  400b1c:	469b      	mov	fp, r3
  400b1e:	4443      	add	r3, r8
  400b20:	461e      	mov	r6, r3
  400b22:	f04f 0801 	mov.w	r8, #1
			if (cumul >= dy) {
				cumul -= dy;
				x += xinc;
			}

			ili93xx_draw_pixel(x, y);
  400b26:	f8df a028 	ldr.w	sl, [pc, #40]	; 400b50 <ili93xx_draw_line+0xc8>
	} else {
		cumul = dy >> 1;

		for (i = 1; i <= dy; i++) {
			y += yinc;
			cumul += dx;
  400b2a:	442f      	add	r7, r5

			if (cumul >= dy) {
  400b2c:	42bc      	cmp	r4, r7
  400b2e:	dc02      	bgt.n	400b36 <ili93xx_draw_line+0xae>
				cumul -= dy;
  400b30:	1b3f      	subs	r7, r7, r4
				x += xinc;
  400b32:	9b00      	ldr	r3, [sp, #0]
  400b34:	4499      	add	r9, r3
			}

			ili93xx_draw_pixel(x, y);
  400b36:	4648      	mov	r0, r9
  400b38:	4631      	mov	r1, r6
  400b3a:	47d0      	blx	sl
			ili93xx_draw_pixel(x, y);
		}
	} else {
		cumul = dy >> 1;

		for (i = 1; i <= dy; i++) {
  400b3c:	f108 0801 	add.w	r8, r8, #1
  400b40:	445e      	add	r6, fp
  400b42:	4544      	cmp	r4, r8
  400b44:	daf1      	bge.n	400b2a <ili93xx_draw_line+0xa2>
	if ((ul_y1 == ul_y2) || (ul_x1 == ul_x2)) {
		ili93xx_draw_filled_rectangle(ul_x1, ul_y1, ul_x2, ul_y2);
	} else {
		ili93xx_draw_line_bresenham(ul_x1, ul_y1, ul_x2, ul_y2);
	}
}
  400b46:	b003      	add	sp, #12
  400b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400b4c:	004009c5 	.word	0x004009c5
  400b50:	00400949 	.word	0x00400949

00400b54 <ili93xx_draw_string>:
 * \param ul_x X coordinate of string top-left corner.
 * \param ul_y Y coordinate of string top-left corner.
 * \param p_str String to display.
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
  400b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b58:	b085      	sub	sp, #20
  400b5a:	9003      	str	r0, [sp, #12]
  400b5c:	9202      	str	r2, [sp, #8]
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400b5e:	7813      	ldrb	r3, [r2, #0]
  400b60:	2b00      	cmp	r3, #0
  400b62:	d046      	beq.n	400bf2 <ili93xx_draw_string+0x9e>
  400b64:	468b      	mov	fp, r1
  400b66:	9001      	str	r0, [sp, #4]
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  400b68:	f8df 9090 	ldr.w	r9, [pc, #144]	; 400bfc <ili93xx_draw_string+0xa8>
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
		/** If newline, jump to the next line (font height + 2) */
		if (*p_str == '\n') {
  400b6c:	2b0a      	cmp	r3, #10
  400b6e:	d104      	bne.n	400b7a <ili93xx_draw_string+0x26>
			ul_y += gfont.height + 2;
  400b70:	f10b 0b10 	add.w	fp, fp, #16
			ul_x = xorg;
  400b74:	9b03      	ldr	r3, [sp, #12]
  400b76:	9301      	str	r3, [sp, #4]
  400b78:	e035      	b.n	400be6 <ili93xx_draw_string+0x92>

	/**
	 * Compute offset according of the specified ASCII character
	 *  Note: the first 32 characters of the ASCII table are not handled
	 */
	offset = ((uint32_t)uc_c - 0x20) * 20;
  400b7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400b7e:	4e1e      	ldr	r6, [pc, #120]	; (400bf8 <ili93xx_draw_string+0xa4>)
  400b80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  400b84:	f2a3 267f 	subw	r6, r3, #639	; 0x27f
  400b88:	9a01      	ldr	r2, [sp, #4]
  400b8a:	4613      	mov	r3, r2
  400b8c:	330a      	adds	r3, #10
  400b8e:	9300      	str	r3, [sp, #0]
  400b90:	4690      	mov	r8, r2
  400b92:	2407      	movs	r4, #7
  400b94:	4637      	mov	r7, r6
  400b96:	eb0b 0a04 	add.w	sl, fp, r4
  400b9a:	463d      	mov	r5, r7
		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
  400b9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  400ba0:	4123      	asrs	r3, r4
  400ba2:	f013 0f01 	tst.w	r3, #1
  400ba6:	d003      	beq.n	400bb0 <ili93xx_draw_string+0x5c>
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
  400ba8:	4640      	mov	r0, r8
  400baa:	ebc4 010a 	rsb	r1, r4, sl
  400bae:	47c8      	blx	r9
  400bb0:	3c01      	subs	r4, #1

		/**
		 * Draw pixel on screen depending on the corresponding bit value
		 * from the charset
		 */
		for (row = 0; row < 8; row++) {
  400bb2:	f1b4 3fff 	cmp.w	r4, #4294967295
  400bb6:	d1f0      	bne.n	400b9a <ili93xx_draw_string+0x46>
  400bb8:	2407      	movs	r4, #7
  400bba:	f10b 070f 	add.w	r7, fp, #15
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
			if ((p_uc_charset10x14[offset1] >> (7 - row)) & 0x1) {
  400bbe:	782b      	ldrb	r3, [r5, #0]
  400bc0:	4123      	asrs	r3, r4
  400bc2:	f013 0f01 	tst.w	r3, #1
  400bc6:	d002      	beq.n	400bce <ili93xx_draw_string+0x7a>
				ili93xx_draw_pixel(ul_x + col, ul_y + row + 8);
  400bc8:	4640      	mov	r0, r8
  400bca:	1b39      	subs	r1, r7, r4
  400bcc:	47c8      	blx	r9
  400bce:	3c01      	subs	r4, #1
			if ((p_uc_charset10x14[offset0] >> (7 - row)) & 0x1) {
				ili93xx_draw_pixel(ul_x + col, ul_y + row);
			}
		}

		for (row = 0; row < 6; row++) {
  400bd0:	2c01      	cmp	r4, #1
  400bd2:	d1f4      	bne.n	400bbe <ili93xx_draw_string+0x6a>
  400bd4:	3602      	adds	r6, #2
  400bd6:	f108 0801 	add.w	r8, r8, #1
	 * Compute offset according of the specified ASCII character
	 *  Note: the first 32 characters of the ASCII table are not handled
	 */
	offset = ((uint32_t)uc_c - 0x20) * 20;

	for (col = 0; col < 10; col++) {
  400bda:	9b00      	ldr	r3, [sp, #0]
  400bdc:	4598      	cmp	r8, r3
  400bde:	d1d8      	bne.n	400b92 <ili93xx_draw_string+0x3e>
			/**
			 * Draw the character and place cursor right after (font
			 * width + 2)
			 */
			ili93xx_draw_char(ul_x, ul_y, *p_str);
			ul_x += gfont.width + 2;
  400be0:	9b01      	ldr	r3, [sp, #4]
  400be2:	330c      	adds	r3, #12
  400be4:	9301      	str	r3, [sp, #4]
 */
void ili93xx_draw_string(uint32_t ul_x, uint32_t ul_y, const uint8_t *p_str)
{
	uint32_t xorg = ul_x;

	while (*p_str != 0) {
  400be6:	9a02      	ldr	r2, [sp, #8]
  400be8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  400bec:	9202      	str	r2, [sp, #8]
  400bee:	2b00      	cmp	r3, #0
  400bf0:	d1bc      	bne.n	400b6c <ili93xx_draw_string+0x18>
			ul_x += gfont.width + 2;
		}

		p_str++;
	}
}
  400bf2:	b005      	add	sp, #20
  400bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400bf8:	00402630 	.word	0x00402630
  400bfc:	00400949 	.word	0x00400949

00400c00 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
  400c00:	0109      	lsls	r1, r1, #4
  400c02:	5042      	str	r2, [r0, r1]
  400c04:	4770      	bx	lr
  400c06:	bf00      	nop

00400c08 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
  400c08:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400c0c:	604a      	str	r2, [r1, #4]
  400c0e:	4770      	bx	lr

00400c10 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
  400c10:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400c14:	608a      	str	r2, [r1, #8]
  400c16:	4770      	bx	lr

00400c18 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
  400c18:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  400c1c:	60ca      	str	r2, [r1, #12]
  400c1e:	4770      	bx	lr

00400c20 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c20:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c22:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c26:	d02f      	beq.n	400c88 <pio_set_peripheral+0x68>
  400c28:	d807      	bhi.n	400c3a <pio_set_peripheral+0x1a>
  400c2a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c2e:	d014      	beq.n	400c5a <pio_set_peripheral+0x3a>
  400c30:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c34:	d01e      	beq.n	400c74 <pio_set_peripheral+0x54>
  400c36:	b939      	cbnz	r1, 400c48 <pio_set_peripheral+0x28>
  400c38:	4770      	bx	lr
  400c3a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c3e:	d037      	beq.n	400cb0 <pio_set_peripheral+0x90>
  400c40:	d804      	bhi.n	400c4c <pio_set_peripheral+0x2c>
  400c42:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c46:	d029      	beq.n	400c9c <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c48:	6042      	str	r2, [r0, #4]
  400c4a:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c4c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c50:	d02e      	beq.n	400cb0 <pio_set_peripheral+0x90>
  400c52:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c56:	d02b      	beq.n	400cb0 <pio_set_peripheral+0x90>
  400c58:	e7f6      	b.n	400c48 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400c5a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c5c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c5e:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400c60:	43d3      	mvns	r3, r2
  400c62:	4021      	ands	r1, r4
  400c64:	4019      	ands	r1, r3
  400c66:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c68:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c6a:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400c6c:	4021      	ands	r1, r4
  400c6e:	400b      	ands	r3, r1
  400c70:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c72:	e01a      	b.n	400caa <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c74:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c76:	4313      	orrs	r3, r2
  400c78:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c7a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c7c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c7e:	400b      	ands	r3, r1
  400c80:	ea23 0302 	bic.w	r3, r3, r2
  400c84:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c86:	e7df      	b.n	400c48 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c88:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c8a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400c8c:	400b      	ands	r3, r1
  400c8e:	ea23 0302 	bic.w	r3, r3, r2
  400c92:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c94:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c96:	4313      	orrs	r3, r2
  400c98:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c9a:	e7d5      	b.n	400c48 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c9e:	4313      	orrs	r3, r2
  400ca0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ca2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ca4:	4313      	orrs	r3, r2
  400ca6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ca8:	e7ce      	b.n	400c48 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400caa:	6042      	str	r2, [r0, #4]
}
  400cac:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cb0:	4770      	bx	lr
  400cb2:	bf00      	nop

00400cb4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400cb4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400cb6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400cba:	bf14      	ite	ne
  400cbc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cbe:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400cc0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400cc4:	bf14      	ite	ne
  400cc6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400cc8:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400cca:	f012 0f02 	tst.w	r2, #2
  400cce:	d002      	beq.n	400cd6 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400cd0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400cd4:	e004      	b.n	400ce0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400cd6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400cda:	bf18      	it	ne
  400cdc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400ce0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400ce2:	6001      	str	r1, [r0, #0]
  400ce4:	4770      	bx	lr
  400ce6:	bf00      	nop

00400ce8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400ce8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400cea:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400cec:	9c01      	ldr	r4, [sp, #4]
  400cee:	b10c      	cbz	r4, 400cf4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400cf0:	6641      	str	r1, [r0, #100]	; 0x64
  400cf2:	e000      	b.n	400cf6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400cf4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400cf6:	b10b      	cbz	r3, 400cfc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400cf8:	6501      	str	r1, [r0, #80]	; 0x50
  400cfa:	e000      	b.n	400cfe <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400cfc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400cfe:	b10a      	cbz	r2, 400d04 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400d00:	6301      	str	r1, [r0, #48]	; 0x30
  400d02:	e000      	b.n	400d06 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400d04:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400d06:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400d08:	6001      	str	r1, [r0, #0]
}
  400d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d0e:	4770      	bx	lr

00400d10 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400d10:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400d12:	4770      	bx	lr

00400d14 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400d14:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400d16:	4770      	bx	lr

00400d18 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400d18:	b570      	push	{r4, r5, r6, lr}
  400d1a:	b082      	sub	sp, #8
  400d1c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400d1e:	0943      	lsrs	r3, r0, #5
  400d20:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400d24:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400d28:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400d2a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  400d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400d32:	d047      	beq.n	400dc4 <pio_configure_pin+0xac>
  400d34:	d809      	bhi.n	400d4a <pio_configure_pin+0x32>
  400d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400d3a:	d021      	beq.n	400d80 <pio_configure_pin+0x68>
  400d3c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400d40:	d02f      	beq.n	400da2 <pio_configure_pin+0x8a>
  400d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400d46:	d16f      	bne.n	400e28 <pio_configure_pin+0x110>
  400d48:	e009      	b.n	400d5e <pio_configure_pin+0x46>
  400d4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400d4e:	d055      	beq.n	400dfc <pio_configure_pin+0xe4>
  400d50:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400d54:	d052      	beq.n	400dfc <pio_configure_pin+0xe4>
  400d56:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400d5a:	d044      	beq.n	400de6 <pio_configure_pin+0xce>
  400d5c:	e064      	b.n	400e28 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400d5e:	f000 001f 	and.w	r0, r0, #31
  400d62:	2601      	movs	r6, #1
  400d64:	4086      	lsls	r6, r0
  400d66:	4620      	mov	r0, r4
  400d68:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d6c:	4632      	mov	r2, r6
  400d6e:	4b30      	ldr	r3, [pc, #192]	; (400e30 <pio_configure_pin+0x118>)
  400d70:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d72:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400d76:	bf14      	ite	ne
  400d78:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400d7a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400d7c:	2001      	movs	r0, #1
  400d7e:	e054      	b.n	400e2a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400d80:	f000 001f 	and.w	r0, r0, #31
  400d84:	2601      	movs	r6, #1
  400d86:	4086      	lsls	r6, r0
  400d88:	4620      	mov	r0, r4
  400d8a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d8e:	4632      	mov	r2, r6
  400d90:	4b27      	ldr	r3, [pc, #156]	; (400e30 <pio_configure_pin+0x118>)
  400d92:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400d94:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400d98:	bf14      	ite	ne
  400d9a:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400d9c:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400d9e:	2001      	movs	r0, #1
  400da0:	e043      	b.n	400e2a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400da2:	f000 001f 	and.w	r0, r0, #31
  400da6:	2601      	movs	r6, #1
  400da8:	4086      	lsls	r6, r0
  400daa:	4620      	mov	r0, r4
  400dac:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400db0:	4632      	mov	r2, r6
  400db2:	4b1f      	ldr	r3, [pc, #124]	; (400e30 <pio_configure_pin+0x118>)
  400db4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400db6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400dba:	bf14      	ite	ne
  400dbc:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400dbe:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400dc0:	2001      	movs	r0, #1
  400dc2:	e032      	b.n	400e2a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400dc4:	f000 001f 	and.w	r0, r0, #31
  400dc8:	2601      	movs	r6, #1
  400dca:	4086      	lsls	r6, r0
  400dcc:	4620      	mov	r0, r4
  400dce:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400dd2:	4632      	mov	r2, r6
  400dd4:	4b16      	ldr	r3, [pc, #88]	; (400e30 <pio_configure_pin+0x118>)
  400dd6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400dd8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400ddc:	bf14      	ite	ne
  400dde:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400de0:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400de2:	2001      	movs	r0, #1
  400de4:	e021      	b.n	400e2a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400de6:	f000 031f 	and.w	r3, r0, #31
  400dea:	2601      	movs	r6, #1
  400dec:	4620      	mov	r0, r4
  400dee:	fa06 f103 	lsl.w	r1, r6, r3
  400df2:	462a      	mov	r2, r5
  400df4:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <pio_configure_pin+0x11c>)
  400df6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400df8:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400dfa:	e016      	b.n	400e2a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400dfc:	f000 031f 	and.w	r3, r0, #31
  400e00:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400e02:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400e06:	ea05 0106 	and.w	r1, r5, r6
  400e0a:	9100      	str	r1, [sp, #0]
  400e0c:	4620      	mov	r0, r4
  400e0e:	fa06 f103 	lsl.w	r1, r6, r3
  400e12:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400e16:	bf14      	ite	ne
  400e18:	2200      	movne	r2, #0
  400e1a:	2201      	moveq	r2, #1
  400e1c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400e20:	4c05      	ldr	r4, [pc, #20]	; (400e38 <pio_configure_pin+0x120>)
  400e22:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400e24:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400e26:	e000      	b.n	400e2a <pio_configure_pin+0x112>

	default:
		return 0;
  400e28:	2000      	movs	r0, #0
	}

	return 1;
}
  400e2a:	b002      	add	sp, #8
  400e2c:	bd70      	pop	{r4, r5, r6, pc}
  400e2e:	bf00      	nop
  400e30:	00400c21 	.word	0x00400c21
  400e34:	00400cb5 	.word	0x00400cb5
  400e38:	00400ce9 	.word	0x00400ce9

00400e3c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400e3c:	b570      	push	{r4, r5, r6, lr}
  400e3e:	b082      	sub	sp, #8
  400e40:	4606      	mov	r6, r0
  400e42:	460d      	mov	r5, r1
  400e44:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400e46:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400e4e:	d038      	beq.n	400ec2 <pio_configure_pin_group+0x86>
  400e50:	d809      	bhi.n	400e66 <pio_configure_pin_group+0x2a>
  400e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400e56:	d01c      	beq.n	400e92 <pio_configure_pin_group+0x56>
  400e58:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400e5c:	d025      	beq.n	400eaa <pio_configure_pin_group+0x6e>
  400e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400e62:	d150      	bne.n	400f06 <pio_configure_pin_group+0xca>
  400e64:	e009      	b.n	400e7a <pio_configure_pin_group+0x3e>
  400e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400e6a:	d03a      	beq.n	400ee2 <pio_configure_pin_group+0xa6>
  400e6c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400e70:	d037      	beq.n	400ee2 <pio_configure_pin_group+0xa6>
  400e72:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400e76:	d030      	beq.n	400eda <pio_configure_pin_group+0x9e>
  400e78:	e045      	b.n	400f06 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400e7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e7e:	462a      	mov	r2, r5
  400e80:	4b22      	ldr	r3, [pc, #136]	; (400f0c <pio_configure_pin_group+0xd0>)
  400e82:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e84:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400e88:	bf14      	ite	ne
  400e8a:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400e8c:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400e8e:	2001      	movs	r0, #1
  400e90:	e03a      	b.n	400f08 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400e92:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400e96:	462a      	mov	r2, r5
  400e98:	4b1c      	ldr	r3, [pc, #112]	; (400f0c <pio_configure_pin_group+0xd0>)
  400e9a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400e9c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400ea0:	bf14      	ite	ne
  400ea2:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ea4:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400ea6:	2001      	movs	r0, #1
  400ea8:	e02e      	b.n	400f08 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400eaa:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400eae:	462a      	mov	r2, r5
  400eb0:	4b16      	ldr	r3, [pc, #88]	; (400f0c <pio_configure_pin_group+0xd0>)
  400eb2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400eb4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400eb8:	bf14      	ite	ne
  400eba:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ebc:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400ebe:	2001      	movs	r0, #1
  400ec0:	e022      	b.n	400f08 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400ec2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400ec6:	462a      	mov	r2, r5
  400ec8:	4b10      	ldr	r3, [pc, #64]	; (400f0c <pio_configure_pin_group+0xd0>)
  400eca:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400ecc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400ed0:	bf14      	ite	ne
  400ed2:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400ed4:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400ed6:	2001      	movs	r0, #1
  400ed8:	e016      	b.n	400f08 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400eda:	4b0d      	ldr	r3, [pc, #52]	; (400f10 <pio_configure_pin_group+0xd4>)
  400edc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400ede:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400ee0:	e012      	b.n	400f08 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400ee2:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400ee6:	f004 0301 	and.w	r3, r4, #1
  400eea:	9300      	str	r3, [sp, #0]
  400eec:	4630      	mov	r0, r6
  400eee:	4629      	mov	r1, r5
  400ef0:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400ef4:	bf14      	ite	ne
  400ef6:	2200      	movne	r2, #0
  400ef8:	2201      	moveq	r2, #1
  400efa:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400efe:	4c05      	ldr	r4, [pc, #20]	; (400f14 <pio_configure_pin_group+0xd8>)
  400f00:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400f02:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400f04:	e000      	b.n	400f08 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400f06:	2000      	movs	r0, #0
	}

	return 1;
}
  400f08:	b002      	add	sp, #8
  400f0a:	bd70      	pop	{r4, r5, r6, pc}
  400f0c:	00400c21 	.word	0x00400c21
  400f10:	00400cb5 	.word	0x00400cb5
  400f14:	00400ce9 	.word	0x00400ce9

00400f18 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400f1c:	4681      	mov	r9, r0
  400f1e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400f20:	4b12      	ldr	r3, [pc, #72]	; (400f6c <pio_handler_process+0x54>)
  400f22:	4798      	blx	r3
  400f24:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400f26:	4648      	mov	r0, r9
  400f28:	4b11      	ldr	r3, [pc, #68]	; (400f70 <pio_handler_process+0x58>)
  400f2a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400f2c:	4005      	ands	r5, r0
  400f2e:	d013      	beq.n	400f58 <pio_handler_process+0x40>
  400f30:	4c10      	ldr	r4, [pc, #64]	; (400f74 <pio_handler_process+0x5c>)
  400f32:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400f36:	6823      	ldr	r3, [r4, #0]
  400f38:	4543      	cmp	r3, r8
  400f3a:	d108      	bne.n	400f4e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400f3c:	6861      	ldr	r1, [r4, #4]
  400f3e:	4229      	tst	r1, r5
  400f40:	d005      	beq.n	400f4e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400f42:	68e3      	ldr	r3, [r4, #12]
  400f44:	4640      	mov	r0, r8
  400f46:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400f48:	6863      	ldr	r3, [r4, #4]
  400f4a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400f4e:	42b4      	cmp	r4, r6
  400f50:	d002      	beq.n	400f58 <pio_handler_process+0x40>
  400f52:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400f54:	2d00      	cmp	r5, #0
  400f56:	d1ee      	bne.n	400f36 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400f58:	4b07      	ldr	r3, [pc, #28]	; (400f78 <pio_handler_process+0x60>)
  400f5a:	681b      	ldr	r3, [r3, #0]
  400f5c:	b123      	cbz	r3, 400f68 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400f5e:	4b07      	ldr	r3, [pc, #28]	; (400f7c <pio_handler_process+0x64>)
  400f60:	681b      	ldr	r3, [r3, #0]
  400f62:	b10b      	cbz	r3, 400f68 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400f64:	4648      	mov	r0, r9
  400f66:	4798      	blx	r3
  400f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f6c:	00400d11 	.word	0x00400d11
  400f70:	00400d15 	.word	0x00400d15
  400f74:	20000c30 	.word	0x20000c30
  400f78:	20000ce4 	.word	0x20000ce4
  400f7c:	20000c2c 	.word	0x20000c2c

00400f80 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400f80:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400f82:	4802      	ldr	r0, [pc, #8]	; (400f8c <PIOA_Handler+0xc>)
  400f84:	210b      	movs	r1, #11
  400f86:	4b02      	ldr	r3, [pc, #8]	; (400f90 <PIOA_Handler+0x10>)
  400f88:	4798      	blx	r3
  400f8a:	bd08      	pop	{r3, pc}
  400f8c:	400e0e00 	.word	0x400e0e00
  400f90:	00400f19 	.word	0x00400f19

00400f94 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400f94:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400f96:	4802      	ldr	r0, [pc, #8]	; (400fa0 <PIOB_Handler+0xc>)
  400f98:	210c      	movs	r1, #12
  400f9a:	4b02      	ldr	r3, [pc, #8]	; (400fa4 <PIOB_Handler+0x10>)
  400f9c:	4798      	blx	r3
  400f9e:	bd08      	pop	{r3, pc}
  400fa0:	400e1000 	.word	0x400e1000
  400fa4:	00400f19 	.word	0x00400f19

00400fa8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400fa8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400faa:	4802      	ldr	r0, [pc, #8]	; (400fb4 <PIOC_Handler+0xc>)
  400fac:	210d      	movs	r1, #13
  400fae:	4b02      	ldr	r3, [pc, #8]	; (400fb8 <PIOC_Handler+0x10>)
  400fb0:	4798      	blx	r3
  400fb2:	bd08      	pop	{r3, pc}
  400fb4:	400e1200 	.word	0x400e1200
  400fb8:	00400f19 	.word	0x00400f19

00400fbc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400fbc:	4a18      	ldr	r2, [pc, #96]	; (401020 <pmc_switch_mck_to_pllack+0x64>)
  400fbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400fc4:	4318      	orrs	r0, r3
  400fc6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400fc8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400fca:	f013 0f08 	tst.w	r3, #8
  400fce:	d003      	beq.n	400fd8 <pmc_switch_mck_to_pllack+0x1c>
  400fd0:	e009      	b.n	400fe6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400fd2:	3b01      	subs	r3, #1
  400fd4:	d103      	bne.n	400fde <pmc_switch_mck_to_pllack+0x22>
  400fd6:	e01e      	b.n	401016 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400fdc:	4910      	ldr	r1, [pc, #64]	; (401020 <pmc_switch_mck_to_pllack+0x64>)
  400fde:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400fe0:	f012 0f08 	tst.w	r2, #8
  400fe4:	d0f5      	beq.n	400fd2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400fe6:	4a0e      	ldr	r2, [pc, #56]	; (401020 <pmc_switch_mck_to_pllack+0x64>)
  400fe8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400fea:	f023 0303 	bic.w	r3, r3, #3
  400fee:	f043 0302 	orr.w	r3, r3, #2
  400ff2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ff4:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400ff6:	f010 0008 	ands.w	r0, r0, #8
  400ffa:	d004      	beq.n	401006 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400ffc:	2000      	movs	r0, #0
  400ffe:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401000:	3b01      	subs	r3, #1
  401002:	d103      	bne.n	40100c <pmc_switch_mck_to_pllack+0x50>
  401004:	e009      	b.n	40101a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401006:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40100a:	4905      	ldr	r1, [pc, #20]	; (401020 <pmc_switch_mck_to_pllack+0x64>)
  40100c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40100e:	f012 0f08 	tst.w	r2, #8
  401012:	d0f5      	beq.n	401000 <pmc_switch_mck_to_pllack+0x44>
  401014:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401016:	2001      	movs	r0, #1
  401018:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40101a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40101c:	4770      	bx	lr
  40101e:	bf00      	nop
  401020:	400e0400 	.word	0x400e0400

00401024 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401024:	b138      	cbz	r0, 401036 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401026:	4911      	ldr	r1, [pc, #68]	; (40106c <pmc_switch_mainck_to_xtal+0x48>)
  401028:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40102a:	4a11      	ldr	r2, [pc, #68]	; (401070 <pmc_switch_mainck_to_xtal+0x4c>)
  40102c:	401a      	ands	r2, r3
  40102e:	4b11      	ldr	r3, [pc, #68]	; (401074 <pmc_switch_mainck_to_xtal+0x50>)
  401030:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401032:	620b      	str	r3, [r1, #32]
  401034:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401036:	4a0d      	ldr	r2, [pc, #52]	; (40106c <pmc_switch_mainck_to_xtal+0x48>)
  401038:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40103a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40103e:	f023 0303 	bic.w	r3, r3, #3
  401042:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401046:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40104a:	0209      	lsls	r1, r1, #8
  40104c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40104e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401050:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401052:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401054:	f013 0f01 	tst.w	r3, #1
  401058:	d0fb      	beq.n	401052 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40105a:	4a04      	ldr	r2, [pc, #16]	; (40106c <pmc_switch_mainck_to_xtal+0x48>)
  40105c:	6a13      	ldr	r3, [r2, #32]
  40105e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401066:	6213      	str	r3, [r2, #32]
  401068:	4770      	bx	lr
  40106a:	bf00      	nop
  40106c:	400e0400 	.word	0x400e0400
  401070:	fec8fffc 	.word	0xfec8fffc
  401074:	01370002 	.word	0x01370002

00401078 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401078:	4b02      	ldr	r3, [pc, #8]	; (401084 <pmc_osc_is_ready_mainck+0xc>)
  40107a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40107c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401080:	4770      	bx	lr
  401082:	bf00      	nop
  401084:	400e0400 	.word	0x400e0400

00401088 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401088:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40108c:	4b01      	ldr	r3, [pc, #4]	; (401094 <pmc_disable_pllack+0xc>)
  40108e:	629a      	str	r2, [r3, #40]	; 0x28
  401090:	4770      	bx	lr
  401092:	bf00      	nop
  401094:	400e0400 	.word	0x400e0400

00401098 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401098:	4b02      	ldr	r3, [pc, #8]	; (4010a4 <pmc_is_locked_pllack+0xc>)
  40109a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40109c:	f000 0002 	and.w	r0, r0, #2
  4010a0:	4770      	bx	lr
  4010a2:	bf00      	nop
  4010a4:	400e0400 	.word	0x400e0400

004010a8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4010a8:	2822      	cmp	r0, #34	; 0x22
  4010aa:	d81e      	bhi.n	4010ea <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4010ac:	281f      	cmp	r0, #31
  4010ae:	d80c      	bhi.n	4010ca <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4010b0:	4b11      	ldr	r3, [pc, #68]	; (4010f8 <pmc_enable_periph_clk+0x50>)
  4010b2:	699a      	ldr	r2, [r3, #24]
  4010b4:	2301      	movs	r3, #1
  4010b6:	4083      	lsls	r3, r0
  4010b8:	401a      	ands	r2, r3
  4010ba:	4293      	cmp	r3, r2
  4010bc:	d017      	beq.n	4010ee <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4010be:	2301      	movs	r3, #1
  4010c0:	4083      	lsls	r3, r0
  4010c2:	4a0d      	ldr	r2, [pc, #52]	; (4010f8 <pmc_enable_periph_clk+0x50>)
  4010c4:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4010c6:	2000      	movs	r0, #0
  4010c8:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4010ca:	4b0b      	ldr	r3, [pc, #44]	; (4010f8 <pmc_enable_periph_clk+0x50>)
  4010cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4010d0:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4010d2:	2301      	movs	r3, #1
  4010d4:	4083      	lsls	r3, r0
  4010d6:	401a      	ands	r2, r3
  4010d8:	4293      	cmp	r3, r2
  4010da:	d00a      	beq.n	4010f2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4010dc:	2301      	movs	r3, #1
  4010de:	4083      	lsls	r3, r0
  4010e0:	4a05      	ldr	r2, [pc, #20]	; (4010f8 <pmc_enable_periph_clk+0x50>)
  4010e2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4010e6:	2000      	movs	r0, #0
  4010e8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4010ea:	2001      	movs	r0, #1
  4010ec:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4010ee:	2000      	movs	r0, #0
  4010f0:	4770      	bx	lr
  4010f2:	2000      	movs	r0, #0
}
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop
  4010f8:	400e0400 	.word	0x400e0400

004010fc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4010fc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4010fe:	23ac      	movs	r3, #172	; 0xac
  401100:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  401102:	680b      	ldr	r3, [r1, #0]
  401104:	684a      	ldr	r2, [r1, #4]
  401106:	fbb3 f3f2 	udiv	r3, r3, r2
  40110a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40110c:	1e5c      	subs	r4, r3, #1
  40110e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  401112:	4294      	cmp	r4, r2
  401114:	d80a      	bhi.n	40112c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  401116:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  401118:	688b      	ldr	r3, [r1, #8]
  40111a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40111c:	f240 2302 	movw	r3, #514	; 0x202
  401120:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  401124:	2350      	movs	r3, #80	; 0x50
  401126:	6003      	str	r3, [r0, #0]

	return 0;
  401128:	2000      	movs	r0, #0
  40112a:	e000      	b.n	40112e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  40112c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40112e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401132:	4770      	bx	lr

00401134 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401134:	6943      	ldr	r3, [r0, #20]
  401136:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40113a:	bf1a      	itte	ne
  40113c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40113e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  401140:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  401142:	4770      	bx	lr

00401144 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401144:	6943      	ldr	r3, [r0, #20]
  401146:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40114a:	bf1d      	ittte	ne
  40114c:	6983      	ldrne	r3, [r0, #24]
  40114e:	700b      	strbne	r3, [r1, #0]
	return 0;
  401150:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  401152:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  401154:	4770      	bx	lr
  401156:	bf00      	nop

00401158 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401158:	6943      	ldr	r3, [r0, #20]
  40115a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40115e:	bf1d      	ittte	ne
  401160:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  401164:	61c1      	strne	r1, [r0, #28]
	return 0;
  401166:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  401168:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40116a:	4770      	bx	lr

0040116c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40116c:	6943      	ldr	r3, [r0, #20]
  40116e:	f013 0f01 	tst.w	r3, #1
  401172:	d005      	beq.n	401180 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401174:	6983      	ldr	r3, [r0, #24]
  401176:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40117a:	600b      	str	r3, [r1, #0]

	return 0;
  40117c:	2000      	movs	r0, #0
  40117e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  401180:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  401182:	4770      	bx	lr

00401184 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  401184:	e7fe      	b.n	401184 <Dummy_Handler>
  401186:	bf00      	nop

00401188 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401188:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40118a:	4b20      	ldr	r3, [pc, #128]	; (40120c <Reset_Handler+0x84>)
  40118c:	4a20      	ldr	r2, [pc, #128]	; (401210 <Reset_Handler+0x88>)
  40118e:	429a      	cmp	r2, r3
  401190:	d913      	bls.n	4011ba <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401192:	4b20      	ldr	r3, [pc, #128]	; (401214 <Reset_Handler+0x8c>)
  401194:	4a1d      	ldr	r2, [pc, #116]	; (40120c <Reset_Handler+0x84>)
  401196:	429a      	cmp	r2, r3
  401198:	d21f      	bcs.n	4011da <Reset_Handler+0x52>
  40119a:	4611      	mov	r1, r2
  40119c:	3204      	adds	r2, #4
  40119e:	3303      	adds	r3, #3
  4011a0:	1a9b      	subs	r3, r3, r2
  4011a2:	f023 0303 	bic.w	r3, r3, #3
  4011a6:	3304      	adds	r3, #4
  4011a8:	4a19      	ldr	r2, [pc, #100]	; (401210 <Reset_Handler+0x88>)
  4011aa:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4011ac:	f852 0b04 	ldr.w	r0, [r2], #4
  4011b0:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  4011b4:	429a      	cmp	r2, r3
  4011b6:	d1f9      	bne.n	4011ac <Reset_Handler+0x24>
  4011b8:	e00f      	b.n	4011da <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  4011ba:	4b14      	ldr	r3, [pc, #80]	; (40120c <Reset_Handler+0x84>)
  4011bc:	4a14      	ldr	r2, [pc, #80]	; (401210 <Reset_Handler+0x88>)
  4011be:	429a      	cmp	r2, r3
  4011c0:	d20b      	bcs.n	4011da <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4011c2:	4b14      	ldr	r3, [pc, #80]	; (401214 <Reset_Handler+0x8c>)
  4011c4:	4a11      	ldr	r2, [pc, #68]	; (40120c <Reset_Handler+0x84>)
  4011c6:	1a9a      	subs	r2, r3, r2
  4011c8:	4813      	ldr	r0, [pc, #76]	; (401218 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4011ca:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4011cc:	b12a      	cbz	r2, 4011da <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  4011ce:	f851 2904 	ldr.w	r2, [r1], #-4
  4011d2:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  4011d6:	4281      	cmp	r1, r0
  4011d8:	d1f9      	bne.n	4011ce <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4011da:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4011dc:	4b0f      	ldr	r3, [pc, #60]	; (40121c <Reset_Handler+0x94>)
  4011de:	4a10      	ldr	r2, [pc, #64]	; (401220 <Reset_Handler+0x98>)
  4011e0:	429a      	cmp	r2, r3
  4011e2:	d20b      	bcs.n	4011fc <Reset_Handler+0x74>
  4011e4:	1d13      	adds	r3, r2, #4
  4011e6:	4a0f      	ldr	r2, [pc, #60]	; (401224 <Reset_Handler+0x9c>)
  4011e8:	1ad2      	subs	r2, r2, r3
  4011ea:	f022 0203 	bic.w	r2, r2, #3
  4011ee:	441a      	add	r2, r3
  4011f0:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4011f2:	2100      	movs	r1, #0
  4011f4:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4011f8:	4293      	cmp	r3, r2
  4011fa:	d1fb      	bne.n	4011f4 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  4011fc:	4b0a      	ldr	r3, [pc, #40]	; (401228 <Reset_Handler+0xa0>)
  4011fe:	4a0b      	ldr	r2, [pc, #44]	; (40122c <Reset_Handler+0xa4>)
  401200:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  401202:	4b0b      	ldr	r3, [pc, #44]	; (401230 <Reset_Handler+0xa8>)
  401204:	4798      	blx	r3

	/* Branch to main function */
	main();
  401206:	4b0b      	ldr	r3, [pc, #44]	; (401234 <Reset_Handler+0xac>)
  401208:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40120a:	e7fe      	b.n	40120a <Reset_Handler+0x82>
  40120c:	20000000 	.word	0x20000000
  401210:	00402e30 	.word	0x00402e30
  401214:	2000084c 	.word	0x2000084c
  401218:	00402e2c 	.word	0x00402e2c
  40121c:	20000cfc 	.word	0x20000cfc
  401220:	2000084c 	.word	0x2000084c
  401224:	20000cff 	.word	0x20000cff
  401228:	e000ed00 	.word	0xe000ed00
  40122c:	00400000 	.word	0x00400000
  401230:	00401719 	.word	0x00401719
  401234:	00401529 	.word	0x00401529

00401238 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401238:	4b3d      	ldr	r3, [pc, #244]	; (401330 <SystemCoreClockUpdate+0xf8>)
  40123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40123c:	f003 0303 	and.w	r3, r3, #3
  401240:	2b03      	cmp	r3, #3
  401242:	d85d      	bhi.n	401300 <SystemCoreClockUpdate+0xc8>
  401244:	e8df f003 	tbb	[pc, r3]
  401248:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40124c:	4b39      	ldr	r3, [pc, #228]	; (401334 <SystemCoreClockUpdate+0xfc>)
  40124e:	695b      	ldr	r3, [r3, #20]
  401250:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401254:	bf14      	ite	ne
  401256:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40125a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40125e:	4b36      	ldr	r3, [pc, #216]	; (401338 <SystemCoreClockUpdate+0x100>)
  401260:	601a      	str	r2, [r3, #0]
  401262:	e04d      	b.n	401300 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401264:	4b32      	ldr	r3, [pc, #200]	; (401330 <SystemCoreClockUpdate+0xf8>)
  401266:	6a1b      	ldr	r3, [r3, #32]
  401268:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40126c:	d003      	beq.n	401276 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40126e:	4a33      	ldr	r2, [pc, #204]	; (40133c <SystemCoreClockUpdate+0x104>)
  401270:	4b31      	ldr	r3, [pc, #196]	; (401338 <SystemCoreClockUpdate+0x100>)
  401272:	601a      	str	r2, [r3, #0]
  401274:	e044      	b.n	401300 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401276:	4a32      	ldr	r2, [pc, #200]	; (401340 <SystemCoreClockUpdate+0x108>)
  401278:	4b2f      	ldr	r3, [pc, #188]	; (401338 <SystemCoreClockUpdate+0x100>)
  40127a:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40127c:	4b2c      	ldr	r3, [pc, #176]	; (401330 <SystemCoreClockUpdate+0xf8>)
  40127e:	6a1b      	ldr	r3, [r3, #32]
  401280:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401284:	2b10      	cmp	r3, #16
  401286:	d002      	beq.n	40128e <SystemCoreClockUpdate+0x56>
  401288:	2b20      	cmp	r3, #32
  40128a:	d004      	beq.n	401296 <SystemCoreClockUpdate+0x5e>
  40128c:	e038      	b.n	401300 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40128e:	4a2d      	ldr	r2, [pc, #180]	; (401344 <SystemCoreClockUpdate+0x10c>)
  401290:	4b29      	ldr	r3, [pc, #164]	; (401338 <SystemCoreClockUpdate+0x100>)
  401292:	601a      	str	r2, [r3, #0]
			break;
  401294:	e034      	b.n	401300 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401296:	4a29      	ldr	r2, [pc, #164]	; (40133c <SystemCoreClockUpdate+0x104>)
  401298:	4b27      	ldr	r3, [pc, #156]	; (401338 <SystemCoreClockUpdate+0x100>)
  40129a:	601a      	str	r2, [r3, #0]
			break;
  40129c:	e030      	b.n	401300 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40129e:	4b24      	ldr	r3, [pc, #144]	; (401330 <SystemCoreClockUpdate+0xf8>)
  4012a0:	6a1b      	ldr	r3, [r3, #32]
  4012a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012a6:	d003      	beq.n	4012b0 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4012a8:	4a24      	ldr	r2, [pc, #144]	; (40133c <SystemCoreClockUpdate+0x104>)
  4012aa:	4b23      	ldr	r3, [pc, #140]	; (401338 <SystemCoreClockUpdate+0x100>)
  4012ac:	601a      	str	r2, [r3, #0]
  4012ae:	e012      	b.n	4012d6 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012b0:	4a23      	ldr	r2, [pc, #140]	; (401340 <SystemCoreClockUpdate+0x108>)
  4012b2:	4b21      	ldr	r3, [pc, #132]	; (401338 <SystemCoreClockUpdate+0x100>)
  4012b4:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4012b6:	4b1e      	ldr	r3, [pc, #120]	; (401330 <SystemCoreClockUpdate+0xf8>)
  4012b8:	6a1b      	ldr	r3, [r3, #32]
  4012ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012be:	2b10      	cmp	r3, #16
  4012c0:	d002      	beq.n	4012c8 <SystemCoreClockUpdate+0x90>
  4012c2:	2b20      	cmp	r3, #32
  4012c4:	d004      	beq.n	4012d0 <SystemCoreClockUpdate+0x98>
  4012c6:	e006      	b.n	4012d6 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4012c8:	4a1e      	ldr	r2, [pc, #120]	; (401344 <SystemCoreClockUpdate+0x10c>)
  4012ca:	4b1b      	ldr	r3, [pc, #108]	; (401338 <SystemCoreClockUpdate+0x100>)
  4012cc:	601a      	str	r2, [r3, #0]
					break;
  4012ce:	e002      	b.n	4012d6 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4012d0:	4a1a      	ldr	r2, [pc, #104]	; (40133c <SystemCoreClockUpdate+0x104>)
  4012d2:	4b19      	ldr	r3, [pc, #100]	; (401338 <SystemCoreClockUpdate+0x100>)
  4012d4:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4012d6:	4b16      	ldr	r3, [pc, #88]	; (401330 <SystemCoreClockUpdate+0xf8>)
  4012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012da:	f003 0303 	and.w	r3, r3, #3
  4012de:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4012e0:	4a13      	ldr	r2, [pc, #76]	; (401330 <SystemCoreClockUpdate+0xf8>)
  4012e2:	bf07      	ittee	eq
  4012e4:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4012e6:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4012e8:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4012ea:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4012ec:	4812      	ldr	r0, [pc, #72]	; (401338 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4012ee:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4012f2:	6803      	ldr	r3, [r0, #0]
  4012f4:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  4012f8:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4012fa:	fbb3 f3f2 	udiv	r3, r3, r2
  4012fe:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  401300:	4b0b      	ldr	r3, [pc, #44]	; (401330 <SystemCoreClockUpdate+0xf8>)
  401302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401304:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401308:	2b70      	cmp	r3, #112	; 0x70
  40130a:	d107      	bne.n	40131c <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  40130c:	4a0a      	ldr	r2, [pc, #40]	; (401338 <SystemCoreClockUpdate+0x100>)
  40130e:	6813      	ldr	r3, [r2, #0]
  401310:	490d      	ldr	r1, [pc, #52]	; (401348 <SystemCoreClockUpdate+0x110>)
  401312:	fba1 1303 	umull	r1, r3, r1, r3
  401316:	085b      	lsrs	r3, r3, #1
  401318:	6013      	str	r3, [r2, #0]
  40131a:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40131c:	4b04      	ldr	r3, [pc, #16]	; (401330 <SystemCoreClockUpdate+0xf8>)
  40131e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401320:	4905      	ldr	r1, [pc, #20]	; (401338 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401322:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  401326:	680b      	ldr	r3, [r1, #0]
  401328:	40d3      	lsrs	r3, r2
  40132a:	600b      	str	r3, [r1, #0]
  40132c:	4770      	bx	lr
  40132e:	bf00      	nop
  401330:	400e0400 	.word	0x400e0400
  401334:	400e1410 	.word	0x400e1410
  401338:	20000008 	.word	0x20000008
  40133c:	00b71b00 	.word	0x00b71b00
  401340:	003d0900 	.word	0x003d0900
  401344:	007a1200 	.word	0x007a1200
  401348:	aaaaaaab 	.word	0xaaaaaaab

0040134c <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  40134c:	4b1a      	ldr	r3, [pc, #104]	; (4013b8 <system_init_flash+0x6c>)
  40134e:	4298      	cmp	r0, r3
  401350:	d807      	bhi.n	401362 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401352:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  401356:	4a19      	ldr	r2, [pc, #100]	; (4013bc <system_init_flash+0x70>)
  401358:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40135a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40135e:	6013      	str	r3, [r2, #0]
  401360:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401362:	4b17      	ldr	r3, [pc, #92]	; (4013c0 <system_init_flash+0x74>)
  401364:	4298      	cmp	r0, r3
  401366:	d806      	bhi.n	401376 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401368:	4b16      	ldr	r3, [pc, #88]	; (4013c4 <system_init_flash+0x78>)
  40136a:	4a14      	ldr	r2, [pc, #80]	; (4013bc <system_init_flash+0x70>)
  40136c:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40136e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401372:	6013      	str	r3, [r2, #0]
  401374:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401376:	4b14      	ldr	r3, [pc, #80]	; (4013c8 <system_init_flash+0x7c>)
  401378:	4298      	cmp	r0, r3
  40137a:	d806      	bhi.n	40138a <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40137c:	4b13      	ldr	r3, [pc, #76]	; (4013cc <system_init_flash+0x80>)
  40137e:	4a0f      	ldr	r2, [pc, #60]	; (4013bc <system_init_flash+0x70>)
  401380:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401382:	f502 7200 	add.w	r2, r2, #512	; 0x200
  401386:	6013      	str	r3, [r2, #0]
  401388:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40138a:	4b11      	ldr	r3, [pc, #68]	; (4013d0 <system_init_flash+0x84>)
  40138c:	4298      	cmp	r0, r3
  40138e:	d806      	bhi.n	40139e <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401390:	4b10      	ldr	r3, [pc, #64]	; (4013d4 <system_init_flash+0x88>)
  401392:	4a0a      	ldr	r2, [pc, #40]	; (4013bc <system_init_flash+0x70>)
  401394:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401396:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40139a:	6013      	str	r3, [r2, #0]
  40139c:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40139e:	4b0e      	ldr	r3, [pc, #56]	; (4013d8 <system_init_flash+0x8c>)
  4013a0:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4013a2:	bf94      	ite	ls
  4013a4:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4013a8:	4b0c      	ldrhi	r3, [pc, #48]	; (4013dc <system_init_flash+0x90>)
  4013aa:	4a04      	ldr	r2, [pc, #16]	; (4013bc <system_init_flash+0x70>)
  4013ac:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4013ae:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4013b2:	6013      	str	r3, [r2, #0]
  4013b4:	4770      	bx	lr
  4013b6:	bf00      	nop
  4013b8:	01312cff 	.word	0x01312cff
  4013bc:	400e0a00 	.word	0x400e0a00
  4013c0:	026259ff 	.word	0x026259ff
  4013c4:	04000100 	.word	0x04000100
  4013c8:	039386ff 	.word	0x039386ff
  4013cc:	04000200 	.word	0x04000200
  4013d0:	04c4b3ff 	.word	0x04c4b3ff
  4013d4:	04000300 	.word	0x04000300
  4013d8:	05f5e0ff 	.word	0x05f5e0ff
  4013dc:	04000500 	.word	0x04000500

004013e0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4013e0:	4b09      	ldr	r3, [pc, #36]	; (401408 <_sbrk+0x28>)
  4013e2:	681b      	ldr	r3, [r3, #0]
  4013e4:	b913      	cbnz	r3, 4013ec <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4013e6:	4a09      	ldr	r2, [pc, #36]	; (40140c <_sbrk+0x2c>)
  4013e8:	4b07      	ldr	r3, [pc, #28]	; (401408 <_sbrk+0x28>)
  4013ea:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4013ec:	4b06      	ldr	r3, [pc, #24]	; (401408 <_sbrk+0x28>)
  4013ee:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4013f0:	181a      	adds	r2, r3, r0
  4013f2:	4907      	ldr	r1, [pc, #28]	; (401410 <_sbrk+0x30>)
  4013f4:	4291      	cmp	r1, r2
  4013f6:	db04      	blt.n	401402 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4013f8:	4610      	mov	r0, r2
  4013fa:	4a03      	ldr	r2, [pc, #12]	; (401408 <_sbrk+0x28>)
  4013fc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4013fe:	4618      	mov	r0, r3
  401400:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  401402:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  401406:	4770      	bx	lr
  401408:	20000ca0 	.word	0x20000ca0
  40140c:	20003d00 	.word	0x20003d00
  401410:	20027ffc 	.word	0x20027ffc

00401414 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401414:	f04f 30ff 	mov.w	r0, #4294967295
  401418:	4770      	bx	lr
  40141a:	bf00      	nop

0040141c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40141c:	2000      	movs	r0, #0
  40141e:	4770      	bx	lr

00401420 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401420:	b5f0      	push	{r4, r5, r6, r7, lr}
  401422:	b083      	sub	sp, #12
  401424:	4605      	mov	r5, r0
  401426:	460c      	mov	r4, r1
	uint32_t val = 0;
  401428:	2300      	movs	r3, #0
  40142a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40142c:	4b18      	ldr	r3, [pc, #96]	; (401490 <usart_serial_getchar+0x70>)
  40142e:	4298      	cmp	r0, r3
  401430:	d107      	bne.n	401442 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  401432:	461f      	mov	r7, r3
  401434:	4e17      	ldr	r6, [pc, #92]	; (401494 <usart_serial_getchar+0x74>)
  401436:	4638      	mov	r0, r7
  401438:	4621      	mov	r1, r4
  40143a:	47b0      	blx	r6
  40143c:	2800      	cmp	r0, #0
  40143e:	d1fa      	bne.n	401436 <usart_serial_getchar+0x16>
  401440:	e017      	b.n	401472 <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401442:	4b15      	ldr	r3, [pc, #84]	; (401498 <usart_serial_getchar+0x78>)
  401444:	4298      	cmp	r0, r3
  401446:	d107      	bne.n	401458 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  401448:	461e      	mov	r6, r3
  40144a:	4d12      	ldr	r5, [pc, #72]	; (401494 <usart_serial_getchar+0x74>)
  40144c:	4630      	mov	r0, r6
  40144e:	4621      	mov	r1, r4
  401450:	47a8      	blx	r5
  401452:	2800      	cmp	r0, #0
  401454:	d1fa      	bne.n	40144c <usart_serial_getchar+0x2c>
  401456:	e018      	b.n	40148a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401458:	4b10      	ldr	r3, [pc, #64]	; (40149c <usart_serial_getchar+0x7c>)
  40145a:	4298      	cmp	r0, r3
  40145c:	d109      	bne.n	401472 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40145e:	461e      	mov	r6, r3
  401460:	4d0f      	ldr	r5, [pc, #60]	; (4014a0 <usart_serial_getchar+0x80>)
  401462:	4630      	mov	r0, r6
  401464:	a901      	add	r1, sp, #4
  401466:	47a8      	blx	r5
  401468:	2800      	cmp	r0, #0
  40146a:	d1fa      	bne.n	401462 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  40146c:	9b01      	ldr	r3, [sp, #4]
  40146e:	7023      	strb	r3, [r4, #0]
  401470:	e00b      	b.n	40148a <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401472:	4b0c      	ldr	r3, [pc, #48]	; (4014a4 <usart_serial_getchar+0x84>)
  401474:	429d      	cmp	r5, r3
  401476:	d108      	bne.n	40148a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  401478:	461e      	mov	r6, r3
  40147a:	4d09      	ldr	r5, [pc, #36]	; (4014a0 <usart_serial_getchar+0x80>)
  40147c:	4630      	mov	r0, r6
  40147e:	a901      	add	r1, sp, #4
  401480:	47a8      	blx	r5
  401482:	2800      	cmp	r0, #0
  401484:	d1fa      	bne.n	40147c <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  401486:	9b01      	ldr	r3, [sp, #4]
  401488:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40148a:	b003      	add	sp, #12
  40148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40148e:	bf00      	nop
  401490:	400e0600 	.word	0x400e0600
  401494:	00401145 	.word	0x00401145
  401498:	400e0800 	.word	0x400e0800
  40149c:	40024000 	.word	0x40024000
  4014a0:	0040116d 	.word	0x0040116d
  4014a4:	40028000 	.word	0x40028000

004014a8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4014a8:	b570      	push	{r4, r5, r6, lr}
  4014aa:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4014ac:	4b18      	ldr	r3, [pc, #96]	; (401510 <usart_serial_putchar+0x68>)
  4014ae:	4298      	cmp	r0, r3
  4014b0:	d108      	bne.n	4014c4 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  4014b2:	461e      	mov	r6, r3
  4014b4:	4d17      	ldr	r5, [pc, #92]	; (401514 <usart_serial_putchar+0x6c>)
  4014b6:	4630      	mov	r0, r6
  4014b8:	4621      	mov	r1, r4
  4014ba:	47a8      	blx	r5
  4014bc:	2800      	cmp	r0, #0
  4014be:	d1fa      	bne.n	4014b6 <usart_serial_putchar+0xe>
		return 1;
  4014c0:	2001      	movs	r0, #1
  4014c2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4014c4:	4b14      	ldr	r3, [pc, #80]	; (401518 <usart_serial_putchar+0x70>)
  4014c6:	4298      	cmp	r0, r3
  4014c8:	d108      	bne.n	4014dc <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  4014ca:	461e      	mov	r6, r3
  4014cc:	4d11      	ldr	r5, [pc, #68]	; (401514 <usart_serial_putchar+0x6c>)
  4014ce:	4630      	mov	r0, r6
  4014d0:	4621      	mov	r1, r4
  4014d2:	47a8      	blx	r5
  4014d4:	2800      	cmp	r0, #0
  4014d6:	d1fa      	bne.n	4014ce <usart_serial_putchar+0x26>
		return 1;
  4014d8:	2001      	movs	r0, #1
  4014da:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4014dc:	4b0f      	ldr	r3, [pc, #60]	; (40151c <usart_serial_putchar+0x74>)
  4014de:	4298      	cmp	r0, r3
  4014e0:	d108      	bne.n	4014f4 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  4014e2:	461e      	mov	r6, r3
  4014e4:	4d0e      	ldr	r5, [pc, #56]	; (401520 <usart_serial_putchar+0x78>)
  4014e6:	4630      	mov	r0, r6
  4014e8:	4621      	mov	r1, r4
  4014ea:	47a8      	blx	r5
  4014ec:	2800      	cmp	r0, #0
  4014ee:	d1fa      	bne.n	4014e6 <usart_serial_putchar+0x3e>
		return 1;
  4014f0:	2001      	movs	r0, #1
  4014f2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4014f4:	4b0b      	ldr	r3, [pc, #44]	; (401524 <usart_serial_putchar+0x7c>)
  4014f6:	4298      	cmp	r0, r3
  4014f8:	d108      	bne.n	40150c <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  4014fa:	461e      	mov	r6, r3
  4014fc:	4d08      	ldr	r5, [pc, #32]	; (401520 <usart_serial_putchar+0x78>)
  4014fe:	4630      	mov	r0, r6
  401500:	4621      	mov	r1, r4
  401502:	47a8      	blx	r5
  401504:	2800      	cmp	r0, #0
  401506:	d1fa      	bne.n	4014fe <usart_serial_putchar+0x56>
		return 1;
  401508:	2001      	movs	r0, #1
  40150a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  40150c:	2000      	movs	r0, #0
}
  40150e:	bd70      	pop	{r4, r5, r6, pc}
  401510:	400e0600 	.word	0x400e0600
  401514:	00401135 	.word	0x00401135
  401518:	400e0800 	.word	0x400e0800
  40151c:	40024000 	.word	0x40024000
  401520:	00401159 	.word	0x00401159
  401524:	40028000 	.word	0x40028000

00401528 <main>:
 * \brief Application entry point for smc_lcd example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  401528:	b580      	push	{r7, lr}
  40152a:	b084      	sub	sp, #16
	sysclk_init();
  40152c:	4b55      	ldr	r3, [pc, #340]	; (401684 <main+0x15c>)
  40152e:	4798      	blx	r3
	board_init();
  401530:	4b55      	ldr	r3, [pc, #340]	; (401688 <main+0x160>)
  401532:	4798      	blx	r3
  401534:	2008      	movs	r0, #8
  401536:	4c55      	ldr	r4, [pc, #340]	; (40168c <main+0x164>)
  401538:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40153a:	4d55      	ldr	r5, [pc, #340]	; (401690 <main+0x168>)
  40153c:	4b55      	ldr	r3, [pc, #340]	; (401694 <main+0x16c>)
  40153e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401540:	4a55      	ldr	r2, [pc, #340]	; (401698 <main+0x170>)
  401542:	4b56      	ldr	r3, [pc, #344]	; (40169c <main+0x174>)
  401544:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401546:	4a56      	ldr	r2, [pc, #344]	; (4016a0 <main+0x178>)
  401548:	4b56      	ldr	r3, [pc, #344]	; (4016a4 <main+0x17c>)
  40154a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  40154c:	4b56      	ldr	r3, [pc, #344]	; (4016a8 <main+0x180>)
  40154e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  401550:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  401554:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  401556:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40155a:	9303      	str	r3, [sp, #12]
  40155c:	2008      	movs	r0, #8
  40155e:	47a0      	blx	r4
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  401560:	4628      	mov	r0, r5
  401562:	a901      	add	r1, sp, #4
  401564:	4b51      	ldr	r3, [pc, #324]	; (4016ac <main+0x184>)
  401566:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401568:	4e51      	ldr	r6, [pc, #324]	; (4016b0 <main+0x188>)
  40156a:	6833      	ldr	r3, [r6, #0]
  40156c:	6898      	ldr	r0, [r3, #8]
  40156e:	2100      	movs	r1, #0
  401570:	4d50      	ldr	r5, [pc, #320]	; (4016b4 <main+0x18c>)
  401572:	47a8      	blx	r5
	setbuf(stdin, NULL);
  401574:	6833      	ldr	r3, [r6, #0]
  401576:	6858      	ldr	r0, [r3, #4]
  401578:	2100      	movs	r1, #0
  40157a:	47a8      	blx	r5

	/** Initialize debug console */
	configure_console();

	/** Enable peripheral clock */
	pmc_enable_periph_clk(ID_SMC);
  40157c:	200a      	movs	r0, #10
  40157e:	47a0      	blx	r4

	/** Configure SMC interface for Lcd */
	smc_set_setup_timing(SMC, ILI93XX_LCD_CS, SMC_SETUP_NWE_SETUP(2)
  401580:	4c4d      	ldr	r4, [pc, #308]	; (4016b8 <main+0x190>)
  401582:	4620      	mov	r0, r4
  401584:	2101      	movs	r1, #1
  401586:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
  40158a:	4b4c      	ldr	r3, [pc, #304]	; (4016bc <main+0x194>)
  40158c:	4798      	blx	r3
			| SMC_SETUP_NCS_WR_SETUP(2)
			| SMC_SETUP_NRD_SETUP(2)
			| SMC_SETUP_NCS_RD_SETUP(2));
	smc_set_pulse_timing(SMC, ILI93XX_LCD_CS, SMC_PULSE_NWE_PULSE(4)
  40158e:	4620      	mov	r0, r4
  401590:	2101      	movs	r1, #1
  401592:	4a4b      	ldr	r2, [pc, #300]	; (4016c0 <main+0x198>)
  401594:	4b4b      	ldr	r3, [pc, #300]	; (4016c4 <main+0x19c>)
  401596:	4798      	blx	r3
			| SMC_PULSE_NCS_WR_PULSE(4)
			| SMC_PULSE_NRD_PULSE(10)
			| SMC_PULSE_NCS_RD_PULSE(10));
	smc_set_cycle_timing(SMC, ILI93XX_LCD_CS, SMC_CYCLE_NWE_CYCLE(10)
  401598:	4620      	mov	r0, r4
  40159a:	2101      	movs	r1, #1
  40159c:	4a4a      	ldr	r2, [pc, #296]	; (4016c8 <main+0x1a0>)
  40159e:	4b4b      	ldr	r3, [pc, #300]	; (4016cc <main+0x1a4>)
  4015a0:	4798      	blx	r3
#if ((!defined(SAM4S)) && (!defined(SAM4E)))
	smc_set_mode(SMC, ILI93XX_LCD_CS, SMC_MODE_READ_MODE
			| SMC_MODE_WRITE_MODE
			| SMC_MODE_DBW_8_BIT);
#else
	smc_set_mode(SMC, ILI93XX_LCD_CS, SMC_MODE_READ_MODE
  4015a2:	4620      	mov	r0, r4
  4015a4:	2101      	movs	r1, #1
  4015a6:	2203      	movs	r2, #3
  4015a8:	4b49      	ldr	r3, [pc, #292]	; (4016d0 <main+0x1a8>)
  4015aa:	4798      	blx	r3
			| SMC_MODE_WRITE_MODE);
#endif
	/** Initialize display parameter */
	g_ili93xx_display_opt.ul_width = ILI93XX_LCD_WIDTH;
  4015ac:	4e49      	ldr	r6, [pc, #292]	; (4016d4 <main+0x1ac>)
  4015ae:	25f0      	movs	r5, #240	; 0xf0
  4015b0:	6035      	str	r5, [r6, #0]
	g_ili93xx_display_opt.ul_height = ILI93XX_LCD_HEIGHT;
  4015b2:	f44f 77a0 	mov.w	r7, #320	; 0x140
  4015b6:	6077      	str	r7, [r6, #4]
	g_ili93xx_display_opt.foreground_color = COLOR_BLACK;
  4015b8:	2400      	movs	r4, #0
  4015ba:	60b4      	str	r4, [r6, #8]
	g_ili93xx_display_opt.background_color = COLOR_WHITE;
  4015bc:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
  4015c0:	f8c6 800c 	str.w	r8, [r6, #12]

	/** Switch off backlight */
	aat31xx_disable_backlight();
  4015c4:	4b44      	ldr	r3, [pc, #272]	; (4016d8 <main+0x1b0>)
  4015c6:	4798      	blx	r3

	/** Initialize LCD */
	ili93xx_init(&g_ili93xx_display_opt);
  4015c8:	4630      	mov	r0, r6
  4015ca:	4b44      	ldr	r3, [pc, #272]	; (4016dc <main+0x1b4>)
  4015cc:	4798      	blx	r3

	/** Set backlight level */
	aat31xx_set_backlight(AAT31XX_AVG_BACKLIGHT_LEVEL);
  4015ce:	2008      	movs	r0, #8
  4015d0:	4b43      	ldr	r3, [pc, #268]	; (4016e0 <main+0x1b8>)
  4015d2:	4798      	blx	r3

	ili93xx_set_foreground_color(COLOR_WHITE);
  4015d4:	4640      	mov	r0, r8
  4015d6:	4e43      	ldr	r6, [pc, #268]	; (4016e4 <main+0x1bc>)
  4015d8:	47b0      	blx	r6
	ili93xx_draw_filled_rectangle(0, 0, ILI93XX_LCD_WIDTH,
  4015da:	4620      	mov	r0, r4
  4015dc:	4621      	mov	r1, r4
  4015de:	462a      	mov	r2, r5
  4015e0:	463b      	mov	r3, r7
  4015e2:	4f41      	ldr	r7, [pc, #260]	; (4016e8 <main+0x1c0>)
  4015e4:	47b8      	blx	r7
			ILI93XX_LCD_HEIGHT);
	/** Turn on LCD */
	ili93xx_display_on();
  4015e6:	4b41      	ldr	r3, [pc, #260]	; (4016ec <main+0x1c4>)
  4015e8:	4798      	blx	r3
	ili93xx_set_cursor_position(0, 0);
  4015ea:	4620      	mov	r0, r4
  4015ec:	4621      	mov	r1, r4
  4015ee:	4b40      	ldr	r3, [pc, #256]	; (4016f0 <main+0x1c8>)
  4015f0:	4798      	blx	r3

	/** Draw text, image and basic shapes on the LCD */
	ili93xx_set_foreground_color(COLOR_BLACK);
  4015f2:	4620      	mov	r0, r4
  4015f4:	47b0      	blx	r6
	ili93xx_draw_string(10, 20, (uint8_t *)"Display 13 LCD");
  4015f6:	200a      	movs	r0, #10
  4015f8:	2114      	movs	r1, #20
  4015fa:	4a3e      	ldr	r2, [pc, #248]	; (4016f4 <main+0x1cc>)
  4015fc:	4f3e      	ldr	r7, [pc, #248]	; (4016f8 <main+0x1d0>)
  4015fe:	47b8      	blx	r7
	ili93xx_set_foreground_color(COLOR_GREEN);
  401600:	f44f 407f 	mov.w	r0, #65280	; 0xff00
  401604:	47b0      	blx	r6
	ili93xx_draw_string(10, 40, (uint8_t *)"Felipe Baldim ");
  401606:	200a      	movs	r0, #10
  401608:	2128      	movs	r1, #40	; 0x28
  40160a:	4a3c      	ldr	r2, [pc, #240]	; (4016fc <main+0x1d4>)
  40160c:	47b8      	blx	r7
	ili93xx_set_foreground_color(COLOR_BLUE);
  40160e:	20ff      	movs	r0, #255	; 0xff
  401610:	47b0      	blx	r6
	ili93xx_draw_string(10, 60, (uint8_t *)"Guilherme Martines");
  401612:	200a      	movs	r0, #10
  401614:	213c      	movs	r1, #60	; 0x3c
  401616:	4a3a      	ldr	r2, [pc, #232]	; (401700 <main+0x1d8>)
  401618:	47b8      	blx	r7
	ili93xx_set_foreground_color(COLOR_RED);
  40161a:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
  40161e:	47b0      	blx	r6
	ili93xx_draw_string(10, 80, (uint8_t *)"Patricia Molina");
  401620:	200a      	movs	r0, #10
  401622:	2150      	movs	r1, #80	; 0x50
  401624:	4a37      	ldr	r2, [pc, #220]	; (401704 <main+0x1dc>)
  401626:	47b8      	blx	r7
	ili93xx_set_foreground_color(COLOR_BLACK);
  401628:	4620      	mov	r0, r4
  40162a:	47b0      	blx	r6
	ili93xx_draw_string(230, 300, (uint8_t *)"s");
  40162c:	20e6      	movs	r0, #230	; 0xe6
  40162e:	f44f 7196 	mov.w	r1, #300	; 0x12c
  401632:	4a35      	ldr	r2, [pc, #212]	; (401708 <main+0x1e0>)
  401634:	47b8      	blx	r7
	ili93xx_set_foreground_color(COLOR_BLUEVIOLET);
  401636:	4835      	ldr	r0, [pc, #212]	; (40170c <main+0x1e4>)
  401638:	47b0      	blx	r6
	ili93xx_draw_line(0,100,240,100);
  40163a:	4620      	mov	r0, r4
  40163c:	2164      	movs	r1, #100	; 0x64
  40163e:	462a      	mov	r2, r5
  401640:	460b      	mov	r3, r1
  401642:	4e33      	ldr	r6, [pc, #204]	; (401710 <main+0x1e8>)
  401644:	47b0      	blx	r6
	ili93xx_draw_line(0,101,240,101);
  401646:	4620      	mov	r0, r4
  401648:	2165      	movs	r1, #101	; 0x65
  40164a:	462a      	mov	r2, r5
  40164c:	460b      	mov	r3, r1
  40164e:	47b0      	blx	r6
	ili93xx_draw_line(0,102,240,102);
  401650:	4620      	mov	r0, r4
  401652:	2166      	movs	r1, #102	; 0x66
  401654:	462a      	mov	r2, r5
  401656:	460b      	mov	r3, r1
  401658:	47b0      	blx	r6
	ili93xx_draw_line(0,103,240,103);
  40165a:	4620      	mov	r0, r4
  40165c:	2167      	movs	r1, #103	; 0x67
  40165e:	462a      	mov	r2, r5
  401660:	460b      	mov	r3, r1
  401662:	47b0      	blx	r6
	ili93xx_draw_line(0,104,240,104);
  401664:	4620      	mov	r0, r4
  401666:	2168      	movs	r1, #104	; 0x68
  401668:	462a      	mov	r2, r5
  40166a:	460b      	mov	r3, r1
  40166c:	47b0      	blx	r6
	ili93xx_draw_line(0,105,240,105);
  40166e:	4620      	mov	r0, r4
  401670:	2169      	movs	r1, #105	; 0x69
  401672:	462a      	mov	r2, r5
  401674:	460b      	mov	r3, r1
  401676:	47b0      	blx	r6
	ili93xx_draw_string(60, 108, (uint8_t *)"Velocidade");
  401678:	203c      	movs	r0, #60	; 0x3c
  40167a:	216c      	movs	r1, #108	; 0x6c
  40167c:	4a25      	ldr	r2, [pc, #148]	; (401714 <main+0x1ec>)
  40167e:	47b8      	blx	r7

	while (1) {
	}
  401680:	e7fe      	b.n	401680 <main+0x158>
  401682:	bf00      	nop
  401684:	00400129 	.word	0x00400129
  401688:	00400219 	.word	0x00400219
  40168c:	004010a9 	.word	0x004010a9
  401690:	400e0600 	.word	0x400e0600
  401694:	20000ce0 	.word	0x20000ce0
  401698:	004014a9 	.word	0x004014a9
  40169c:	20000cdc 	.word	0x20000cdc
  4016a0:	00401421 	.word	0x00401421
  4016a4:	20000cd8 	.word	0x20000cd8
  4016a8:	07270e00 	.word	0x07270e00
  4016ac:	004010fd 	.word	0x004010fd
  4016b0:	20000438 	.word	0x20000438
  4016b4:	00401805 	.word	0x00401805
  4016b8:	400e0000 	.word	0x400e0000
  4016bc:	00400c01 	.word	0x00400c01
  4016c0:	0a0a0404 	.word	0x0a0a0404
  4016c4:	00400c09 	.word	0x00400c09
  4016c8:	0016000a 	.word	0x0016000a
  4016cc:	00400c11 	.word	0x00400c11
  4016d0:	00400c19 	.word	0x00400c19
  4016d4:	20000ce8 	.word	0x20000ce8
  4016d8:	0040032d 	.word	0x0040032d
  4016dc:	00400665 	.word	0x00400665
  4016e0:	004002d1 	.word	0x004002d1
  4016e4:	00400585 	.word	0x00400585
  4016e8:	004009c5 	.word	0x004009c5
  4016ec:	00400551 	.word	0x00400551
  4016f0:	00400641 	.word	0x00400641
  4016f4:	00402db0 	.word	0x00402db0
  4016f8:	00400b55 	.word	0x00400b55
  4016fc:	00402dc0 	.word	0x00402dc0
  401700:	00402dd0 	.word	0x00402dd0
  401704:	00402de4 	.word	0x00402de4
  401708:	00402df4 	.word	0x00402df4
  40170c:	008a2be2 	.word	0x008a2be2
  401710:	00400a89 	.word	0x00400a89
  401714:	00402df8 	.word	0x00402df8

00401718 <__libc_init_array>:
  401718:	b570      	push	{r4, r5, r6, lr}
  40171a:	4e0f      	ldr	r6, [pc, #60]	; (401758 <__libc_init_array+0x40>)
  40171c:	4d0f      	ldr	r5, [pc, #60]	; (40175c <__libc_init_array+0x44>)
  40171e:	1b76      	subs	r6, r6, r5
  401720:	10b6      	asrs	r6, r6, #2
  401722:	bf18      	it	ne
  401724:	2400      	movne	r4, #0
  401726:	d005      	beq.n	401734 <__libc_init_array+0x1c>
  401728:	3401      	adds	r4, #1
  40172a:	f855 3b04 	ldr.w	r3, [r5], #4
  40172e:	4798      	blx	r3
  401730:	42a6      	cmp	r6, r4
  401732:	d1f9      	bne.n	401728 <__libc_init_array+0x10>
  401734:	4e0a      	ldr	r6, [pc, #40]	; (401760 <__libc_init_array+0x48>)
  401736:	4d0b      	ldr	r5, [pc, #44]	; (401764 <__libc_init_array+0x4c>)
  401738:	1b76      	subs	r6, r6, r5
  40173a:	f001 fb67 	bl	402e0c <_init>
  40173e:	10b6      	asrs	r6, r6, #2
  401740:	bf18      	it	ne
  401742:	2400      	movne	r4, #0
  401744:	d006      	beq.n	401754 <__libc_init_array+0x3c>
  401746:	3401      	adds	r4, #1
  401748:	f855 3b04 	ldr.w	r3, [r5], #4
  40174c:	4798      	blx	r3
  40174e:	42a6      	cmp	r6, r4
  401750:	d1f9      	bne.n	401746 <__libc_init_array+0x2e>
  401752:	bd70      	pop	{r4, r5, r6, pc}
  401754:	bd70      	pop	{r4, r5, r6, pc}
  401756:	bf00      	nop
  401758:	00402e18 	.word	0x00402e18
  40175c:	00402e18 	.word	0x00402e18
  401760:	00402e20 	.word	0x00402e20
  401764:	00402e18 	.word	0x00402e18

00401768 <memset>:
  401768:	b470      	push	{r4, r5, r6}
  40176a:	0784      	lsls	r4, r0, #30
  40176c:	d046      	beq.n	4017fc <memset+0x94>
  40176e:	1e54      	subs	r4, r2, #1
  401770:	2a00      	cmp	r2, #0
  401772:	d041      	beq.n	4017f8 <memset+0x90>
  401774:	b2cd      	uxtb	r5, r1
  401776:	4603      	mov	r3, r0
  401778:	e002      	b.n	401780 <memset+0x18>
  40177a:	1e62      	subs	r2, r4, #1
  40177c:	b3e4      	cbz	r4, 4017f8 <memset+0x90>
  40177e:	4614      	mov	r4, r2
  401780:	f803 5b01 	strb.w	r5, [r3], #1
  401784:	079a      	lsls	r2, r3, #30
  401786:	d1f8      	bne.n	40177a <memset+0x12>
  401788:	2c03      	cmp	r4, #3
  40178a:	d92e      	bls.n	4017ea <memset+0x82>
  40178c:	b2cd      	uxtb	r5, r1
  40178e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401792:	2c0f      	cmp	r4, #15
  401794:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401798:	d919      	bls.n	4017ce <memset+0x66>
  40179a:	f103 0210 	add.w	r2, r3, #16
  40179e:	4626      	mov	r6, r4
  4017a0:	3e10      	subs	r6, #16
  4017a2:	2e0f      	cmp	r6, #15
  4017a4:	f842 5c10 	str.w	r5, [r2, #-16]
  4017a8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4017ac:	f842 5c08 	str.w	r5, [r2, #-8]
  4017b0:	f842 5c04 	str.w	r5, [r2, #-4]
  4017b4:	f102 0210 	add.w	r2, r2, #16
  4017b8:	d8f2      	bhi.n	4017a0 <memset+0x38>
  4017ba:	f1a4 0210 	sub.w	r2, r4, #16
  4017be:	f022 020f 	bic.w	r2, r2, #15
  4017c2:	f004 040f 	and.w	r4, r4, #15
  4017c6:	3210      	adds	r2, #16
  4017c8:	2c03      	cmp	r4, #3
  4017ca:	4413      	add	r3, r2
  4017cc:	d90d      	bls.n	4017ea <memset+0x82>
  4017ce:	461e      	mov	r6, r3
  4017d0:	4622      	mov	r2, r4
  4017d2:	3a04      	subs	r2, #4
  4017d4:	2a03      	cmp	r2, #3
  4017d6:	f846 5b04 	str.w	r5, [r6], #4
  4017da:	d8fa      	bhi.n	4017d2 <memset+0x6a>
  4017dc:	1f22      	subs	r2, r4, #4
  4017de:	f022 0203 	bic.w	r2, r2, #3
  4017e2:	3204      	adds	r2, #4
  4017e4:	4413      	add	r3, r2
  4017e6:	f004 0403 	and.w	r4, r4, #3
  4017ea:	b12c      	cbz	r4, 4017f8 <memset+0x90>
  4017ec:	b2c9      	uxtb	r1, r1
  4017ee:	441c      	add	r4, r3
  4017f0:	f803 1b01 	strb.w	r1, [r3], #1
  4017f4:	42a3      	cmp	r3, r4
  4017f6:	d1fb      	bne.n	4017f0 <memset+0x88>
  4017f8:	bc70      	pop	{r4, r5, r6}
  4017fa:	4770      	bx	lr
  4017fc:	4614      	mov	r4, r2
  4017fe:	4603      	mov	r3, r0
  401800:	e7c2      	b.n	401788 <memset+0x20>
  401802:	bf00      	nop

00401804 <setbuf>:
  401804:	2900      	cmp	r1, #0
  401806:	bf0c      	ite	eq
  401808:	2202      	moveq	r2, #2
  40180a:	2200      	movne	r2, #0
  40180c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401810:	f000 b800 	b.w	401814 <setvbuf>

00401814 <setvbuf>:
  401814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401818:	4c3a      	ldr	r4, [pc, #232]	; (401904 <setvbuf+0xf0>)
  40181a:	6826      	ldr	r6, [r4, #0]
  40181c:	460d      	mov	r5, r1
  40181e:	4604      	mov	r4, r0
  401820:	4690      	mov	r8, r2
  401822:	461f      	mov	r7, r3
  401824:	b116      	cbz	r6, 40182c <setvbuf+0x18>
  401826:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  401828:	2b00      	cmp	r3, #0
  40182a:	d03c      	beq.n	4018a6 <setvbuf+0x92>
  40182c:	f1b8 0f02 	cmp.w	r8, #2
  401830:	d82f      	bhi.n	401892 <setvbuf+0x7e>
  401832:	2f00      	cmp	r7, #0
  401834:	db2d      	blt.n	401892 <setvbuf+0x7e>
  401836:	4621      	mov	r1, r4
  401838:	4630      	mov	r0, r6
  40183a:	f000 f921 	bl	401a80 <_fflush_r>
  40183e:	89a1      	ldrh	r1, [r4, #12]
  401840:	2300      	movs	r3, #0
  401842:	6063      	str	r3, [r4, #4]
  401844:	61a3      	str	r3, [r4, #24]
  401846:	060b      	lsls	r3, r1, #24
  401848:	d427      	bmi.n	40189a <setvbuf+0x86>
  40184a:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  40184e:	b289      	uxth	r1, r1
  401850:	f1b8 0f02 	cmp.w	r8, #2
  401854:	81a1      	strh	r1, [r4, #12]
  401856:	d02a      	beq.n	4018ae <setvbuf+0x9a>
  401858:	2d00      	cmp	r5, #0
  40185a:	d036      	beq.n	4018ca <setvbuf+0xb6>
  40185c:	f1b8 0f01 	cmp.w	r8, #1
  401860:	d011      	beq.n	401886 <setvbuf+0x72>
  401862:	b289      	uxth	r1, r1
  401864:	f001 0008 	and.w	r0, r1, #8
  401868:	4b27      	ldr	r3, [pc, #156]	; (401908 <setvbuf+0xf4>)
  40186a:	63f3      	str	r3, [r6, #60]	; 0x3c
  40186c:	b280      	uxth	r0, r0
  40186e:	6025      	str	r5, [r4, #0]
  401870:	6125      	str	r5, [r4, #16]
  401872:	6167      	str	r7, [r4, #20]
  401874:	b178      	cbz	r0, 401896 <setvbuf+0x82>
  401876:	f011 0f03 	tst.w	r1, #3
  40187a:	bf18      	it	ne
  40187c:	2700      	movne	r7, #0
  40187e:	60a7      	str	r7, [r4, #8]
  401880:	2000      	movs	r0, #0
  401882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401886:	f041 0101 	orr.w	r1, r1, #1
  40188a:	427b      	negs	r3, r7
  40188c:	81a1      	strh	r1, [r4, #12]
  40188e:	61a3      	str	r3, [r4, #24]
  401890:	e7e7      	b.n	401862 <setvbuf+0x4e>
  401892:	f04f 30ff 	mov.w	r0, #4294967295
  401896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40189a:	6921      	ldr	r1, [r4, #16]
  40189c:	4630      	mov	r0, r6
  40189e:	f000 f9f1 	bl	401c84 <_free_r>
  4018a2:	89a1      	ldrh	r1, [r4, #12]
  4018a4:	e7d1      	b.n	40184a <setvbuf+0x36>
  4018a6:	4630      	mov	r0, r6
  4018a8:	f000 f97e 	bl	401ba8 <__sinit>
  4018ac:	e7be      	b.n	40182c <setvbuf+0x18>
  4018ae:	2000      	movs	r0, #0
  4018b0:	f104 0343 	add.w	r3, r4, #67	; 0x43
  4018b4:	f041 0102 	orr.w	r1, r1, #2
  4018b8:	2500      	movs	r5, #0
  4018ba:	2201      	movs	r2, #1
  4018bc:	81a1      	strh	r1, [r4, #12]
  4018be:	60a5      	str	r5, [r4, #8]
  4018c0:	6023      	str	r3, [r4, #0]
  4018c2:	6123      	str	r3, [r4, #16]
  4018c4:	6162      	str	r2, [r4, #20]
  4018c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018ca:	2f00      	cmp	r7, #0
  4018cc:	bf08      	it	eq
  4018ce:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  4018d2:	4638      	mov	r0, r7
  4018d4:	f000 fad8 	bl	401e88 <malloc>
  4018d8:	4605      	mov	r5, r0
  4018da:	b128      	cbz	r0, 4018e8 <setvbuf+0xd4>
  4018dc:	89a1      	ldrh	r1, [r4, #12]
  4018de:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4018e2:	b289      	uxth	r1, r1
  4018e4:	81a1      	strh	r1, [r4, #12]
  4018e6:	e7b9      	b.n	40185c <setvbuf+0x48>
  4018e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4018ec:	f000 facc 	bl	401e88 <malloc>
  4018f0:	4605      	mov	r5, r0
  4018f2:	b918      	cbnz	r0, 4018fc <setvbuf+0xe8>
  4018f4:	89a1      	ldrh	r1, [r4, #12]
  4018f6:	f04f 30ff 	mov.w	r0, #4294967295
  4018fa:	e7d9      	b.n	4018b0 <setvbuf+0x9c>
  4018fc:	f44f 6780 	mov.w	r7, #1024	; 0x400
  401900:	e7ec      	b.n	4018dc <setvbuf+0xc8>
  401902:	bf00      	nop
  401904:	20000438 	.word	0x20000438
  401908:	00401aad 	.word	0x00401aad

0040190c <register_fini>:
  40190c:	4b02      	ldr	r3, [pc, #8]	; (401918 <register_fini+0xc>)
  40190e:	b113      	cbz	r3, 401916 <register_fini+0xa>
  401910:	4802      	ldr	r0, [pc, #8]	; (40191c <register_fini+0x10>)
  401912:	f000 b805 	b.w	401920 <atexit>
  401916:	4770      	bx	lr
  401918:	00000000 	.word	0x00000000
  40191c:	00401bbd 	.word	0x00401bbd

00401920 <atexit>:
  401920:	4601      	mov	r1, r0
  401922:	2000      	movs	r0, #0
  401924:	4602      	mov	r2, r0
  401926:	4603      	mov	r3, r0
  401928:	f000 bdb4 	b.w	402494 <__register_exitproc>

0040192c <__sflush_r>:
  40192c:	898b      	ldrh	r3, [r1, #12]
  40192e:	b29a      	uxth	r2, r3
  401930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401934:	460d      	mov	r5, r1
  401936:	0711      	lsls	r1, r2, #28
  401938:	4680      	mov	r8, r0
  40193a:	d43c      	bmi.n	4019b6 <__sflush_r+0x8a>
  40193c:	686a      	ldr	r2, [r5, #4]
  40193e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401942:	2a00      	cmp	r2, #0
  401944:	81ab      	strh	r3, [r5, #12]
  401946:	dd65      	ble.n	401a14 <__sflush_r+0xe8>
  401948:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40194a:	2e00      	cmp	r6, #0
  40194c:	d04b      	beq.n	4019e6 <__sflush_r+0xba>
  40194e:	b29b      	uxth	r3, r3
  401950:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  401954:	2100      	movs	r1, #0
  401956:	b292      	uxth	r2, r2
  401958:	f8d8 4000 	ldr.w	r4, [r8]
  40195c:	f8c8 1000 	str.w	r1, [r8]
  401960:	2a00      	cmp	r2, #0
  401962:	d05b      	beq.n	401a1c <__sflush_r+0xf0>
  401964:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401966:	075f      	lsls	r7, r3, #29
  401968:	d505      	bpl.n	401976 <__sflush_r+0x4a>
  40196a:	6869      	ldr	r1, [r5, #4]
  40196c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40196e:	1a52      	subs	r2, r2, r1
  401970:	b10b      	cbz	r3, 401976 <__sflush_r+0x4a>
  401972:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401974:	1ad2      	subs	r2, r2, r3
  401976:	4640      	mov	r0, r8
  401978:	69e9      	ldr	r1, [r5, #28]
  40197a:	2300      	movs	r3, #0
  40197c:	47b0      	blx	r6
  40197e:	1c46      	adds	r6, r0, #1
  401980:	d056      	beq.n	401a30 <__sflush_r+0x104>
  401982:	89ab      	ldrh	r3, [r5, #12]
  401984:	692a      	ldr	r2, [r5, #16]
  401986:	602a      	str	r2, [r5, #0]
  401988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40198c:	b29b      	uxth	r3, r3
  40198e:	2200      	movs	r2, #0
  401990:	606a      	str	r2, [r5, #4]
  401992:	04da      	lsls	r2, r3, #19
  401994:	81ab      	strh	r3, [r5, #12]
  401996:	d43b      	bmi.n	401a10 <__sflush_r+0xe4>
  401998:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40199a:	f8c8 4000 	str.w	r4, [r8]
  40199e:	b311      	cbz	r1, 4019e6 <__sflush_r+0xba>
  4019a0:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4019a4:	4299      	cmp	r1, r3
  4019a6:	d002      	beq.n	4019ae <__sflush_r+0x82>
  4019a8:	4640      	mov	r0, r8
  4019aa:	f000 f96b 	bl	401c84 <_free_r>
  4019ae:	2000      	movs	r0, #0
  4019b0:	6328      	str	r0, [r5, #48]	; 0x30
  4019b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019b6:	692e      	ldr	r6, [r5, #16]
  4019b8:	b1ae      	cbz	r6, 4019e6 <__sflush_r+0xba>
  4019ba:	682c      	ldr	r4, [r5, #0]
  4019bc:	602e      	str	r6, [r5, #0]
  4019be:	0791      	lsls	r1, r2, #30
  4019c0:	bf0c      	ite	eq
  4019c2:	696b      	ldreq	r3, [r5, #20]
  4019c4:	2300      	movne	r3, #0
  4019c6:	1ba4      	subs	r4, r4, r6
  4019c8:	60ab      	str	r3, [r5, #8]
  4019ca:	e00a      	b.n	4019e2 <__sflush_r+0xb6>
  4019cc:	4632      	mov	r2, r6
  4019ce:	4623      	mov	r3, r4
  4019d0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4019d2:	69e9      	ldr	r1, [r5, #28]
  4019d4:	4640      	mov	r0, r8
  4019d6:	47b8      	blx	r7
  4019d8:	2800      	cmp	r0, #0
  4019da:	eba4 0400 	sub.w	r4, r4, r0
  4019de:	4406      	add	r6, r0
  4019e0:	dd04      	ble.n	4019ec <__sflush_r+0xc0>
  4019e2:	2c00      	cmp	r4, #0
  4019e4:	dcf2      	bgt.n	4019cc <__sflush_r+0xa0>
  4019e6:	2000      	movs	r0, #0
  4019e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019ec:	89ab      	ldrh	r3, [r5, #12]
  4019ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4019f2:	81ab      	strh	r3, [r5, #12]
  4019f4:	f04f 30ff 	mov.w	r0, #4294967295
  4019f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019fc:	89ab      	ldrh	r3, [r5, #12]
  4019fe:	692a      	ldr	r2, [r5, #16]
  401a00:	6069      	str	r1, [r5, #4]
  401a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401a06:	b29b      	uxth	r3, r3
  401a08:	81ab      	strh	r3, [r5, #12]
  401a0a:	04db      	lsls	r3, r3, #19
  401a0c:	602a      	str	r2, [r5, #0]
  401a0e:	d5c3      	bpl.n	401998 <__sflush_r+0x6c>
  401a10:	6528      	str	r0, [r5, #80]	; 0x50
  401a12:	e7c1      	b.n	401998 <__sflush_r+0x6c>
  401a14:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401a16:	2a00      	cmp	r2, #0
  401a18:	dc96      	bgt.n	401948 <__sflush_r+0x1c>
  401a1a:	e7e4      	b.n	4019e6 <__sflush_r+0xba>
  401a1c:	2301      	movs	r3, #1
  401a1e:	4640      	mov	r0, r8
  401a20:	69e9      	ldr	r1, [r5, #28]
  401a22:	47b0      	blx	r6
  401a24:	1c43      	adds	r3, r0, #1
  401a26:	4602      	mov	r2, r0
  401a28:	d019      	beq.n	401a5e <__sflush_r+0x132>
  401a2a:	89ab      	ldrh	r3, [r5, #12]
  401a2c:	6aae      	ldr	r6, [r5, #40]	; 0x28
  401a2e:	e79a      	b.n	401966 <__sflush_r+0x3a>
  401a30:	f8d8 1000 	ldr.w	r1, [r8]
  401a34:	2900      	cmp	r1, #0
  401a36:	d0e1      	beq.n	4019fc <__sflush_r+0xd0>
  401a38:	291d      	cmp	r1, #29
  401a3a:	d007      	beq.n	401a4c <__sflush_r+0x120>
  401a3c:	2916      	cmp	r1, #22
  401a3e:	d005      	beq.n	401a4c <__sflush_r+0x120>
  401a40:	89ab      	ldrh	r3, [r5, #12]
  401a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401a46:	81ab      	strh	r3, [r5, #12]
  401a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401a4c:	89ab      	ldrh	r3, [r5, #12]
  401a4e:	692a      	ldr	r2, [r5, #16]
  401a50:	602a      	str	r2, [r5, #0]
  401a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401a56:	2200      	movs	r2, #0
  401a58:	81ab      	strh	r3, [r5, #12]
  401a5a:	606a      	str	r2, [r5, #4]
  401a5c:	e79c      	b.n	401998 <__sflush_r+0x6c>
  401a5e:	f8d8 3000 	ldr.w	r3, [r8]
  401a62:	2b00      	cmp	r3, #0
  401a64:	d0e1      	beq.n	401a2a <__sflush_r+0xfe>
  401a66:	2b1d      	cmp	r3, #29
  401a68:	d007      	beq.n	401a7a <__sflush_r+0x14e>
  401a6a:	2b16      	cmp	r3, #22
  401a6c:	d005      	beq.n	401a7a <__sflush_r+0x14e>
  401a6e:	89ab      	ldrh	r3, [r5, #12]
  401a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401a74:	81ab      	strh	r3, [r5, #12]
  401a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401a7a:	f8c8 4000 	str.w	r4, [r8]
  401a7e:	e7b2      	b.n	4019e6 <__sflush_r+0xba>

00401a80 <_fflush_r>:
  401a80:	b510      	push	{r4, lr}
  401a82:	4604      	mov	r4, r0
  401a84:	b082      	sub	sp, #8
  401a86:	b108      	cbz	r0, 401a8c <_fflush_r+0xc>
  401a88:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401a8a:	b153      	cbz	r3, 401aa2 <_fflush_r+0x22>
  401a8c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  401a90:	b908      	cbnz	r0, 401a96 <_fflush_r+0x16>
  401a92:	b002      	add	sp, #8
  401a94:	bd10      	pop	{r4, pc}
  401a96:	4620      	mov	r0, r4
  401a98:	b002      	add	sp, #8
  401a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401a9e:	f7ff bf45 	b.w	40192c <__sflush_r>
  401aa2:	9101      	str	r1, [sp, #4]
  401aa4:	f000 f880 	bl	401ba8 <__sinit>
  401aa8:	9901      	ldr	r1, [sp, #4]
  401aaa:	e7ef      	b.n	401a8c <_fflush_r+0xc>

00401aac <_cleanup_r>:
  401aac:	4901      	ldr	r1, [pc, #4]	; (401ab4 <_cleanup_r+0x8>)
  401aae:	f000 b9c1 	b.w	401e34 <_fwalk_reent>
  401ab2:	bf00      	nop
  401ab4:	0040255d 	.word	0x0040255d

00401ab8 <__sinit.part.1>:
  401ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401abc:	4b35      	ldr	r3, [pc, #212]	; (401b94 <__sinit.part.1+0xdc>)
  401abe:	6845      	ldr	r5, [r0, #4]
  401ac0:	63c3      	str	r3, [r0, #60]	; 0x3c
  401ac2:	2400      	movs	r4, #0
  401ac4:	4607      	mov	r7, r0
  401ac6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  401aca:	2304      	movs	r3, #4
  401acc:	2103      	movs	r1, #3
  401ace:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  401ad2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  401ad6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  401ada:	b083      	sub	sp, #12
  401adc:	602c      	str	r4, [r5, #0]
  401ade:	606c      	str	r4, [r5, #4]
  401ae0:	60ac      	str	r4, [r5, #8]
  401ae2:	666c      	str	r4, [r5, #100]	; 0x64
  401ae4:	81ec      	strh	r4, [r5, #14]
  401ae6:	612c      	str	r4, [r5, #16]
  401ae8:	616c      	str	r4, [r5, #20]
  401aea:	61ac      	str	r4, [r5, #24]
  401aec:	81ab      	strh	r3, [r5, #12]
  401aee:	4621      	mov	r1, r4
  401af0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401af4:	2208      	movs	r2, #8
  401af6:	f7ff fe37 	bl	401768 <memset>
  401afa:	68be      	ldr	r6, [r7, #8]
  401afc:	f8df b098 	ldr.w	fp, [pc, #152]	; 401b98 <__sinit.part.1+0xe0>
  401b00:	f8df a098 	ldr.w	sl, [pc, #152]	; 401b9c <__sinit.part.1+0xe4>
  401b04:	f8df 9098 	ldr.w	r9, [pc, #152]	; 401ba0 <__sinit.part.1+0xe8>
  401b08:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401ba4 <__sinit.part.1+0xec>
  401b0c:	f8c5 b020 	str.w	fp, [r5, #32]
  401b10:	2301      	movs	r3, #1
  401b12:	2209      	movs	r2, #9
  401b14:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401b18:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401b1c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401b20:	61ed      	str	r5, [r5, #28]
  401b22:	4621      	mov	r1, r4
  401b24:	81f3      	strh	r3, [r6, #14]
  401b26:	81b2      	strh	r2, [r6, #12]
  401b28:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  401b2c:	6034      	str	r4, [r6, #0]
  401b2e:	6074      	str	r4, [r6, #4]
  401b30:	60b4      	str	r4, [r6, #8]
  401b32:	6674      	str	r4, [r6, #100]	; 0x64
  401b34:	6134      	str	r4, [r6, #16]
  401b36:	6174      	str	r4, [r6, #20]
  401b38:	61b4      	str	r4, [r6, #24]
  401b3a:	2208      	movs	r2, #8
  401b3c:	9301      	str	r3, [sp, #4]
  401b3e:	f7ff fe13 	bl	401768 <memset>
  401b42:	68fd      	ldr	r5, [r7, #12]
  401b44:	61f6      	str	r6, [r6, #28]
  401b46:	2012      	movs	r0, #18
  401b48:	2202      	movs	r2, #2
  401b4a:	f8c6 b020 	str.w	fp, [r6, #32]
  401b4e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  401b52:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  401b56:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  401b5a:	4621      	mov	r1, r4
  401b5c:	81a8      	strh	r0, [r5, #12]
  401b5e:	81ea      	strh	r2, [r5, #14]
  401b60:	602c      	str	r4, [r5, #0]
  401b62:	606c      	str	r4, [r5, #4]
  401b64:	60ac      	str	r4, [r5, #8]
  401b66:	666c      	str	r4, [r5, #100]	; 0x64
  401b68:	612c      	str	r4, [r5, #16]
  401b6a:	616c      	str	r4, [r5, #20]
  401b6c:	61ac      	str	r4, [r5, #24]
  401b6e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401b72:	2208      	movs	r2, #8
  401b74:	f7ff fdf8 	bl	401768 <memset>
  401b78:	9b01      	ldr	r3, [sp, #4]
  401b7a:	61ed      	str	r5, [r5, #28]
  401b7c:	f8c5 b020 	str.w	fp, [r5, #32]
  401b80:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401b84:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401b88:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  401b8e:	b003      	add	sp, #12
  401b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b94:	00401aad 	.word	0x00401aad
  401b98:	004023e9 	.word	0x004023e9
  401b9c:	0040240d 	.word	0x0040240d
  401ba0:	00402445 	.word	0x00402445
  401ba4:	00402465 	.word	0x00402465

00401ba8 <__sinit>:
  401ba8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401baa:	b103      	cbz	r3, 401bae <__sinit+0x6>
  401bac:	4770      	bx	lr
  401bae:	f7ff bf83 	b.w	401ab8 <__sinit.part.1>
  401bb2:	bf00      	nop

00401bb4 <__sfp_lock_acquire>:
  401bb4:	4770      	bx	lr
  401bb6:	bf00      	nop

00401bb8 <__sfp_lock_release>:
  401bb8:	4770      	bx	lr
  401bba:	bf00      	nop

00401bbc <__libc_fini_array>:
  401bbc:	b538      	push	{r3, r4, r5, lr}
  401bbe:	4b08      	ldr	r3, [pc, #32]	; (401be0 <__libc_fini_array+0x24>)
  401bc0:	4d08      	ldr	r5, [pc, #32]	; (401be4 <__libc_fini_array+0x28>)
  401bc2:	1aed      	subs	r5, r5, r3
  401bc4:	10ac      	asrs	r4, r5, #2
  401bc6:	bf18      	it	ne
  401bc8:	18ed      	addne	r5, r5, r3
  401bca:	d005      	beq.n	401bd8 <__libc_fini_array+0x1c>
  401bcc:	3c01      	subs	r4, #1
  401bce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  401bd2:	4798      	blx	r3
  401bd4:	2c00      	cmp	r4, #0
  401bd6:	d1f9      	bne.n	401bcc <__libc_fini_array+0x10>
  401bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401bdc:	f001 b920 	b.w	402e20 <_fini>
  401be0:	00402e2c 	.word	0x00402e2c
  401be4:	00402e30 	.word	0x00402e30

00401be8 <_malloc_trim_r>:
  401be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401bea:	4f23      	ldr	r7, [pc, #140]	; (401c78 <_malloc_trim_r+0x90>)
  401bec:	460c      	mov	r4, r1
  401bee:	4606      	mov	r6, r0
  401bf0:	f000 fbe4 	bl	4023bc <__malloc_lock>
  401bf4:	68bb      	ldr	r3, [r7, #8]
  401bf6:	685d      	ldr	r5, [r3, #4]
  401bf8:	f025 0503 	bic.w	r5, r5, #3
  401bfc:	1b29      	subs	r1, r5, r4
  401bfe:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  401c02:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  401c06:	f021 010f 	bic.w	r1, r1, #15
  401c0a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401c0e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401c12:	db07      	blt.n	401c24 <_malloc_trim_r+0x3c>
  401c14:	4630      	mov	r0, r6
  401c16:	2100      	movs	r1, #0
  401c18:	f000 fbd4 	bl	4023c4 <_sbrk_r>
  401c1c:	68bb      	ldr	r3, [r7, #8]
  401c1e:	442b      	add	r3, r5
  401c20:	4298      	cmp	r0, r3
  401c22:	d004      	beq.n	401c2e <_malloc_trim_r+0x46>
  401c24:	4630      	mov	r0, r6
  401c26:	f000 fbcb 	bl	4023c0 <__malloc_unlock>
  401c2a:	2000      	movs	r0, #0
  401c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c2e:	4630      	mov	r0, r6
  401c30:	4261      	negs	r1, r4
  401c32:	f000 fbc7 	bl	4023c4 <_sbrk_r>
  401c36:	3001      	adds	r0, #1
  401c38:	d00d      	beq.n	401c56 <_malloc_trim_r+0x6e>
  401c3a:	4b10      	ldr	r3, [pc, #64]	; (401c7c <_malloc_trim_r+0x94>)
  401c3c:	68ba      	ldr	r2, [r7, #8]
  401c3e:	6819      	ldr	r1, [r3, #0]
  401c40:	1b2d      	subs	r5, r5, r4
  401c42:	f045 0501 	orr.w	r5, r5, #1
  401c46:	4630      	mov	r0, r6
  401c48:	1b09      	subs	r1, r1, r4
  401c4a:	6055      	str	r5, [r2, #4]
  401c4c:	6019      	str	r1, [r3, #0]
  401c4e:	f000 fbb7 	bl	4023c0 <__malloc_unlock>
  401c52:	2001      	movs	r0, #1
  401c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c56:	4630      	mov	r0, r6
  401c58:	2100      	movs	r1, #0
  401c5a:	f000 fbb3 	bl	4023c4 <_sbrk_r>
  401c5e:	68ba      	ldr	r2, [r7, #8]
  401c60:	1a83      	subs	r3, r0, r2
  401c62:	2b0f      	cmp	r3, #15
  401c64:	ddde      	ble.n	401c24 <_malloc_trim_r+0x3c>
  401c66:	4c06      	ldr	r4, [pc, #24]	; (401c80 <_malloc_trim_r+0x98>)
  401c68:	4904      	ldr	r1, [pc, #16]	; (401c7c <_malloc_trim_r+0x94>)
  401c6a:	6824      	ldr	r4, [r4, #0]
  401c6c:	f043 0301 	orr.w	r3, r3, #1
  401c70:	1b00      	subs	r0, r0, r4
  401c72:	6053      	str	r3, [r2, #4]
  401c74:	6008      	str	r0, [r1, #0]
  401c76:	e7d5      	b.n	401c24 <_malloc_trim_r+0x3c>
  401c78:	2000043c 	.word	0x2000043c
  401c7c:	20000cb0 	.word	0x20000cb0
  401c80:	20000848 	.word	0x20000848

00401c84 <_free_r>:
  401c84:	2900      	cmp	r1, #0
  401c86:	d04e      	beq.n	401d26 <_free_r+0xa2>
  401c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c8c:	460c      	mov	r4, r1
  401c8e:	4680      	mov	r8, r0
  401c90:	f000 fb94 	bl	4023bc <__malloc_lock>
  401c94:	f854 7c04 	ldr.w	r7, [r4, #-4]
  401c98:	4962      	ldr	r1, [pc, #392]	; (401e24 <_free_r+0x1a0>)
  401c9a:	f027 0201 	bic.w	r2, r7, #1
  401c9e:	f1a4 0508 	sub.w	r5, r4, #8
  401ca2:	18ab      	adds	r3, r5, r2
  401ca4:	688e      	ldr	r6, [r1, #8]
  401ca6:	6858      	ldr	r0, [r3, #4]
  401ca8:	429e      	cmp	r6, r3
  401caa:	f020 0003 	bic.w	r0, r0, #3
  401cae:	d05a      	beq.n	401d66 <_free_r+0xe2>
  401cb0:	07fe      	lsls	r6, r7, #31
  401cb2:	6058      	str	r0, [r3, #4]
  401cb4:	d40b      	bmi.n	401cce <_free_r+0x4a>
  401cb6:	f854 7c08 	ldr.w	r7, [r4, #-8]
  401cba:	1bed      	subs	r5, r5, r7
  401cbc:	f101 0e08 	add.w	lr, r1, #8
  401cc0:	68ac      	ldr	r4, [r5, #8]
  401cc2:	4574      	cmp	r4, lr
  401cc4:	443a      	add	r2, r7
  401cc6:	d067      	beq.n	401d98 <_free_r+0x114>
  401cc8:	68ef      	ldr	r7, [r5, #12]
  401cca:	60e7      	str	r7, [r4, #12]
  401ccc:	60bc      	str	r4, [r7, #8]
  401cce:	181c      	adds	r4, r3, r0
  401cd0:	6864      	ldr	r4, [r4, #4]
  401cd2:	07e4      	lsls	r4, r4, #31
  401cd4:	d40c      	bmi.n	401cf0 <_free_r+0x6c>
  401cd6:	4f54      	ldr	r7, [pc, #336]	; (401e28 <_free_r+0x1a4>)
  401cd8:	689c      	ldr	r4, [r3, #8]
  401cda:	42bc      	cmp	r4, r7
  401cdc:	4402      	add	r2, r0
  401cde:	d07c      	beq.n	401dda <_free_r+0x156>
  401ce0:	68d8      	ldr	r0, [r3, #12]
  401ce2:	60e0      	str	r0, [r4, #12]
  401ce4:	f042 0301 	orr.w	r3, r2, #1
  401ce8:	6084      	str	r4, [r0, #8]
  401cea:	606b      	str	r3, [r5, #4]
  401cec:	50aa      	str	r2, [r5, r2]
  401cee:	e003      	b.n	401cf8 <_free_r+0x74>
  401cf0:	f042 0301 	orr.w	r3, r2, #1
  401cf4:	606b      	str	r3, [r5, #4]
  401cf6:	50aa      	str	r2, [r5, r2]
  401cf8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  401cfc:	d214      	bcs.n	401d28 <_free_r+0xa4>
  401cfe:	08d2      	lsrs	r2, r2, #3
  401d00:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  401d04:	6848      	ldr	r0, [r1, #4]
  401d06:	689f      	ldr	r7, [r3, #8]
  401d08:	60af      	str	r7, [r5, #8]
  401d0a:	1092      	asrs	r2, r2, #2
  401d0c:	2401      	movs	r4, #1
  401d0e:	fa04 f202 	lsl.w	r2, r4, r2
  401d12:	4310      	orrs	r0, r2
  401d14:	60eb      	str	r3, [r5, #12]
  401d16:	6048      	str	r0, [r1, #4]
  401d18:	609d      	str	r5, [r3, #8]
  401d1a:	60fd      	str	r5, [r7, #12]
  401d1c:	4640      	mov	r0, r8
  401d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401d22:	f000 bb4d 	b.w	4023c0 <__malloc_unlock>
  401d26:	4770      	bx	lr
  401d28:	0a53      	lsrs	r3, r2, #9
  401d2a:	2b04      	cmp	r3, #4
  401d2c:	d847      	bhi.n	401dbe <_free_r+0x13a>
  401d2e:	0993      	lsrs	r3, r2, #6
  401d30:	f103 0438 	add.w	r4, r3, #56	; 0x38
  401d34:	0060      	lsls	r0, r4, #1
  401d36:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  401d3a:	493a      	ldr	r1, [pc, #232]	; (401e24 <_free_r+0x1a0>)
  401d3c:	6883      	ldr	r3, [r0, #8]
  401d3e:	4283      	cmp	r3, r0
  401d40:	d043      	beq.n	401dca <_free_r+0x146>
  401d42:	6859      	ldr	r1, [r3, #4]
  401d44:	f021 0103 	bic.w	r1, r1, #3
  401d48:	4291      	cmp	r1, r2
  401d4a:	d902      	bls.n	401d52 <_free_r+0xce>
  401d4c:	689b      	ldr	r3, [r3, #8]
  401d4e:	4298      	cmp	r0, r3
  401d50:	d1f7      	bne.n	401d42 <_free_r+0xbe>
  401d52:	68da      	ldr	r2, [r3, #12]
  401d54:	60ea      	str	r2, [r5, #12]
  401d56:	60ab      	str	r3, [r5, #8]
  401d58:	4640      	mov	r0, r8
  401d5a:	6095      	str	r5, [r2, #8]
  401d5c:	60dd      	str	r5, [r3, #12]
  401d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401d62:	f000 bb2d 	b.w	4023c0 <__malloc_unlock>
  401d66:	07ff      	lsls	r7, r7, #31
  401d68:	4402      	add	r2, r0
  401d6a:	d407      	bmi.n	401d7c <_free_r+0xf8>
  401d6c:	f854 3c08 	ldr.w	r3, [r4, #-8]
  401d70:	1aed      	subs	r5, r5, r3
  401d72:	441a      	add	r2, r3
  401d74:	68a8      	ldr	r0, [r5, #8]
  401d76:	68eb      	ldr	r3, [r5, #12]
  401d78:	60c3      	str	r3, [r0, #12]
  401d7a:	6098      	str	r0, [r3, #8]
  401d7c:	4b2b      	ldr	r3, [pc, #172]	; (401e2c <_free_r+0x1a8>)
  401d7e:	681b      	ldr	r3, [r3, #0]
  401d80:	f042 0001 	orr.w	r0, r2, #1
  401d84:	429a      	cmp	r2, r3
  401d86:	6068      	str	r0, [r5, #4]
  401d88:	608d      	str	r5, [r1, #8]
  401d8a:	d3c7      	bcc.n	401d1c <_free_r+0x98>
  401d8c:	4b28      	ldr	r3, [pc, #160]	; (401e30 <_free_r+0x1ac>)
  401d8e:	4640      	mov	r0, r8
  401d90:	6819      	ldr	r1, [r3, #0]
  401d92:	f7ff ff29 	bl	401be8 <_malloc_trim_r>
  401d96:	e7c1      	b.n	401d1c <_free_r+0x98>
  401d98:	1819      	adds	r1, r3, r0
  401d9a:	6849      	ldr	r1, [r1, #4]
  401d9c:	07c9      	lsls	r1, r1, #31
  401d9e:	d409      	bmi.n	401db4 <_free_r+0x130>
  401da0:	68d9      	ldr	r1, [r3, #12]
  401da2:	689b      	ldr	r3, [r3, #8]
  401da4:	4402      	add	r2, r0
  401da6:	f042 0001 	orr.w	r0, r2, #1
  401daa:	60d9      	str	r1, [r3, #12]
  401dac:	608b      	str	r3, [r1, #8]
  401dae:	6068      	str	r0, [r5, #4]
  401db0:	50aa      	str	r2, [r5, r2]
  401db2:	e7b3      	b.n	401d1c <_free_r+0x98>
  401db4:	f042 0301 	orr.w	r3, r2, #1
  401db8:	606b      	str	r3, [r5, #4]
  401dba:	50aa      	str	r2, [r5, r2]
  401dbc:	e7ae      	b.n	401d1c <_free_r+0x98>
  401dbe:	2b14      	cmp	r3, #20
  401dc0:	d814      	bhi.n	401dec <_free_r+0x168>
  401dc2:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  401dc6:	0060      	lsls	r0, r4, #1
  401dc8:	e7b5      	b.n	401d36 <_free_r+0xb2>
  401dca:	684a      	ldr	r2, [r1, #4]
  401dcc:	10a4      	asrs	r4, r4, #2
  401dce:	2001      	movs	r0, #1
  401dd0:	40a0      	lsls	r0, r4
  401dd2:	4302      	orrs	r2, r0
  401dd4:	604a      	str	r2, [r1, #4]
  401dd6:	461a      	mov	r2, r3
  401dd8:	e7bc      	b.n	401d54 <_free_r+0xd0>
  401dda:	f042 0301 	orr.w	r3, r2, #1
  401dde:	614d      	str	r5, [r1, #20]
  401de0:	610d      	str	r5, [r1, #16]
  401de2:	60ec      	str	r4, [r5, #12]
  401de4:	60ac      	str	r4, [r5, #8]
  401de6:	606b      	str	r3, [r5, #4]
  401de8:	50aa      	str	r2, [r5, r2]
  401dea:	e797      	b.n	401d1c <_free_r+0x98>
  401dec:	2b54      	cmp	r3, #84	; 0x54
  401dee:	d804      	bhi.n	401dfa <_free_r+0x176>
  401df0:	0b13      	lsrs	r3, r2, #12
  401df2:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  401df6:	0060      	lsls	r0, r4, #1
  401df8:	e79d      	b.n	401d36 <_free_r+0xb2>
  401dfa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401dfe:	d804      	bhi.n	401e0a <_free_r+0x186>
  401e00:	0bd3      	lsrs	r3, r2, #15
  401e02:	f103 0477 	add.w	r4, r3, #119	; 0x77
  401e06:	0060      	lsls	r0, r4, #1
  401e08:	e795      	b.n	401d36 <_free_r+0xb2>
  401e0a:	f240 5054 	movw	r0, #1364	; 0x554
  401e0e:	4283      	cmp	r3, r0
  401e10:	d804      	bhi.n	401e1c <_free_r+0x198>
  401e12:	0c93      	lsrs	r3, r2, #18
  401e14:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  401e18:	0060      	lsls	r0, r4, #1
  401e1a:	e78c      	b.n	401d36 <_free_r+0xb2>
  401e1c:	20fc      	movs	r0, #252	; 0xfc
  401e1e:	247e      	movs	r4, #126	; 0x7e
  401e20:	e789      	b.n	401d36 <_free_r+0xb2>
  401e22:	bf00      	nop
  401e24:	2000043c 	.word	0x2000043c
  401e28:	20000444 	.word	0x20000444
  401e2c:	20000844 	.word	0x20000844
  401e30:	20000cac 	.word	0x20000cac

00401e34 <_fwalk_reent>:
  401e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401e38:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401e3c:	d01f      	beq.n	401e7e <_fwalk_reent+0x4a>
  401e3e:	4688      	mov	r8, r1
  401e40:	4606      	mov	r6, r0
  401e42:	f04f 0900 	mov.w	r9, #0
  401e46:	687d      	ldr	r5, [r7, #4]
  401e48:	68bc      	ldr	r4, [r7, #8]
  401e4a:	3d01      	subs	r5, #1
  401e4c:	d411      	bmi.n	401e72 <_fwalk_reent+0x3e>
  401e4e:	89a3      	ldrh	r3, [r4, #12]
  401e50:	2b01      	cmp	r3, #1
  401e52:	f105 35ff 	add.w	r5, r5, #4294967295
  401e56:	d908      	bls.n	401e6a <_fwalk_reent+0x36>
  401e58:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401e5c:	3301      	adds	r3, #1
  401e5e:	4621      	mov	r1, r4
  401e60:	4630      	mov	r0, r6
  401e62:	d002      	beq.n	401e6a <_fwalk_reent+0x36>
  401e64:	47c0      	blx	r8
  401e66:	ea49 0900 	orr.w	r9, r9, r0
  401e6a:	1c6b      	adds	r3, r5, #1
  401e6c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401e70:	d1ed      	bne.n	401e4e <_fwalk_reent+0x1a>
  401e72:	683f      	ldr	r7, [r7, #0]
  401e74:	2f00      	cmp	r7, #0
  401e76:	d1e6      	bne.n	401e46 <_fwalk_reent+0x12>
  401e78:	4648      	mov	r0, r9
  401e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e7e:	46b9      	mov	r9, r7
  401e80:	4648      	mov	r0, r9
  401e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e86:	bf00      	nop

00401e88 <malloc>:
  401e88:	4b02      	ldr	r3, [pc, #8]	; (401e94 <malloc+0xc>)
  401e8a:	4601      	mov	r1, r0
  401e8c:	6818      	ldr	r0, [r3, #0]
  401e8e:	f000 b803 	b.w	401e98 <_malloc_r>
  401e92:	bf00      	nop
  401e94:	20000438 	.word	0x20000438

00401e98 <_malloc_r>:
  401e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401e9c:	f101 050b 	add.w	r5, r1, #11
  401ea0:	2d16      	cmp	r5, #22
  401ea2:	b083      	sub	sp, #12
  401ea4:	4606      	mov	r6, r0
  401ea6:	d927      	bls.n	401ef8 <_malloc_r+0x60>
  401ea8:	f035 0507 	bics.w	r5, r5, #7
  401eac:	f100 80b6 	bmi.w	40201c <_malloc_r+0x184>
  401eb0:	42a9      	cmp	r1, r5
  401eb2:	f200 80b3 	bhi.w	40201c <_malloc_r+0x184>
  401eb6:	f000 fa81 	bl	4023bc <__malloc_lock>
  401eba:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  401ebe:	d222      	bcs.n	401f06 <_malloc_r+0x6e>
  401ec0:	4fc2      	ldr	r7, [pc, #776]	; (4021cc <_malloc_r+0x334>)
  401ec2:	08e8      	lsrs	r0, r5, #3
  401ec4:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  401ec8:	68dc      	ldr	r4, [r3, #12]
  401eca:	429c      	cmp	r4, r3
  401ecc:	f000 81c8 	beq.w	402260 <_malloc_r+0x3c8>
  401ed0:	6863      	ldr	r3, [r4, #4]
  401ed2:	68e1      	ldr	r1, [r4, #12]
  401ed4:	68a5      	ldr	r5, [r4, #8]
  401ed6:	f023 0303 	bic.w	r3, r3, #3
  401eda:	4423      	add	r3, r4
  401edc:	4630      	mov	r0, r6
  401ede:	685a      	ldr	r2, [r3, #4]
  401ee0:	60e9      	str	r1, [r5, #12]
  401ee2:	f042 0201 	orr.w	r2, r2, #1
  401ee6:	608d      	str	r5, [r1, #8]
  401ee8:	605a      	str	r2, [r3, #4]
  401eea:	f000 fa69 	bl	4023c0 <__malloc_unlock>
  401eee:	3408      	adds	r4, #8
  401ef0:	4620      	mov	r0, r4
  401ef2:	b003      	add	sp, #12
  401ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ef8:	2910      	cmp	r1, #16
  401efa:	f200 808f 	bhi.w	40201c <_malloc_r+0x184>
  401efe:	f000 fa5d 	bl	4023bc <__malloc_lock>
  401f02:	2510      	movs	r5, #16
  401f04:	e7dc      	b.n	401ec0 <_malloc_r+0x28>
  401f06:	0a68      	lsrs	r0, r5, #9
  401f08:	f000 808f 	beq.w	40202a <_malloc_r+0x192>
  401f0c:	2804      	cmp	r0, #4
  401f0e:	f200 8154 	bhi.w	4021ba <_malloc_r+0x322>
  401f12:	09a8      	lsrs	r0, r5, #6
  401f14:	3038      	adds	r0, #56	; 0x38
  401f16:	0041      	lsls	r1, r0, #1
  401f18:	4fac      	ldr	r7, [pc, #688]	; (4021cc <_malloc_r+0x334>)
  401f1a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  401f1e:	68cc      	ldr	r4, [r1, #12]
  401f20:	42a1      	cmp	r1, r4
  401f22:	d106      	bne.n	401f32 <_malloc_r+0x9a>
  401f24:	e00c      	b.n	401f40 <_malloc_r+0xa8>
  401f26:	2a00      	cmp	r2, #0
  401f28:	f280 8082 	bge.w	402030 <_malloc_r+0x198>
  401f2c:	68e4      	ldr	r4, [r4, #12]
  401f2e:	42a1      	cmp	r1, r4
  401f30:	d006      	beq.n	401f40 <_malloc_r+0xa8>
  401f32:	6863      	ldr	r3, [r4, #4]
  401f34:	f023 0303 	bic.w	r3, r3, #3
  401f38:	1b5a      	subs	r2, r3, r5
  401f3a:	2a0f      	cmp	r2, #15
  401f3c:	ddf3      	ble.n	401f26 <_malloc_r+0x8e>
  401f3e:	3801      	subs	r0, #1
  401f40:	3001      	adds	r0, #1
  401f42:	49a2      	ldr	r1, [pc, #648]	; (4021cc <_malloc_r+0x334>)
  401f44:	693c      	ldr	r4, [r7, #16]
  401f46:	f101 0e08 	add.w	lr, r1, #8
  401f4a:	4574      	cmp	r4, lr
  401f4c:	f000 817d 	beq.w	40224a <_malloc_r+0x3b2>
  401f50:	6863      	ldr	r3, [r4, #4]
  401f52:	f023 0303 	bic.w	r3, r3, #3
  401f56:	1b5a      	subs	r2, r3, r5
  401f58:	2a0f      	cmp	r2, #15
  401f5a:	f300 8163 	bgt.w	402224 <_malloc_r+0x38c>
  401f5e:	2a00      	cmp	r2, #0
  401f60:	f8c1 e014 	str.w	lr, [r1, #20]
  401f64:	f8c1 e010 	str.w	lr, [r1, #16]
  401f68:	da73      	bge.n	402052 <_malloc_r+0x1ba>
  401f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401f6e:	f080 8139 	bcs.w	4021e4 <_malloc_r+0x34c>
  401f72:	08db      	lsrs	r3, r3, #3
  401f74:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  401f78:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  401f7c:	684a      	ldr	r2, [r1, #4]
  401f7e:	f8d8 9008 	ldr.w	r9, [r8, #8]
  401f82:	f8c4 9008 	str.w	r9, [r4, #8]
  401f86:	2301      	movs	r3, #1
  401f88:	fa03 f30c 	lsl.w	r3, r3, ip
  401f8c:	4313      	orrs	r3, r2
  401f8e:	f8c4 800c 	str.w	r8, [r4, #12]
  401f92:	604b      	str	r3, [r1, #4]
  401f94:	f8c8 4008 	str.w	r4, [r8, #8]
  401f98:	f8c9 400c 	str.w	r4, [r9, #12]
  401f9c:	1082      	asrs	r2, r0, #2
  401f9e:	2401      	movs	r4, #1
  401fa0:	4094      	lsls	r4, r2
  401fa2:	429c      	cmp	r4, r3
  401fa4:	d862      	bhi.n	40206c <_malloc_r+0x1d4>
  401fa6:	4223      	tst	r3, r4
  401fa8:	d106      	bne.n	401fb8 <_malloc_r+0x120>
  401faa:	f020 0003 	bic.w	r0, r0, #3
  401fae:	0064      	lsls	r4, r4, #1
  401fb0:	4223      	tst	r3, r4
  401fb2:	f100 0004 	add.w	r0, r0, #4
  401fb6:	d0fa      	beq.n	401fae <_malloc_r+0x116>
  401fb8:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  401fbc:	46c4      	mov	ip, r8
  401fbe:	4681      	mov	r9, r0
  401fc0:	f8dc 300c 	ldr.w	r3, [ip, #12]
  401fc4:	459c      	cmp	ip, r3
  401fc6:	d107      	bne.n	401fd8 <_malloc_r+0x140>
  401fc8:	e141      	b.n	40224e <_malloc_r+0x3b6>
  401fca:	2900      	cmp	r1, #0
  401fcc:	f280 8151 	bge.w	402272 <_malloc_r+0x3da>
  401fd0:	68db      	ldr	r3, [r3, #12]
  401fd2:	459c      	cmp	ip, r3
  401fd4:	f000 813b 	beq.w	40224e <_malloc_r+0x3b6>
  401fd8:	685a      	ldr	r2, [r3, #4]
  401fda:	f022 0203 	bic.w	r2, r2, #3
  401fde:	1b51      	subs	r1, r2, r5
  401fe0:	290f      	cmp	r1, #15
  401fe2:	ddf2      	ble.n	401fca <_malloc_r+0x132>
  401fe4:	461c      	mov	r4, r3
  401fe6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401fea:	f854 8f08 	ldr.w	r8, [r4, #8]!
  401fee:	195a      	adds	r2, r3, r5
  401ff0:	f045 0901 	orr.w	r9, r5, #1
  401ff4:	f041 0501 	orr.w	r5, r1, #1
  401ff8:	f8c3 9004 	str.w	r9, [r3, #4]
  401ffc:	4630      	mov	r0, r6
  401ffe:	f8c8 c00c 	str.w	ip, [r8, #12]
  402002:	f8cc 8008 	str.w	r8, [ip, #8]
  402006:	617a      	str	r2, [r7, #20]
  402008:	613a      	str	r2, [r7, #16]
  40200a:	f8c2 e00c 	str.w	lr, [r2, #12]
  40200e:	f8c2 e008 	str.w	lr, [r2, #8]
  402012:	6055      	str	r5, [r2, #4]
  402014:	5051      	str	r1, [r2, r1]
  402016:	f000 f9d3 	bl	4023c0 <__malloc_unlock>
  40201a:	e769      	b.n	401ef0 <_malloc_r+0x58>
  40201c:	2400      	movs	r4, #0
  40201e:	230c      	movs	r3, #12
  402020:	4620      	mov	r0, r4
  402022:	6033      	str	r3, [r6, #0]
  402024:	b003      	add	sp, #12
  402026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40202a:	217e      	movs	r1, #126	; 0x7e
  40202c:	203f      	movs	r0, #63	; 0x3f
  40202e:	e773      	b.n	401f18 <_malloc_r+0x80>
  402030:	4423      	add	r3, r4
  402032:	68e1      	ldr	r1, [r4, #12]
  402034:	685a      	ldr	r2, [r3, #4]
  402036:	68a5      	ldr	r5, [r4, #8]
  402038:	f042 0201 	orr.w	r2, r2, #1
  40203c:	60e9      	str	r1, [r5, #12]
  40203e:	4630      	mov	r0, r6
  402040:	608d      	str	r5, [r1, #8]
  402042:	605a      	str	r2, [r3, #4]
  402044:	f000 f9bc 	bl	4023c0 <__malloc_unlock>
  402048:	3408      	adds	r4, #8
  40204a:	4620      	mov	r0, r4
  40204c:	b003      	add	sp, #12
  40204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402052:	4423      	add	r3, r4
  402054:	4630      	mov	r0, r6
  402056:	685a      	ldr	r2, [r3, #4]
  402058:	f042 0201 	orr.w	r2, r2, #1
  40205c:	605a      	str	r2, [r3, #4]
  40205e:	f000 f9af 	bl	4023c0 <__malloc_unlock>
  402062:	3408      	adds	r4, #8
  402064:	4620      	mov	r0, r4
  402066:	b003      	add	sp, #12
  402068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40206c:	68bc      	ldr	r4, [r7, #8]
  40206e:	6863      	ldr	r3, [r4, #4]
  402070:	f023 0803 	bic.w	r8, r3, #3
  402074:	4545      	cmp	r5, r8
  402076:	d804      	bhi.n	402082 <_malloc_r+0x1ea>
  402078:	ebc5 0308 	rsb	r3, r5, r8
  40207c:	2b0f      	cmp	r3, #15
  40207e:	f300 808c 	bgt.w	40219a <_malloc_r+0x302>
  402082:	4b53      	ldr	r3, [pc, #332]	; (4021d0 <_malloc_r+0x338>)
  402084:	f8df a158 	ldr.w	sl, [pc, #344]	; 4021e0 <_malloc_r+0x348>
  402088:	681a      	ldr	r2, [r3, #0]
  40208a:	f8da 3000 	ldr.w	r3, [sl]
  40208e:	3301      	adds	r3, #1
  402090:	442a      	add	r2, r5
  402092:	eb04 0b08 	add.w	fp, r4, r8
  402096:	f000 8150 	beq.w	40233a <_malloc_r+0x4a2>
  40209a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  40209e:	320f      	adds	r2, #15
  4020a0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4020a4:	f022 020f 	bic.w	r2, r2, #15
  4020a8:	4611      	mov	r1, r2
  4020aa:	4630      	mov	r0, r6
  4020ac:	9201      	str	r2, [sp, #4]
  4020ae:	f000 f989 	bl	4023c4 <_sbrk_r>
  4020b2:	f1b0 3fff 	cmp.w	r0, #4294967295
  4020b6:	4681      	mov	r9, r0
  4020b8:	9a01      	ldr	r2, [sp, #4]
  4020ba:	f000 8147 	beq.w	40234c <_malloc_r+0x4b4>
  4020be:	4583      	cmp	fp, r0
  4020c0:	f200 80ee 	bhi.w	4022a0 <_malloc_r+0x408>
  4020c4:	4b43      	ldr	r3, [pc, #268]	; (4021d4 <_malloc_r+0x33c>)
  4020c6:	6819      	ldr	r1, [r3, #0]
  4020c8:	45cb      	cmp	fp, r9
  4020ca:	4411      	add	r1, r2
  4020cc:	6019      	str	r1, [r3, #0]
  4020ce:	f000 8142 	beq.w	402356 <_malloc_r+0x4be>
  4020d2:	f8da 0000 	ldr.w	r0, [sl]
  4020d6:	f8df e108 	ldr.w	lr, [pc, #264]	; 4021e0 <_malloc_r+0x348>
  4020da:	3001      	adds	r0, #1
  4020dc:	bf1b      	ittet	ne
  4020de:	ebcb 0b09 	rsbne	fp, fp, r9
  4020e2:	4459      	addne	r1, fp
  4020e4:	f8ce 9000 	streq.w	r9, [lr]
  4020e8:	6019      	strne	r1, [r3, #0]
  4020ea:	f019 0107 	ands.w	r1, r9, #7
  4020ee:	f000 8107 	beq.w	402300 <_malloc_r+0x468>
  4020f2:	f1c1 0008 	rsb	r0, r1, #8
  4020f6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4020fa:	4481      	add	r9, r0
  4020fc:	3108      	adds	r1, #8
  4020fe:	444a      	add	r2, r9
  402100:	f3c2 020b 	ubfx	r2, r2, #0, #12
  402104:	ebc2 0a01 	rsb	sl, r2, r1
  402108:	4651      	mov	r1, sl
  40210a:	4630      	mov	r0, r6
  40210c:	9301      	str	r3, [sp, #4]
  40210e:	f000 f959 	bl	4023c4 <_sbrk_r>
  402112:	1c43      	adds	r3, r0, #1
  402114:	9b01      	ldr	r3, [sp, #4]
  402116:	f000 812c 	beq.w	402372 <_malloc_r+0x4da>
  40211a:	ebc9 0200 	rsb	r2, r9, r0
  40211e:	4452      	add	r2, sl
  402120:	f042 0201 	orr.w	r2, r2, #1
  402124:	6819      	ldr	r1, [r3, #0]
  402126:	f8c7 9008 	str.w	r9, [r7, #8]
  40212a:	4451      	add	r1, sl
  40212c:	42bc      	cmp	r4, r7
  40212e:	f8c9 2004 	str.w	r2, [r9, #4]
  402132:	6019      	str	r1, [r3, #0]
  402134:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4021d4 <_malloc_r+0x33c>
  402138:	d016      	beq.n	402168 <_malloc_r+0x2d0>
  40213a:	f1b8 0f0f 	cmp.w	r8, #15
  40213e:	f240 80ee 	bls.w	40231e <_malloc_r+0x486>
  402142:	6862      	ldr	r2, [r4, #4]
  402144:	f1a8 030c 	sub.w	r3, r8, #12
  402148:	f023 0307 	bic.w	r3, r3, #7
  40214c:	18e0      	adds	r0, r4, r3
  40214e:	f002 0201 	and.w	r2, r2, #1
  402152:	f04f 0e05 	mov.w	lr, #5
  402156:	431a      	orrs	r2, r3
  402158:	2b0f      	cmp	r3, #15
  40215a:	6062      	str	r2, [r4, #4]
  40215c:	f8c0 e004 	str.w	lr, [r0, #4]
  402160:	f8c0 e008 	str.w	lr, [r0, #8]
  402164:	f200 8109 	bhi.w	40237a <_malloc_r+0x4e2>
  402168:	4b1b      	ldr	r3, [pc, #108]	; (4021d8 <_malloc_r+0x340>)
  40216a:	68bc      	ldr	r4, [r7, #8]
  40216c:	681a      	ldr	r2, [r3, #0]
  40216e:	4291      	cmp	r1, r2
  402170:	bf88      	it	hi
  402172:	6019      	strhi	r1, [r3, #0]
  402174:	4b19      	ldr	r3, [pc, #100]	; (4021dc <_malloc_r+0x344>)
  402176:	681a      	ldr	r2, [r3, #0]
  402178:	4291      	cmp	r1, r2
  40217a:	6862      	ldr	r2, [r4, #4]
  40217c:	bf88      	it	hi
  40217e:	6019      	strhi	r1, [r3, #0]
  402180:	f022 0203 	bic.w	r2, r2, #3
  402184:	4295      	cmp	r5, r2
  402186:	eba2 0305 	sub.w	r3, r2, r5
  40218a:	d801      	bhi.n	402190 <_malloc_r+0x2f8>
  40218c:	2b0f      	cmp	r3, #15
  40218e:	dc04      	bgt.n	40219a <_malloc_r+0x302>
  402190:	4630      	mov	r0, r6
  402192:	f000 f915 	bl	4023c0 <__malloc_unlock>
  402196:	2400      	movs	r4, #0
  402198:	e6aa      	b.n	401ef0 <_malloc_r+0x58>
  40219a:	1962      	adds	r2, r4, r5
  40219c:	f043 0301 	orr.w	r3, r3, #1
  4021a0:	f045 0501 	orr.w	r5, r5, #1
  4021a4:	6065      	str	r5, [r4, #4]
  4021a6:	4630      	mov	r0, r6
  4021a8:	60ba      	str	r2, [r7, #8]
  4021aa:	6053      	str	r3, [r2, #4]
  4021ac:	f000 f908 	bl	4023c0 <__malloc_unlock>
  4021b0:	3408      	adds	r4, #8
  4021b2:	4620      	mov	r0, r4
  4021b4:	b003      	add	sp, #12
  4021b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021ba:	2814      	cmp	r0, #20
  4021bc:	d968      	bls.n	402290 <_malloc_r+0x3f8>
  4021be:	2854      	cmp	r0, #84	; 0x54
  4021c0:	f200 8097 	bhi.w	4022f2 <_malloc_r+0x45a>
  4021c4:	0b28      	lsrs	r0, r5, #12
  4021c6:	306e      	adds	r0, #110	; 0x6e
  4021c8:	0041      	lsls	r1, r0, #1
  4021ca:	e6a5      	b.n	401f18 <_malloc_r+0x80>
  4021cc:	2000043c 	.word	0x2000043c
  4021d0:	20000cac 	.word	0x20000cac
  4021d4:	20000cb0 	.word	0x20000cb0
  4021d8:	20000ca8 	.word	0x20000ca8
  4021dc:	20000ca4 	.word	0x20000ca4
  4021e0:	20000848 	.word	0x20000848
  4021e4:	0a5a      	lsrs	r2, r3, #9
  4021e6:	2a04      	cmp	r2, #4
  4021e8:	d955      	bls.n	402296 <_malloc_r+0x3fe>
  4021ea:	2a14      	cmp	r2, #20
  4021ec:	f200 80a7 	bhi.w	40233e <_malloc_r+0x4a6>
  4021f0:	325b      	adds	r2, #91	; 0x5b
  4021f2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4021f6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  4021fa:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4023b8 <_malloc_r+0x520>
  4021fe:	f8dc 1008 	ldr.w	r1, [ip, #8]
  402202:	4561      	cmp	r1, ip
  402204:	d07f      	beq.n	402306 <_malloc_r+0x46e>
  402206:	684a      	ldr	r2, [r1, #4]
  402208:	f022 0203 	bic.w	r2, r2, #3
  40220c:	4293      	cmp	r3, r2
  40220e:	d202      	bcs.n	402216 <_malloc_r+0x37e>
  402210:	6889      	ldr	r1, [r1, #8]
  402212:	458c      	cmp	ip, r1
  402214:	d1f7      	bne.n	402206 <_malloc_r+0x36e>
  402216:	68ca      	ldr	r2, [r1, #12]
  402218:	687b      	ldr	r3, [r7, #4]
  40221a:	60e2      	str	r2, [r4, #12]
  40221c:	60a1      	str	r1, [r4, #8]
  40221e:	6094      	str	r4, [r2, #8]
  402220:	60cc      	str	r4, [r1, #12]
  402222:	e6bb      	b.n	401f9c <_malloc_r+0x104>
  402224:	1963      	adds	r3, r4, r5
  402226:	f042 0701 	orr.w	r7, r2, #1
  40222a:	f045 0501 	orr.w	r5, r5, #1
  40222e:	6065      	str	r5, [r4, #4]
  402230:	4630      	mov	r0, r6
  402232:	614b      	str	r3, [r1, #20]
  402234:	610b      	str	r3, [r1, #16]
  402236:	f8c3 e00c 	str.w	lr, [r3, #12]
  40223a:	f8c3 e008 	str.w	lr, [r3, #8]
  40223e:	605f      	str	r7, [r3, #4]
  402240:	509a      	str	r2, [r3, r2]
  402242:	3408      	adds	r4, #8
  402244:	f000 f8bc 	bl	4023c0 <__malloc_unlock>
  402248:	e652      	b.n	401ef0 <_malloc_r+0x58>
  40224a:	684b      	ldr	r3, [r1, #4]
  40224c:	e6a6      	b.n	401f9c <_malloc_r+0x104>
  40224e:	f109 0901 	add.w	r9, r9, #1
  402252:	f019 0f03 	tst.w	r9, #3
  402256:	f10c 0c08 	add.w	ip, ip, #8
  40225a:	f47f aeb1 	bne.w	401fc0 <_malloc_r+0x128>
  40225e:	e02c      	b.n	4022ba <_malloc_r+0x422>
  402260:	f104 0308 	add.w	r3, r4, #8
  402264:	6964      	ldr	r4, [r4, #20]
  402266:	42a3      	cmp	r3, r4
  402268:	bf08      	it	eq
  40226a:	3002      	addeq	r0, #2
  40226c:	f43f ae69 	beq.w	401f42 <_malloc_r+0xaa>
  402270:	e62e      	b.n	401ed0 <_malloc_r+0x38>
  402272:	441a      	add	r2, r3
  402274:	461c      	mov	r4, r3
  402276:	6851      	ldr	r1, [r2, #4]
  402278:	68db      	ldr	r3, [r3, #12]
  40227a:	f854 5f08 	ldr.w	r5, [r4, #8]!
  40227e:	f041 0101 	orr.w	r1, r1, #1
  402282:	6051      	str	r1, [r2, #4]
  402284:	4630      	mov	r0, r6
  402286:	60eb      	str	r3, [r5, #12]
  402288:	609d      	str	r5, [r3, #8]
  40228a:	f000 f899 	bl	4023c0 <__malloc_unlock>
  40228e:	e62f      	b.n	401ef0 <_malloc_r+0x58>
  402290:	305b      	adds	r0, #91	; 0x5b
  402292:	0041      	lsls	r1, r0, #1
  402294:	e640      	b.n	401f18 <_malloc_r+0x80>
  402296:	099a      	lsrs	r2, r3, #6
  402298:	3238      	adds	r2, #56	; 0x38
  40229a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40229e:	e7aa      	b.n	4021f6 <_malloc_r+0x35e>
  4022a0:	42bc      	cmp	r4, r7
  4022a2:	4b45      	ldr	r3, [pc, #276]	; (4023b8 <_malloc_r+0x520>)
  4022a4:	f43f af0e 	beq.w	4020c4 <_malloc_r+0x22c>
  4022a8:	689c      	ldr	r4, [r3, #8]
  4022aa:	6862      	ldr	r2, [r4, #4]
  4022ac:	f022 0203 	bic.w	r2, r2, #3
  4022b0:	e768      	b.n	402184 <_malloc_r+0x2ec>
  4022b2:	f8d8 8000 	ldr.w	r8, [r8]
  4022b6:	4598      	cmp	r8, r3
  4022b8:	d17c      	bne.n	4023b4 <_malloc_r+0x51c>
  4022ba:	f010 0f03 	tst.w	r0, #3
  4022be:	f1a8 0308 	sub.w	r3, r8, #8
  4022c2:	f100 30ff 	add.w	r0, r0, #4294967295
  4022c6:	d1f4      	bne.n	4022b2 <_malloc_r+0x41a>
  4022c8:	687b      	ldr	r3, [r7, #4]
  4022ca:	ea23 0304 	bic.w	r3, r3, r4
  4022ce:	607b      	str	r3, [r7, #4]
  4022d0:	0064      	lsls	r4, r4, #1
  4022d2:	429c      	cmp	r4, r3
  4022d4:	f63f aeca 	bhi.w	40206c <_malloc_r+0x1d4>
  4022d8:	2c00      	cmp	r4, #0
  4022da:	f43f aec7 	beq.w	40206c <_malloc_r+0x1d4>
  4022de:	4223      	tst	r3, r4
  4022e0:	4648      	mov	r0, r9
  4022e2:	f47f ae69 	bne.w	401fb8 <_malloc_r+0x120>
  4022e6:	0064      	lsls	r4, r4, #1
  4022e8:	4223      	tst	r3, r4
  4022ea:	f100 0004 	add.w	r0, r0, #4
  4022ee:	d0fa      	beq.n	4022e6 <_malloc_r+0x44e>
  4022f0:	e662      	b.n	401fb8 <_malloc_r+0x120>
  4022f2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  4022f6:	d818      	bhi.n	40232a <_malloc_r+0x492>
  4022f8:	0be8      	lsrs	r0, r5, #15
  4022fa:	3077      	adds	r0, #119	; 0x77
  4022fc:	0041      	lsls	r1, r0, #1
  4022fe:	e60b      	b.n	401f18 <_malloc_r+0x80>
  402300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  402304:	e6fb      	b.n	4020fe <_malloc_r+0x266>
  402306:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40230a:	1092      	asrs	r2, r2, #2
  40230c:	f04f 0c01 	mov.w	ip, #1
  402310:	fa0c f202 	lsl.w	r2, ip, r2
  402314:	4313      	orrs	r3, r2
  402316:	f8c8 3004 	str.w	r3, [r8, #4]
  40231a:	460a      	mov	r2, r1
  40231c:	e77d      	b.n	40221a <_malloc_r+0x382>
  40231e:	2301      	movs	r3, #1
  402320:	f8c9 3004 	str.w	r3, [r9, #4]
  402324:	464c      	mov	r4, r9
  402326:	2200      	movs	r2, #0
  402328:	e72c      	b.n	402184 <_malloc_r+0x2ec>
  40232a:	f240 5354 	movw	r3, #1364	; 0x554
  40232e:	4298      	cmp	r0, r3
  402330:	d81c      	bhi.n	40236c <_malloc_r+0x4d4>
  402332:	0ca8      	lsrs	r0, r5, #18
  402334:	307c      	adds	r0, #124	; 0x7c
  402336:	0041      	lsls	r1, r0, #1
  402338:	e5ee      	b.n	401f18 <_malloc_r+0x80>
  40233a:	3210      	adds	r2, #16
  40233c:	e6b4      	b.n	4020a8 <_malloc_r+0x210>
  40233e:	2a54      	cmp	r2, #84	; 0x54
  402340:	d823      	bhi.n	40238a <_malloc_r+0x4f2>
  402342:	0b1a      	lsrs	r2, r3, #12
  402344:	326e      	adds	r2, #110	; 0x6e
  402346:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40234a:	e754      	b.n	4021f6 <_malloc_r+0x35e>
  40234c:	68bc      	ldr	r4, [r7, #8]
  40234e:	6862      	ldr	r2, [r4, #4]
  402350:	f022 0203 	bic.w	r2, r2, #3
  402354:	e716      	b.n	402184 <_malloc_r+0x2ec>
  402356:	f3cb 000b 	ubfx	r0, fp, #0, #12
  40235a:	2800      	cmp	r0, #0
  40235c:	f47f aeb9 	bne.w	4020d2 <_malloc_r+0x23a>
  402360:	4442      	add	r2, r8
  402362:	68bb      	ldr	r3, [r7, #8]
  402364:	f042 0201 	orr.w	r2, r2, #1
  402368:	605a      	str	r2, [r3, #4]
  40236a:	e6fd      	b.n	402168 <_malloc_r+0x2d0>
  40236c:	21fc      	movs	r1, #252	; 0xfc
  40236e:	207e      	movs	r0, #126	; 0x7e
  402370:	e5d2      	b.n	401f18 <_malloc_r+0x80>
  402372:	2201      	movs	r2, #1
  402374:	f04f 0a00 	mov.w	sl, #0
  402378:	e6d4      	b.n	402124 <_malloc_r+0x28c>
  40237a:	f104 0108 	add.w	r1, r4, #8
  40237e:	4630      	mov	r0, r6
  402380:	f7ff fc80 	bl	401c84 <_free_r>
  402384:	f8da 1000 	ldr.w	r1, [sl]
  402388:	e6ee      	b.n	402168 <_malloc_r+0x2d0>
  40238a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40238e:	d804      	bhi.n	40239a <_malloc_r+0x502>
  402390:	0bda      	lsrs	r2, r3, #15
  402392:	3277      	adds	r2, #119	; 0x77
  402394:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  402398:	e72d      	b.n	4021f6 <_malloc_r+0x35e>
  40239a:	f240 5154 	movw	r1, #1364	; 0x554
  40239e:	428a      	cmp	r2, r1
  4023a0:	d804      	bhi.n	4023ac <_malloc_r+0x514>
  4023a2:	0c9a      	lsrs	r2, r3, #18
  4023a4:	327c      	adds	r2, #124	; 0x7c
  4023a6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4023aa:	e724      	b.n	4021f6 <_malloc_r+0x35e>
  4023ac:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  4023b0:	227e      	movs	r2, #126	; 0x7e
  4023b2:	e720      	b.n	4021f6 <_malloc_r+0x35e>
  4023b4:	687b      	ldr	r3, [r7, #4]
  4023b6:	e78b      	b.n	4022d0 <_malloc_r+0x438>
  4023b8:	2000043c 	.word	0x2000043c

004023bc <__malloc_lock>:
  4023bc:	4770      	bx	lr
  4023be:	bf00      	nop

004023c0 <__malloc_unlock>:
  4023c0:	4770      	bx	lr
  4023c2:	bf00      	nop

004023c4 <_sbrk_r>:
  4023c4:	b538      	push	{r3, r4, r5, lr}
  4023c6:	4c07      	ldr	r4, [pc, #28]	; (4023e4 <_sbrk_r+0x20>)
  4023c8:	2300      	movs	r3, #0
  4023ca:	4605      	mov	r5, r0
  4023cc:	4608      	mov	r0, r1
  4023ce:	6023      	str	r3, [r4, #0]
  4023d0:	f7ff f806 	bl	4013e0 <_sbrk>
  4023d4:	1c43      	adds	r3, r0, #1
  4023d6:	d000      	beq.n	4023da <_sbrk_r+0x16>
  4023d8:	bd38      	pop	{r3, r4, r5, pc}
  4023da:	6823      	ldr	r3, [r4, #0]
  4023dc:	2b00      	cmp	r3, #0
  4023de:	d0fb      	beq.n	4023d8 <_sbrk_r+0x14>
  4023e0:	602b      	str	r3, [r5, #0]
  4023e2:	bd38      	pop	{r3, r4, r5, pc}
  4023e4:	20000cf8 	.word	0x20000cf8

004023e8 <__sread>:
  4023e8:	b510      	push	{r4, lr}
  4023ea:	460c      	mov	r4, r1
  4023ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4023f0:	f000 f90a 	bl	402608 <_read_r>
  4023f4:	2800      	cmp	r0, #0
  4023f6:	db03      	blt.n	402400 <__sread+0x18>
  4023f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4023fa:	4403      	add	r3, r0
  4023fc:	6523      	str	r3, [r4, #80]	; 0x50
  4023fe:	bd10      	pop	{r4, pc}
  402400:	89a3      	ldrh	r3, [r4, #12]
  402402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402406:	81a3      	strh	r3, [r4, #12]
  402408:	bd10      	pop	{r4, pc}
  40240a:	bf00      	nop

0040240c <__swrite>:
  40240c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402410:	4616      	mov	r6, r2
  402412:	898a      	ldrh	r2, [r1, #12]
  402414:	461d      	mov	r5, r3
  402416:	05d3      	lsls	r3, r2, #23
  402418:	460c      	mov	r4, r1
  40241a:	4607      	mov	r7, r0
  40241c:	d506      	bpl.n	40242c <__swrite+0x20>
  40241e:	2200      	movs	r2, #0
  402420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402424:	2302      	movs	r3, #2
  402426:	f000 f8db 	bl	4025e0 <_lseek_r>
  40242a:	89a2      	ldrh	r2, [r4, #12]
  40242c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402430:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402434:	81a2      	strh	r2, [r4, #12]
  402436:	4638      	mov	r0, r7
  402438:	4632      	mov	r2, r6
  40243a:	462b      	mov	r3, r5
  40243c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402440:	f000 b814 	b.w	40246c <_write_r>

00402444 <__sseek>:
  402444:	b510      	push	{r4, lr}
  402446:	460c      	mov	r4, r1
  402448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40244c:	f000 f8c8 	bl	4025e0 <_lseek_r>
  402450:	89a3      	ldrh	r3, [r4, #12]
  402452:	1c42      	adds	r2, r0, #1
  402454:	bf0e      	itee	eq
  402456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40245a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40245e:	6520      	strne	r0, [r4, #80]	; 0x50
  402460:	81a3      	strh	r3, [r4, #12]
  402462:	bd10      	pop	{r4, pc}

00402464 <__sclose>:
  402464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402468:	f000 b866 	b.w	402538 <_close_r>

0040246c <_write_r>:
  40246c:	b570      	push	{r4, r5, r6, lr}
  40246e:	4c08      	ldr	r4, [pc, #32]	; (402490 <_write_r+0x24>)
  402470:	4606      	mov	r6, r0
  402472:	2500      	movs	r5, #0
  402474:	4608      	mov	r0, r1
  402476:	4611      	mov	r1, r2
  402478:	461a      	mov	r2, r3
  40247a:	6025      	str	r5, [r4, #0]
  40247c:	f7fd fea4 	bl	4001c8 <_write>
  402480:	1c43      	adds	r3, r0, #1
  402482:	d000      	beq.n	402486 <_write_r+0x1a>
  402484:	bd70      	pop	{r4, r5, r6, pc}
  402486:	6823      	ldr	r3, [r4, #0]
  402488:	2b00      	cmp	r3, #0
  40248a:	d0fb      	beq.n	402484 <_write_r+0x18>
  40248c:	6033      	str	r3, [r6, #0]
  40248e:	bd70      	pop	{r4, r5, r6, pc}
  402490:	20000cf8 	.word	0x20000cf8

00402494 <__register_exitproc>:
  402494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402498:	4c25      	ldr	r4, [pc, #148]	; (402530 <__register_exitproc+0x9c>)
  40249a:	6825      	ldr	r5, [r4, #0]
  40249c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4024a0:	4606      	mov	r6, r0
  4024a2:	4688      	mov	r8, r1
  4024a4:	4692      	mov	sl, r2
  4024a6:	4699      	mov	r9, r3
  4024a8:	b3cc      	cbz	r4, 40251e <__register_exitproc+0x8a>
  4024aa:	6860      	ldr	r0, [r4, #4]
  4024ac:	281f      	cmp	r0, #31
  4024ae:	dc18      	bgt.n	4024e2 <__register_exitproc+0x4e>
  4024b0:	1c43      	adds	r3, r0, #1
  4024b2:	b17e      	cbz	r6, 4024d4 <__register_exitproc+0x40>
  4024b4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4024b8:	2101      	movs	r1, #1
  4024ba:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4024be:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  4024c2:	fa01 f200 	lsl.w	r2, r1, r0
  4024c6:	4317      	orrs	r7, r2
  4024c8:	2e02      	cmp	r6, #2
  4024ca:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4024ce:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4024d2:	d01e      	beq.n	402512 <__register_exitproc+0x7e>
  4024d4:	3002      	adds	r0, #2
  4024d6:	6063      	str	r3, [r4, #4]
  4024d8:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4024dc:	2000      	movs	r0, #0
  4024de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024e2:	4b14      	ldr	r3, [pc, #80]	; (402534 <__register_exitproc+0xa0>)
  4024e4:	b303      	cbz	r3, 402528 <__register_exitproc+0x94>
  4024e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4024ea:	f7ff fccd 	bl	401e88 <malloc>
  4024ee:	4604      	mov	r4, r0
  4024f0:	b1d0      	cbz	r0, 402528 <__register_exitproc+0x94>
  4024f2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4024f6:	2700      	movs	r7, #0
  4024f8:	e880 0088 	stmia.w	r0, {r3, r7}
  4024fc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402500:	4638      	mov	r0, r7
  402502:	2301      	movs	r3, #1
  402504:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402508:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40250c:	2e00      	cmp	r6, #0
  40250e:	d0e1      	beq.n	4024d4 <__register_exitproc+0x40>
  402510:	e7d0      	b.n	4024b4 <__register_exitproc+0x20>
  402512:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402516:	430a      	orrs	r2, r1
  402518:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40251c:	e7da      	b.n	4024d4 <__register_exitproc+0x40>
  40251e:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402522:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402526:	e7c0      	b.n	4024aa <__register_exitproc+0x16>
  402528:	f04f 30ff 	mov.w	r0, #4294967295
  40252c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402530:	00402e08 	.word	0x00402e08
  402534:	00401e89 	.word	0x00401e89

00402538 <_close_r>:
  402538:	b538      	push	{r3, r4, r5, lr}
  40253a:	4c07      	ldr	r4, [pc, #28]	; (402558 <_close_r+0x20>)
  40253c:	2300      	movs	r3, #0
  40253e:	4605      	mov	r5, r0
  402540:	4608      	mov	r0, r1
  402542:	6023      	str	r3, [r4, #0]
  402544:	f7fe ff66 	bl	401414 <_close>
  402548:	1c43      	adds	r3, r0, #1
  40254a:	d000      	beq.n	40254e <_close_r+0x16>
  40254c:	bd38      	pop	{r3, r4, r5, pc}
  40254e:	6823      	ldr	r3, [r4, #0]
  402550:	2b00      	cmp	r3, #0
  402552:	d0fb      	beq.n	40254c <_close_r+0x14>
  402554:	602b      	str	r3, [r5, #0]
  402556:	bd38      	pop	{r3, r4, r5, pc}
  402558:	20000cf8 	.word	0x20000cf8

0040255c <_fclose_r>:
  40255c:	2900      	cmp	r1, #0
  40255e:	d03d      	beq.n	4025dc <_fclose_r+0x80>
  402560:	b570      	push	{r4, r5, r6, lr}
  402562:	4605      	mov	r5, r0
  402564:	460c      	mov	r4, r1
  402566:	b108      	cbz	r0, 40256c <_fclose_r+0x10>
  402568:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40256a:	b37b      	cbz	r3, 4025cc <_fclose_r+0x70>
  40256c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402570:	b90b      	cbnz	r3, 402576 <_fclose_r+0x1a>
  402572:	2000      	movs	r0, #0
  402574:	bd70      	pop	{r4, r5, r6, pc}
  402576:	4628      	mov	r0, r5
  402578:	4621      	mov	r1, r4
  40257a:	f7ff f9d7 	bl	40192c <__sflush_r>
  40257e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402580:	4606      	mov	r6, r0
  402582:	b133      	cbz	r3, 402592 <_fclose_r+0x36>
  402584:	4628      	mov	r0, r5
  402586:	69e1      	ldr	r1, [r4, #28]
  402588:	4798      	blx	r3
  40258a:	2800      	cmp	r0, #0
  40258c:	bfb8      	it	lt
  40258e:	f04f 36ff 	movlt.w	r6, #4294967295
  402592:	89a3      	ldrh	r3, [r4, #12]
  402594:	061b      	lsls	r3, r3, #24
  402596:	d41c      	bmi.n	4025d2 <_fclose_r+0x76>
  402598:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40259a:	b141      	cbz	r1, 4025ae <_fclose_r+0x52>
  40259c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4025a0:	4299      	cmp	r1, r3
  4025a2:	d002      	beq.n	4025aa <_fclose_r+0x4e>
  4025a4:	4628      	mov	r0, r5
  4025a6:	f7ff fb6d 	bl	401c84 <_free_r>
  4025aa:	2300      	movs	r3, #0
  4025ac:	6323      	str	r3, [r4, #48]	; 0x30
  4025ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4025b0:	b121      	cbz	r1, 4025bc <_fclose_r+0x60>
  4025b2:	4628      	mov	r0, r5
  4025b4:	f7ff fb66 	bl	401c84 <_free_r>
  4025b8:	2300      	movs	r3, #0
  4025ba:	6463      	str	r3, [r4, #68]	; 0x44
  4025bc:	f7ff fafa 	bl	401bb4 <__sfp_lock_acquire>
  4025c0:	2300      	movs	r3, #0
  4025c2:	81a3      	strh	r3, [r4, #12]
  4025c4:	f7ff faf8 	bl	401bb8 <__sfp_lock_release>
  4025c8:	4630      	mov	r0, r6
  4025ca:	bd70      	pop	{r4, r5, r6, pc}
  4025cc:	f7ff faec 	bl	401ba8 <__sinit>
  4025d0:	e7cc      	b.n	40256c <_fclose_r+0x10>
  4025d2:	4628      	mov	r0, r5
  4025d4:	6921      	ldr	r1, [r4, #16]
  4025d6:	f7ff fb55 	bl	401c84 <_free_r>
  4025da:	e7dd      	b.n	402598 <_fclose_r+0x3c>
  4025dc:	2000      	movs	r0, #0
  4025de:	4770      	bx	lr

004025e0 <_lseek_r>:
  4025e0:	b570      	push	{r4, r5, r6, lr}
  4025e2:	4c08      	ldr	r4, [pc, #32]	; (402604 <_lseek_r+0x24>)
  4025e4:	4606      	mov	r6, r0
  4025e6:	2500      	movs	r5, #0
  4025e8:	4608      	mov	r0, r1
  4025ea:	4611      	mov	r1, r2
  4025ec:	461a      	mov	r2, r3
  4025ee:	6025      	str	r5, [r4, #0]
  4025f0:	f7fe ff14 	bl	40141c <_lseek>
  4025f4:	1c43      	adds	r3, r0, #1
  4025f6:	d000      	beq.n	4025fa <_lseek_r+0x1a>
  4025f8:	bd70      	pop	{r4, r5, r6, pc}
  4025fa:	6823      	ldr	r3, [r4, #0]
  4025fc:	2b00      	cmp	r3, #0
  4025fe:	d0fb      	beq.n	4025f8 <_lseek_r+0x18>
  402600:	6033      	str	r3, [r6, #0]
  402602:	bd70      	pop	{r4, r5, r6, pc}
  402604:	20000cf8 	.word	0x20000cf8

00402608 <_read_r>:
  402608:	b570      	push	{r4, r5, r6, lr}
  40260a:	4c08      	ldr	r4, [pc, #32]	; (40262c <_read_r+0x24>)
  40260c:	4606      	mov	r6, r0
  40260e:	2500      	movs	r5, #0
  402610:	4608      	mov	r0, r1
  402612:	4611      	mov	r1, r2
  402614:	461a      	mov	r2, r3
  402616:	6025      	str	r5, [r4, #0]
  402618:	f7fd fdb8 	bl	40018c <_read>
  40261c:	1c43      	adds	r3, r0, #1
  40261e:	d000      	beq.n	402622 <_read_r+0x1a>
  402620:	bd70      	pop	{r4, r5, r6, pc}
  402622:	6823      	ldr	r3, [r4, #0]
  402624:	2b00      	cmp	r3, #0
  402626:	d0fb      	beq.n	402620 <_read_r+0x18>
  402628:	6033      	str	r3, [r6, #0]
  40262a:	bd70      	pop	{r4, r5, r6, pc}
  40262c:	20000cf8 	.word	0x20000cf8

00402630 <p_uc_charset10x14>:
	...
  40264c:	ccffccff 00000000 00000000 00000000     ................
  40265c:	00f000f0 00000000 00f000f0 00000000     ................
  40266c:	c00cc00c fcfffcff c00cc00c fcfffcff     ................
  40267c:	c00cc00c 701e600c 3033303f fcfffcff     .....`.p?030....
  40268c:	f0333033 c018e039 0cf00060 f0603cf0     303.9...`....<`.
  40269c:	000fc003 3cf0183c 18003cc0 f87ff03c     ....<..<.<..<...
  4026ac:	8cc71cc3 ecdccccf 30307878 cc00fc00     ........xx00....
  4026bc:	00000000 00440000 00f800ec 00000070     ......D.....p...
	...
  4026d4:	f03fc00f 18607878 0cc00cc0 00000000     ..?.xx`.........
  4026e4:	00000000 0cc00cc0 78781860 c00ff03f     ........`.xx?...
  4026f4:	00000000 e00e600c 8003c007 f83ff83f     .....`......?.?.
  402704:	c0078003 600ce00e 00030003 00030003     .......`........
  402714:	f03ff03f 00030003 00030003 ec004400     ?.?..........D..
  402724:	7000f800 00000000 00000000 00000000     ...p............
  402734:	00030003 00030003 00030003 00030003     ................
  402744:	00030003 3c001800 18003c00 00000000     .......<.<......
	...
  40275c:	0c000000 f0003c00 000fc003 00f0003c     .....<......<...
  40276c:	000000c0 f87ff03f ccc1fce0 0cc78cc3     ....?...........
  40277c:	1cfc0cce f03ff87f 00000000 0c700c30     ......?.....0.p.
  40278c:	fcfffcff 0c000c00 00000000 1c700c30     ............0.p.
  40279c:	7cc03ce0 ccc1ecc0 0ce78cc3 0c3c0c7e     .<.|........~.<.
  4027ac:	38703030 0cc01ce0 0cc30cc0 1ce30cc3     00p8............
  4027bc:	f03cf87f c007c003 c01cc00e c070c038     ..<.........8.p.
  4027cc:	fcfffcff c000c000 38fc30fc 0ccc1ccc     .........0.8....
  4027dc:	0ccc0ccc 1cce0ccc f0c3f8c7 f87ff03f     ............?...
  4027ec:	0cc31ce3 0cc30cc3 9ce30cc3 f030f871     ............q.0.
  4027fc:	00c000c0 00c000c0 fcc7fcc3 00dc00ce     ................
  40280c:	00f000f8 f87ff03c 0cc39ce7 0cc30cc3     ....<...........
  40281c:	9ce70cc3 f03cf87f 007e003c 0cc30ce7     ......<.<.~.....
  40282c:	38c31cc3 e0e770c3 803fc07f 00000000     ...8.p....?.....
  40283c:	60180000 f03cf03c 00006018 00000000     ...`<.<..`......
  40284c:	00000000 44180000 f83cec3c 00007018     .......D<.<..p..
  40285c:	00000000 00030000 c00f8007 7038e01c     ..............8p
  40286c:	1ce03870 00000cc0 c00cc00c c00cc00c     p8..............
  40287c:	c00cc00c c00cc00c c00cc00c 0cc00000     ................
  40288c:	38701ce0 e01c7038 8007c00f 00000003     ..p88p..........
  40289c:	00700030 00c000e0 ecc3ecc1 00e600c3     0.p.............
  4028ac:	003c007e f871f030 0cc39ce3 fcc3fcc3     ~.<.0.q.........
  4028bc:	1ce00cc0 f03ff87f fc7ffc3f c0c0c0e0     ......?.?.......
  4028cc:	c0c0c0c0 c0e0c0c0 fc3ffc7f fcfffcff     ..........?.....
  4028dc:	0cc30cc3 0cc30cc3 9ce70cc3 f03cf87f     ..............<.
  4028ec:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  4028fc:	30303870 fcfffcff 0cc00cc0 0cc00cc0     p800............
  40290c:	1ce00cc0 f03ff87f fcfffcff 0cc30cc3     ......?.........
  40291c:	0cc30cc3 0cc30cc3 0cc00cc0 fcfffcff     ................
  40292c:	00c300c3 00c300c3 00c300c3 00c000c0     ................
  40293c:	f87ff03f 0cc01ce0 0cc30cc0 1ce30cc3     ?...............
  40294c:	f033f873 fcfffcff 00030003 00030003     s.3.............
  40295c:	00030003 fcfffcff 00000000 0cc00cc0     ................
  40296c:	fcfffcff 0cc00cc0 00000000 38003000     .............0.8
  40297c:	0cc01cc0 1cc00cc0 f0fff8ff 00c000c0     ................
  40298c:	fcfffcff 80078007 e01cc00f 38707038     ............8pp8
  40299c:	0cc01ce0 fcfffcff 0c000c00 0c000c00     ................
  4029ac:	0c000c00 0c000c00 fcfffcff 00380070     ............p.8.
  4029bc:	001f001f 00700038 fcfffcff fcfffcff     ....8.p.........
  4029cc:	000e001c 80030007 e000c001 fcfffcff     ................
  4029dc:	f87ff03f 0cc01ce0 0cc00cc0 1ce00cc0     ?...............
  4029ec:	f03ff87f fcfffcff 00c300c3 00c300c3     ..?.............
  4029fc:	00e700c3 003c007e f87ff03f 0cc01ce0     ....~.<.?.......
  402a0c:	ecc0ccc0 38e07cc0 ec3ffc7f fcfffcff     .....|.8..?.....
  402a1c:	80c300c3 c0c380c3 70e7c0c3 1c3c3c7e     ...........p~<<.
  402a2c:	1c7e183c 0cc30ce7 0cc30cc3 9cc30cc3     <.~.............
  402a3c:	f060f8e1 00c000c0 00c000c0 fcfffcff     ..`.............
  402a4c:	00c000c0 00c000c0 f8fff0ff 0c001c00     ................
  402a5c:	0c000c00 1c000c00 f0fff8ff e0ffc0ff     ................
  402a6c:	38007000 1c001c00 70003800 c0ffe0ff     .p.8.....8.p....
  402a7c:	f8fff0ff 3c001c00 f800f800 1c003c00     .......<.....<..
  402a8c:	f0fff8ff 7cf83cf0 c00fe01c 80078007     .....<.|........
  402a9c:	e01cc00f 3cf07cf8 00fe00fc 80030007     .....|.<........
  402aac:	fc01fc01 00078003 00fc00fe 7cc03cc0     .............<.|
  402abc:	ccc1ecc0 0cc78cc3 0cdc0cce 0cf00cf8     ................
  402acc:	00000000 fcfffcff 0cc00cc0 00000cc0     ................
  402adc:	00000000 00300030 000c000c 00030003     ....0.0.........
  402aec:	c000c000 30003000 00000000 0cc00cc0     .....0.0........
  402afc:	fcff0cc0 0000fcff 00000000 001c000c     ................
  402b0c:	00700038 00e000e0 00380070 000c001c     8.p.....p.8.....
  402b1c:	0c000c00 0c000c00 0c000c00 0c000c00     ................
  402b2c:	0c000c00 00000000 00e000c0 00380070     ............p.8.
  402b3c:	00000018 00000000 78063000 cc0cfc0e     .........0.x....
  402b4c:	cc0ccc0c cc0ecc0c f803fc07 fcfffcff     ................
  402b5c:	0c030c03 0c030c03 9c030c03 f000f801     ................
  402b6c:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  402b7c:	30033807 f801f000 0c039c03 0c030c03     .8.0............
  402b8c:	0c030c03 fcfffcff f807f003 cc0cdc0e     ................
  402b9c:	cc0ccc0c dc0ecc0c 9003d807 00030000     ................
  402bac:	fc7ffc3f 00e300e3 00300070 00000000     ?.......p.0.....
  402bbc:	9c071803 cc0ccc0f cc0ccc0c dc0ccc0c     ................
  402bcc:	f007f80f fcfffcff 00030003 00030003     ................
  402bdc:	fc018003 0000fc00 00000000 00000000     ................
  402bec:	fc1bfc1b 00000000 00000000 30000000     ...............0
  402bfc:	1c003800 0c000c00 f8cf1c00 0000f0cf     .8..............
  402c0c:	fcff0000 e000fcff f003e001 1c0e3807     .............8..
  402c1c:	00000c0c 00000000 0cc00cc0 fcfffcff     ................
  402c2c:	0c000c00 00000000 fc0ffc0f 0007000e     ................
  402c3c:	c003c003 000e0007 fc0ffc0f fc0ffc0f     ................
  402c4c:	00070003 000c000e 000e000c fc03fc07     ................
  402c5c:	f807f003 0c0c1c0e 0c0c0c0c 1c0e0c0c     ................
  402c6c:	f003f807 fc0ffc0f c00cc00c c00cc00c     ................
  402c7c:	c00fc00c 00038007 80070003 c00cc00f     ................
  402c8c:	c00cc00c c00cc00c fc0ffc0f fc0ffc0f     ................
  402c9c:	00078003 000c000e 000e000c 00030007     ................
  402cac:	9c071803 cc0ccc0f cc0ccc0c fc0ccc0c     ................
  402cbc:	3006780e 000c0000 f0ff000c 1c0cf8ff     .x.0............
  402ccc:	380c1c0c 0000300c f80ff00f 0c001c00     ...8.0..........
  402cdc:	0c000c00 1c000c00 f00ff80f e00fc00f     ................
  402cec:	38007000 1c001c00 70003800 c00fe00f     .p.8.....8.p....
  402cfc:	f80ff00f 1c001c00 f800f800 1c001c00     ................
  402d0c:	f00ff80f 1c0e0c0c f0033807 e001e001     .........8......
  402d1c:	3807f003 0c0c1c0e 000e000c 9c030c07     ...8............
  402d2c:	f001f801 00078003 000c000e 1c0c0c0c     ................
  402d3c:	7c0c3c0c cc0dec0c 0c0f8c0f 0c0c0c0e     .<.|............
  402d4c:	00030000 f03f8007 1ce0f87c 0cc00cc0     ......?.|.......
  402d5c:	00000cc0 0c030c03 fc7ffc3f 0cc30ce3     ........?.......
  402d6c:	0ce00cc0 0c300c70 0cc00000 0cc00cc0     ....p.0.........
  402d7c:	f87c1ce0 8007f03f 00000003 00c000c0     ..|.?...........
  402d8c:	00c000c0 00c000c0 00c000c0 00c000c0     ................
  402d9c:	fcfffcff fcfffcff fcfffcff fcfffcff     ................
  402dac:	fcfffcff 70736944 2079616c 4c203331     ....Display 13 L
  402dbc:	00004443 696c6546 42206570 69646c61     CD..Felipe Baldi
  402dcc:	0000206d 6c697547 6d726568 614d2065     m ..Guilherme Ma
  402ddc:	6e697472 00007365 72746150 61696369     rtines..Patricia
  402dec:	6c6f4d20 00616e69 00000073 6f6c6556      Molina.s...Velo
  402dfc:	61646963 00006564 00000043              cidade..C...

00402e08 <_global_impure_ptr>:
  402e08:	20000010                                ... 

00402e0c <_init>:
  402e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e0e:	bf00      	nop
  402e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e12:	bc08      	pop	{r3}
  402e14:	469e      	mov	lr, r3
  402e16:	4770      	bx	lr

00402e18 <__init_array_start>:
  402e18:	0040190d 	.word	0x0040190d

00402e1c <__frame_dummy_init_array_entry>:
  402e1c:	004000f1                                ..@.

00402e20 <_fini>:
  402e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402e22:	bf00      	nop
  402e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402e26:	bc08      	pop	{r3}
  402e28:	469e      	mov	lr, r3
  402e2a:	4770      	bx	lr

00402e2c <__fini_array_start>:
  402e2c:	004000cd 	.word	0x004000cd
